PostId,PostCreationDate,OwnerUserId,OwnerCreationDate,ReputationAtPostCreation,OwnerUndeletedAnswerCountAtPostTime,Title,BodyMarkdown,Tag1,Tag2,Tag3,Tag4,Tag5,PostClosedDate,OpenStatus,OpenStatusInt,BodyLength,TitleLength,TitleConcatWithBody,NumberOfTags
2803920,05/10/2010 15:28:29,289055,03/08/2010 18:21:53,16,2,Fibonacci Numbers in Haskell,"Hi everbody I need to change my F# code to Haskell code  but I am so new in Haskell and I can not this My code simply read data from keyboard if data not an integer return an error message then calculate the n fibonacci number then writes to a list after that writes the list into a txt file Here is my code 

open System
let rec fib n = 
    match n with
    |0->0
    |1->1
    |2->1
    |n->fib(n-1)+fib(n-2);;

let printFibonacci list = 
    for i=0 to (List.length list)-1 do
        printf ""%d "" (list.Item(i));;

let writeToFile list = 
    let file = System.IO.File.Create(""C:\out2.txt"")
    let mutable s =""""
    let writer = new System.IO.StreamWriter(file)
    try
        for i=0 to (List.length list)-1 do
        s <- list.Item(i).ToString()
        writer.Write(s+"" "")

    finally
        writer.Close()
        file.Dispose()
        printfn ""Writed To File""
        
        
let mutable control = true
let mutable num = 0
while control do 
    try
    printfn ""Enter a Number:"" 

    num <- Convert.ToInt32(stdin.ReadLine()) 
    let listFibonacci = [for i in 0 .. num-1->fib(i)]
    printFibonacci(listFibonacci)
    printfn ""\n%A""(listFibonacci)
    writeToFile(listFibonacci)
    control<-false
    with
        | :? System.FormatException->printfn ""Number Format Exception"";

Console.ReadKey true|>ignore

",haskell,,,,,,open,0,304,4,"Fibonacci Numbers in Haskell Hi everbody I need to change my F# code to Haskell code  but I am so new in Haskell and I can not this My code simply read data from keyboard if data not an integer return an error message then calculate the n fibonacci number then writes to a list after that writes the list into a txt file Here is my code 

open System
let rec fib n = 
    match n with
    |0->0
    |1->1
    |2->1
    |n->fib(n-1)+fib(n-2);;

let printFibonacci list = 
    for i=0 to (List.length list)-1 do
        printf ""%d "" (list.Item(i));;

let writeToFile list = 
    let file = System.IO.File.Create(""C:\out2.txt"")
    let mutable s =""""
    let writer = new System.IO.StreamWriter(file)
    try
        for i=0 to (List.length list)-1 do
        s <- list.Item(i).ToString()
        writer.Write(s+"" "")

    finally
        writer.Close()
        file.Dispose()
        printfn ""Writed To File""
        
        
let mutable control = true
let mutable num = 0
while control do 
    try
    printfn ""Enter a Number:"" 

    num <- Convert.ToInt32(stdin.ReadLine()) 
    let listFibonacci = [for i in 0 .. num-1->fib(i)]
    printFibonacci(listFibonacci)
    printfn ""\n%A""(listFibonacci)
    writeToFile(listFibonacci)
    control<-false
    with
        | :? System.FormatException->printfn ""Number Format Exception"";

Console.ReadKey true|>ignore

",1
6302249,06/10/2011 05:15:28,618815,01/03/2011 04:06:55,191,1,How to implement a global counter using Monad?,"I need a global counter, starting from 0, 1, 2, 3, .....
I kind of understand that this ""impure"" code should be separately implemented... I am just starting to understand Monad, but have no idea how to implement this global counter using Monad? This could be very useful example for understanding if it is possible",haskell,monads,,,,,open,0,54,8,"How to implement a global counter using Monad? I need a global counter, starting from 0, 1, 2, 3, .....
I kind of understand that this ""impure"" code should be separately implemented... I am just starting to understand Monad, but have no idea how to implement this global counter using Monad? This could be very useful example for understanding if it is possible",2
2904591,05/25/2010 12:35:30,143717,07/23/2009 13:17:18,116,1,Want to add a functional language to my toolchest. Haskell or Erlang?,"I've been an OO/procedural guy my whole career except in school where I did a lot of logic programming (Prolog). I work on an amazing variety of projects (freelancer) and so I don't want the tools I know and understand to hold me back from using the right tool for the job. I've decided I should know a functional programming language.

I've narrowed the field to Haskell and Erlang. What are the pros and cons, advantages and disadvantages, and major trade offs of Haskell and Erlang? How do I decide in a rational way, which is the better path? This is a big time investment, so I'd like to chose wisely.

Is there a good case to be made for something else entirely? F#, Scala Ocaml?

(BTW, I'm normally a Ruby/C/Obj.C guy, so I'm not terribly impressed or dependent on the JVM as a runtime. It's completely neutral to me. It's a fine runtime, I don't hold it for or against a language. I don't use Microsoft products though, so a .NET runtime would be a negative.)
",haskell,functional-programming,erlang,,,05/27/2010 06:58:36,not constructive,1,174,12,"Want to add a functional language to my toolchest. Haskell or Erlang? I've been an OO/procedural guy my whole career except in school where I did a lot of logic programming (Prolog). I work on an amazing variety of projects (freelancer) and so I don't want the tools I know and understand to hold me back from using the right tool for the job. I've decided I should know a functional programming language.

I've narrowed the field to Haskell and Erlang. What are the pros and cons, advantages and disadvantages, and major trade offs of Haskell and Erlang? How do I decide in a rational way, which is the better path? This is a big time investment, so I'd like to chose wisely.

Is there a good case to be made for something else entirely? F#, Scala Ocaml?

(BTW, I'm normally a Ruby/C/Obj.C guy, so I'm not terribly impressed or dependent on the JVM as a runtime. It's completely neutral to me. It's a fine runtime, I don't hold it for or against a language. I don't use Microsoft products though, so a .NET runtime would be a negative.)
",3
1012573,06/18/2009 13:17:11,50685,01/01/2009 12:19:32,1,0,How to learn Haskell,"For a few days I've tried to wrap my head around the functional programming paradigm in Haskell. I've done this by reading tutorials and watching screencasts, but nothing really seems to stick.
Now, in learning various imperative/OO languages (like C, Java, PHP), excercises have been a good way for me to go. But since I don't really know what Haskell is capable of and because there are many new concepts to utilize, I haven't known where to start.

So, how did you learn Haskell? What made you really ""break the ice""? Also, any good ideas for beginning excercises?",haskell,self-improvement,functional-programming,,,03/02/2012 17:27:58,not constructive,1,96,4,"How to learn Haskell For a few days I've tried to wrap my head around the functional programming paradigm in Haskell. I've done this by reading tutorials and watching screencasts, but nothing really seems to stick.
Now, in learning various imperative/OO languages (like C, Java, PHP), excercises have been a good way for me to go. But since I don't really know what Haskell is capable of and because there are many new concepts to utilize, I haven't known where to start.

So, how did you learn Haskell? What made you really ""break the ice""? Also, any good ideas for beginning excercises?",3
4892691,02/03/2011 22:51:12,597023,01/31/2011 15:00:54,38,0,2 Haskell Functions,"The primary code:http://pastebin.com/GxQBh3hx

->Function 1)
                
              removeTautologies :: Formula->Formula
 
If in a clause, a literal and its negation are found, it means that the clause will be true, regardless of the value finally assigned to that propositional variable. Consider the following example: (A v B v -A) ^ (B v C v A) The first clause contains the literals A and -A. This means that the clause will always be true, in which case it can be simplify the whole set to simply (B v C v A) .
I was tinking of using something like
 removeTautologies (f:fs)=filter rTf:removeTautologies fs
      where rT-is supposed to take the firs Literal from the clasue and search for a similar one,if one si found we compare the values if not the we go to the second literal.
 
->Function 2)
                 
        pureLiteralDeletion :: Formula->Formula

This is a little bit complicate but from What I get this function is suppose to implement a simplification step that assumes as true any atom in a formula that appears exclusively in a positive or negative form (not both). Consider the formula: (P v Q v R) ^ (P v Q v -R) ^ (-Q v R) Note that in this formula P is present but -P is not. Using Pure Literal Deletion it can be assumed that the value of P will be True thus simplifying the formula to (-Q v R). If the literal were false then the literal would simply be deleted from the clauses it appears in. In that case any satisfying model for the resulting formula would also be a satisfying model for the formula when we assume that the literal is true.
",haskell,,,,,02/04/2011 11:47:11,not a real question,1,331,3,"2 Haskell Functions The primary code:http://pastebin.com/GxQBh3hx

->Function 1)
                
              removeTautologies :: Formula->Formula
 
If in a clause, a literal and its negation are found, it means that the clause will be true, regardless of the value finally assigned to that propositional variable. Consider the following example: (A v B v -A) ^ (B v C v A) The first clause contains the literals A and -A. This means that the clause will always be true, in which case it can be simplify the whole set to simply (B v C v A) .
I was tinking of using something like
 removeTautologies (f:fs)=filter rTf:removeTautologies fs
      where rT-is supposed to take the firs Literal from the clasue and search for a similar one,if one si found we compare the values if not the we go to the second literal.
 
->Function 2)
                 
        pureLiteralDeletion :: Formula->Formula

This is a little bit complicate but from What I get this function is suppose to implement a simplification step that assumes as true any atom in a formula that appears exclusively in a positive or negative form (not both). Consider the formula: (P v Q v R) ^ (P v Q v -R) ^ (-Q v R) Note that in this formula P is present but -P is not. Using Pure Literal Deletion it can be assumed that the value of P will be True thus simplifying the formula to (-Q v R). If the literal were false then the literal would simply be deleted from the clauses it appears in. In that case any satisfying model for the resulting formula would also be a satisfying model for the formula when we assume that the literal is true.
",1
10129080,04/12/2012 17:57:13,697630,04/07/2011 21:35:31,3828,188,Analysis and Design for Functional Programming,"How do you deal with analysis and design phases when you plan to develop a system using a functional programming language like Haskell?

My background is in imperative/object-oriented programming languages, and therefore, I am used to use case analysis and the use of UML to document the design of program. But the thing is that UML is inherently related to the object-oriented way of doing software.

And I am intrigued about what would be the best way to develop documentation and define software designs for a system that is going to be developed using functional programming. 

 - Would you still use [use case analysis][1] or perhaps [structured analysis and design][2] instead?
 - How do software architects define the high-level design of the system so that developers follow it?
 - What do you show to you clients or to new developers when you are supposed to present a design of the solution?
 - How do you document a picture of the whole thing without having first to write it all?
 - Is there anything comparable to [UML][3] in the functional world?


  [1]: http://en.wikipedia.org/wiki/Use-case_analysis
  [2]: http://en.wikipedia.org/wiki/Structured_Analysis_and_Design_Technique
  [3]: http://en.wikipedia.org/wiki/Unified_Modeling_Language",haskell,functional-programming,analysis,software-design,purely-functional,04/13/2012 04:23:10,not constructive,1,188,6,"Analysis and Design for Functional Programming How do you deal with analysis and design phases when you plan to develop a system using a functional programming language like Haskell?

My background is in imperative/object-oriented programming languages, and therefore, I am used to use case analysis and the use of UML to document the design of program. But the thing is that UML is inherently related to the object-oriented way of doing software.

And I am intrigued about what would be the best way to develop documentation and define software designs for a system that is going to be developed using functional programming. 

 - Would you still use [use case analysis][1] or perhaps [structured analysis and design][2] instead?
 - How do software architects define the high-level design of the system so that developers follow it?
 - What do you show to you clients or to new developers when you are supposed to present a design of the solution?
 - How do you document a picture of the whole thing without having first to write it all?
 - Is there anything comparable to [UML][3] in the functional world?


  [1]: http://en.wikipedia.org/wiki/Use-case_analysis
  [2]: http://en.wikipedia.org/wiki/Structured_Analysis_and_Design_Technique
  [3]: http://en.wikipedia.org/wiki/Unified_Modeling_Language",5
11428601,07/11/2012 08:33:01,1337806,04/17/2012 04:49:31,58,1,NLP Parser in Haskell,"Does Haskell have a good 
(a) natural language parser
(b) part of speech tagger
(c) nlp library (a la python's nltk)",haskell,nlp,,,,07/12/2012 12:18:15,not constructive,1,19,4,"NLP Parser in Haskell Does Haskell have a good 
(a) natural language parser
(b) part of speech tagger
(c) nlp library (a la python's nltk)",2
8439722,12/09/2011 00:41:52,1198582,06/16/2011 21:39:48,441,5,To what extent have the machine learning algorithms explicated on wikipedia been implemented in Haskell?,"I don't see anything like PyBrain for Haskell, and I wonder if this is because the various algorithms from [this](http://en.wikipedia.org/wiki/List_of_machine_learning_algorithms) page can be found in different categories on hackage. ",haskell,machine-learning,,,,12/09/2011 01:39:33,not a real question,1,30,15,"To what extent have the machine learning algorithms explicated on wikipedia been implemented in Haskell? I don't see anything like PyBrain for Haskell, and I wonder if this is because the various algorithms from [this](http://en.wikipedia.org/wiki/List_of_machine_learning_algorithms) page can be found in different categories on hackage. ",2
7871510,10/24/2011 05:09:14,1010130,10/24/2011 01:54:14,1,0,parse error (possibly incorrect indentation),"I am getting following error can any one explain me what is wrong with the code.
105:0: parse error (possibly incorrect indentation)


        -- Type inference for expressions
        --
        tyInf :: Gamma -> Exp -> TC (Exp, Type, Subst)
        tyInf g (Num n) =  return (Num n, intTyCon, [([intId], intTyCon)])
        tyInf g (Con tag[])   | tag == unitTag = return ((Con tag[]),unitTyCon,[([unitId], 
                          unitTyCon)])
                      | tag == falseTag  = return ((Con tag[]), boolTyCon, 
               [([boolId],boolTyCon)])
                      | tag == trueTag   = return ((Con tag[]),boolTyCon, 
              [([boolId],boolTyCon)])
                      | otherwise        = error ""unknown constructor""
        tyInf g (Con tag [ e1, e2]) | tag == pairTag = do 		
   			return ( (Con tag [ e1, e1], (mkPairTy (tyInf g e1) (tyInf g e2)), 
          [([pairId], (mkPairTy (tyInf g e1) (tyInf g e2)))])
        -- ---------------------------------------------------------------------
        -- The type for a unifier.
         -- A value of this type maps free type variables to real types.
        --
        -- You may change this type if you wish. The following is one possible
        -- type, though not necessarily the best.
        --
     this line is 105: type Subst = [([TyVar], (Type))]
    
       -- ---------------------------------------------------------------------
       -- Unification
       --
       unify :: Type -> Type -> Subst
       unify t1 t2 | t1 == t2  =  []
            | otherwise  =  [(tyVarsIn t1, t2)]
       -- --------------------------------------------------------------------- ",haskell,,,,,10/24/2011 12:25:34,too localized,1,499,5,"parse error (possibly incorrect indentation) I am getting following error can any one explain me what is wrong with the code.
105:0: parse error (possibly incorrect indentation)


        -- Type inference for expressions
        --
        tyInf :: Gamma -> Exp -> TC (Exp, Type, Subst)
        tyInf g (Num n) =  return (Num n, intTyCon, [([intId], intTyCon)])
        tyInf g (Con tag[])   | tag == unitTag = return ((Con tag[]),unitTyCon,[([unitId], 
                          unitTyCon)])
                      | tag == falseTag  = return ((Con tag[]), boolTyCon, 
               [([boolId],boolTyCon)])
                      | tag == trueTag   = return ((Con tag[]),boolTyCon, 
              [([boolId],boolTyCon)])
                      | otherwise        = error ""unknown constructor""
        tyInf g (Con tag [ e1, e2]) | tag == pairTag = do 		
   			return ( (Con tag [ e1, e1], (mkPairTy (tyInf g e1) (tyInf g e2)), 
          [([pairId], (mkPairTy (tyInf g e1) (tyInf g e2)))])
        -- ---------------------------------------------------------------------
        -- The type for a unifier.
         -- A value of this type maps free type variables to real types.
        --
        -- You may change this type if you wish. The following is one possible
        -- type, though not necessarily the best.
        --
     this line is 105: type Subst = [([TyVar], (Type))]
    
       -- ---------------------------------------------------------------------
       -- Unification
       --
       unify :: Type -> Type -> Subst
       unify t1 t2 | t1 == t2  =  []
            | otherwise  =  [(tyVarsIn t1, t2)]
       -- --------------------------------------------------------------------- ",1
10646299,05/18/2012 03:22:54,306857,04/01/2010 12:29:19,136,0,Sharing information computed by monad actions,"I am studying compiler construction using Haskell. I am using fixed point data type recursion to represent abstract syntax trees (ast).

I am investigating how to write the type checker for a toy language having simple expressions (numeric and logic constants, binary operations and local variable declarations).

The type checker is a read-write-state (`RWS`) monad:

 - reader because it uses a context consisting of an environment with symbol definitions (an association list of a symbol and its type);
 - writer because it generates a list of error messages;
 - state will be needed later for implementing nominal type equivalence, and by now I am just counting how many variables are defined in the program (just as a demonstration of its use).

The value returned by the monad is an ast annotated with types (for expressions) or environments (for declarations).

The function `checker` receives an ast of the input program and results in a new ast annotated with `RWS` monad actions that, when run, gives the type (if the ast is an expression) or the environment (if the ast is a declaration).

For instance, consider the input program

    let x = 2 + 3 in 1 + x

with the corresponding ast:


                        Let                     
                         |                      
              -----------------------           
             |                      |           
         VarDec: x               Bin Add        
             |                      |           
             |                ------------      
             |                |          |      
          Bin Add          Num 1.0     Var x    
             |                                  
        -----------                             
       |          |                             
    Num 2.0    Num 3.0


Type checking it will produce the following ast:

                      action1
                        Let                     
                         |                      
              -----------------------           
             |                      |           
          action2                action3
         VarDec: x               Bin Add        
             |                      |           
             |                ------------      
             |                |          |      
          action4          action5    action6
          Bin Add          Num 1.0     Var x    
             |                                  
        -----------                             
       |          |                   
    action7    action8      
    Num 2.0    Num 3.0


which is recursively annotated with `RWS` monad actions.

Later phases of the compiler will need to know the information produced by the annotations in the ast (and its children, recursively). Therefore it will be needed to run the corresponding action to get it.

A root action is constructed by composing the actions of the children, according to the rules of the language.

For instance, in order to get the type of the root expression (a let expression), `action1` has to be run, and that will make `action2` and `action3` to be run as well, because when `action1` was created, it used `action2` and `action3`.

When the type of the addition `1+x` is needed, `action3` has to be run in order to get it.

So actions will be run repeatedly. The way the type checker is structured (using `RWS` monad actions) loses sharing of the computed information for each node of the ast.

Is there any technique to recover this sharing, eliminating the need of recomputing actions?",haskell,compiler,monads,sharing,,,open,0,1430,6,"Sharing information computed by monad actions I am studying compiler construction using Haskell. I am using fixed point data type recursion to represent abstract syntax trees (ast).

I am investigating how to write the type checker for a toy language having simple expressions (numeric and logic constants, binary operations and local variable declarations).

The type checker is a read-write-state (`RWS`) monad:

 - reader because it uses a context consisting of an environment with symbol definitions (an association list of a symbol and its type);
 - writer because it generates a list of error messages;
 - state will be needed later for implementing nominal type equivalence, and by now I am just counting how many variables are defined in the program (just as a demonstration of its use).

The value returned by the monad is an ast annotated with types (for expressions) or environments (for declarations).

The function `checker` receives an ast of the input program and results in a new ast annotated with `RWS` monad actions that, when run, gives the type (if the ast is an expression) or the environment (if the ast is a declaration).

For instance, consider the input program

    let x = 2 + 3 in 1 + x

with the corresponding ast:


                        Let                     
                         |                      
              -----------------------           
             |                      |           
         VarDec: x               Bin Add        
             |                      |           
             |                ------------      
             |                |          |      
          Bin Add          Num 1.0     Var x    
             |                                  
        -----------                             
       |          |                             
    Num 2.0    Num 3.0


Type checking it will produce the following ast:

                      action1
                        Let                     
                         |                      
              -----------------------           
             |                      |           
          action2                action3
         VarDec: x               Bin Add        
             |                      |           
             |                ------------      
             |                |          |      
          action4          action5    action6
          Bin Add          Num 1.0     Var x    
             |                                  
        -----------                             
       |          |                   
    action7    action8      
    Num 2.0    Num 3.0


which is recursively annotated with `RWS` monad actions.

Later phases of the compiler will need to know the information produced by the annotations in the ast (and its children, recursively). Therefore it will be needed to run the corresponding action to get it.

A root action is constructed by composing the actions of the children, according to the rules of the language.

For instance, in order to get the type of the root expression (a let expression), `action1` has to be run, and that will make `action2` and `action3` to be run as well, because when `action1` was created, it used `action2` and `action3`.

When the type of the addition `1+x` is needed, `action3` has to be run in order to get it.

So actions will be run repeatedly. The way the type checker is structured (using `RWS` monad actions) loses sharing of the computed information for each node of the ast.

Is there any technique to recover this sharing, eliminating the need of recomputing actions?",4
10339851,04/26/2012 19:13:16,1359536,04/26/2012 19:10:19,1,0,Haskell illegal pattern match,"I have been told that this fucntion declaration is illegal: 

f3 1 (f2 x) y

I do understand why this illegal, I think it has something to do with the second argument (f2 x). Can anyone explain this to me?",haskell,pattern-matching,,,,04/30/2012 15:30:34,too localized,1,39,4,"Haskell illegal pattern match I have been told that this fucntion declaration is illegal: 

f3 1 (f2 x) y

I do understand why this illegal, I think it has something to do with the second argument (f2 x). Can anyone explain this to me?",2
7122954,08/19/2011 14:19:11,722002,04/23/2011 18:44:12,59,0,Future of parallel programming,"**What do you think is the future of parallel computing in general ?**

I'mnot really experienced when it comes to parallel computing however I'm a big enthusiast of it. During last year I was working on different projects using MPI, OMP, CUDA/OpenCL and I was amazed that people aren't really enthusiastic about GPU computing.

Mainly because GPUs don't have secure future, they can switch to ray tracing model in next 5-10 years and we will need completely new approach to using them in parallel programming. Also because when you use double precision numbers (which are mostly used in science or my main research field which is physics) the GPU advantage over CPU's isn't as huge as with single precision.

During my last project I was told that Haskell (which I'mnot very familiar with) is very promising when it comes to parallel computing because it does everything automatically and out of the box. 
<br>**Do you think Haskell is interesting as a parallel programming language?**

**What do you think about GPUs future in parallel universe?**

Or maybe there are some new approaches which one should get familiar with?",haskell,cuda,mpi,parallel-processing,opencl,08/19/2011 14:33:52,not constructive,1,181,4,"Future of parallel programming **What do you think is the future of parallel computing in general ?**

I'mnot really experienced when it comes to parallel computing however I'm a big enthusiast of it. During last year I was working on different projects using MPI, OMP, CUDA/OpenCL and I was amazed that people aren't really enthusiastic about GPU computing.

Mainly because GPUs don't have secure future, they can switch to ray tracing model in next 5-10 years and we will need completely new approach to using them in parallel programming. Also because when you use double precision numbers (which are mostly used in science or my main research field which is physics) the GPU advantage over CPU's isn't as huge as with single precision.

During my last project I was told that Haskell (which I'mnot very familiar with) is very promising when it comes to parallel computing because it does everything automatically and out of the box. 
<br>**Do you think Haskell is interesting as a parallel programming language?**

**What do you think about GPUs future in parallel universe?**

Or maybe there are some new approaches which one should get familiar with?",5
4235741,11/21/2010 00:16:13,205694,11/07/2009 17:43:29,25,1,Point-free form versus style,"Can you convert

    -- tupleUnfold :: forall a. ((forall b. a -> b)) -> a -> ((b))
    tupleUnfold :: Int -> ExpQ
    tupleUnfold n = do
      xs <- forM [1 .. n] (const . newName $ ""x"")
      y <- newName ""y""
      let y' = varE y
          g (ps', es') x = (varP x : ps', appE (varE x) y' : es')
          (ps, es) = foldl' g ([], []) xs
      lamE [tupP ps, varP y] (tupE es)

to pointfree style while maintaining clarity (I know of the program 'pointfree', but would prefer not to obfuscate the code even more)?

Either way, what changes could be made to improve the style of the function, or otherwise makes its intent clearer?  The function is intended to be used as below.

    $(tupleUnfold 3) ((+ 1), (+ 2), (+ 3)) 2
    -- (3, 4, 5)

What are some better naming conventions to use (see the ps, ps', es, and es' variables)?",haskell,coding-style,pointfree,,,,open,0,207,4,"Point-free form versus style Can you convert

    -- tupleUnfold :: forall a. ((forall b. a -> b)) -> a -> ((b))
    tupleUnfold :: Int -> ExpQ
    tupleUnfold n = do
      xs <- forM [1 .. n] (const . newName $ ""x"")
      y <- newName ""y""
      let y' = varE y
          g (ps', es') x = (varP x : ps', appE (varE x) y' : es')
          (ps, es) = foldl' g ([], []) xs
      lamE [tupP ps, varP y] (tupE es)

to pointfree style while maintaining clarity (I know of the program 'pointfree', but would prefer not to obfuscate the code even more)?

Either way, what changes could be made to improve the style of the function, or otherwise makes its intent clearer?  The function is intended to be used as below.

    $(tupleUnfold 3) ((+ 1), (+ 2), (+ 3)) 2
    -- (3, 4, 5)

What are some better naming conventions to use (see the ps, ps', es, and es' variables)?",3
788361,04/25/2009 06:31:03,80112,03/19/2009 16:27:34,1757,74,"Critique this late night, noob Haskell code","I'm working through [Real World Haskell][1], and at the moment doing the exercises at the end of Chapter 3.

I'm taking an unusual approach: **even though I know there are some language features they haven't covered yet that would help me, I am trying to do these exercises using *only* things they have explicitly covered.** Why? Just kind of for fun really. It feels like it is forcing me to give my brain some extra practice with recursion.

So I just completed the exercise posed as follows: **""Create a function that sorts a list of lists based on the length of each sublist. (You may want to look at the sortBy function from the Data.List module.)""**

Now, they threw in the hint about the Data.List module. But they didn't say a word about where reference doc can be found, about how to import stuff, etc. So I decided to *roll my own sort* just to see if I could do it. I used Bubble Sort since it's the simplest algorithm.

The result is below. I'd like to get you Haskell gurus to critique it please ... but **with the following caveat in mind:**  *If you suggest improvements, please base them on language features covered through chapter 3 of Real World Haskell (or what you guess those features might be without going to the trouble of looking it up). I **know** there are tons of awesome language features waiting for me that will let me make this code better, but right now the specific challenge was to do it with the ""primitive"" features covered so far.*

I'm sure there are cases where I'm reaching around my shoulder to scratch my elbow, cases where I'm using explicit control flow when recursion and pattern matching could do more for me, etc. I'm sure the code could be made much shorter and more readable too. I bet there are good idioms I don't know about that can be used with the primitive language features I'm limiting myself to. Those are the kinds of tips I'd love to receive.

This is probably the ugliest code I'm proud of in any language (at least, that I can remember). My first stab, in a functional language, at something beyond ""Hello, world"" type stuff. And now you are going to beat the crap out of it :) . Be gentle, please, but I'm looking forward to some meaty insight. Thanks.

    areListsEqual :: (Eq a) => [a] -> [a] -> Bool
    
    areListsEqual [] [] = True
    areListsEqual [] _ 	= False
    areListsEqual _ []	= False
    
    areListsEqual xs ys	= (head xs == head ys)  && (areListsEqual (tail xs) (tail ys))
    
    charlieSort :: (Eq a) => [[a]] -> [[a]]
    
    charlieSort [] = []
    charlieSort (x:xs) | null xs = [x]
    charlieSort xs | (length xs) >= 2 = if(not (areListsEqual xs wip))
    					then charlieSort wip 
    					else wip
    					where
    					  first = head xs
    					  second = head (tail xs)
    					  theRest = drop 2 xs
    					  swapPairIfNeeded a b = if(length a >= length b) 
    					      then [second, first]
    					      else [first, second]
    					  modifiedPair = swapPairIfNeeded first second
    					  wip = (take 1 modifiedPair) ++ charlieSort ( (drop 1 modifiedPair) ++ theRest)


  [1]: http://book.realworldhaskell.org/",haskell,functional-programming,sorting,,,,open,0,625,7,"Critique this late night, noob Haskell code I'm working through [Real World Haskell][1], and at the moment doing the exercises at the end of Chapter 3.

I'm taking an unusual approach: **even though I know there are some language features they haven't covered yet that would help me, I am trying to do these exercises using *only* things they have explicitly covered.** Why? Just kind of for fun really. It feels like it is forcing me to give my brain some extra practice with recursion.

So I just completed the exercise posed as follows: **""Create a function that sorts a list of lists based on the length of each sublist. (You may want to look at the sortBy function from the Data.List module.)""**

Now, they threw in the hint about the Data.List module. But they didn't say a word about where reference doc can be found, about how to import stuff, etc. So I decided to *roll my own sort* just to see if I could do it. I used Bubble Sort since it's the simplest algorithm.

The result is below. I'd like to get you Haskell gurus to critique it please ... but **with the following caveat in mind:**  *If you suggest improvements, please base them on language features covered through chapter 3 of Real World Haskell (or what you guess those features might be without going to the trouble of looking it up). I **know** there are tons of awesome language features waiting for me that will let me make this code better, but right now the specific challenge was to do it with the ""primitive"" features covered so far.*

I'm sure there are cases where I'm reaching around my shoulder to scratch my elbow, cases where I'm using explicit control flow when recursion and pattern matching could do more for me, etc. I'm sure the code could be made much shorter and more readable too. I bet there are good idioms I don't know about that can be used with the primitive language features I'm limiting myself to. Those are the kinds of tips I'd love to receive.

This is probably the ugliest code I'm proud of in any language (at least, that I can remember). My first stab, in a functional language, at something beyond ""Hello, world"" type stuff. And now you are going to beat the crap out of it :) . Be gentle, please, but I'm looking forward to some meaty insight. Thanks.

    areListsEqual :: (Eq a) => [a] -> [a] -> Bool
    
    areListsEqual [] [] = True
    areListsEqual [] _ 	= False
    areListsEqual _ []	= False
    
    areListsEqual xs ys	= (head xs == head ys)  && (areListsEqual (tail xs) (tail ys))
    
    charlieSort :: (Eq a) => [[a]] -> [[a]]
    
    charlieSort [] = []
    charlieSort (x:xs) | null xs = [x]
    charlieSort xs | (length xs) >= 2 = if(not (areListsEqual xs wip))
    					then charlieSort wip 
    					else wip
    					where
    					  first = head xs
    					  second = head (tail xs)
    					  theRest = drop 2 xs
    					  swapPairIfNeeded a b = if(length a >= length b) 
    					      then [second, first]
    					      else [first, second]
    					  modifiedPair = swapPairIfNeeded first second
    					  wip = (take 1 modifiedPair) ++ charlieSort ( (drop 1 modifiedPair) ++ theRest)


  [1]: http://book.realworldhaskell.org/",3
11295915,07/02/2012 14:41:56,637669,02/28/2011 12:33:19,3072,170,How to determine data's constructor from foreign code?,"In my Haskell program i have an ADT with many constructors:

    data MyData = Con1 |
        Con2 |
        ...
        Con20

I have an `foreign export ccall` function, which wraps `[MyData]` into array of `StablePtr's`. After calling it i need to determine which constructor have been used to construct each element.

It could be solved this way

    foreign export ccall getType :: StablePtr MyData -> IO CInt
    getType (Con1) = return 1
    getType (Con2) = return 2
    ...

but then i would need to manually define these constants in C header. This is error-prone, so i wonder if there is a way to make GHC do this job for me.",haskell,ffi,,,,,open,0,142,8,"How to determine data's constructor from foreign code? In my Haskell program i have an ADT with many constructors:

    data MyData = Con1 |
        Con2 |
        ...
        Con20

I have an `foreign export ccall` function, which wraps `[MyData]` into array of `StablePtr's`. After calling it i need to determine which constructor have been used to construct each element.

It could be solved this way

    foreign export ccall getType :: StablePtr MyData -> IO CInt
    getType (Con1) = return 1
    getType (Con2) = return 2
    ...

but then i would need to manually define these constants in C header. This is error-prone, so i wonder if there is a way to make GHC do this job for me.",2
11200638,06/26/2012 04:06:15,74865,03/06/2009 20:16:16,2445,82,How to host haskell app on amazon web services?,"How can I host, say a Snap webapp, on amazon?
In other words, what are the first steps I need to take - as I am completely clueless.

Any tips appreciated!",haskell,amazon-web-services,,,,06/27/2012 12:17:58,off topic,1,29,9,"How to host haskell app on amazon web services? How can I host, say a Snap webapp, on amazon?
In other words, what are the first steps I need to take - as I am completely clueless.

Any tips appreciated!",2
6280585,06/08/2011 14:40:12,751960,05/13/2011 07:45:02,282,0,need to know what <*> <$> and . do in haskell,"hi guys can someone explain me as a haskell noob what the the operators:

    (.) :: (b -> c) -> (a -> b) -> a -> c
    (<$>) :: Functor f => (a -> b) -> f a -> f b
    (<*>) :: Applicative f => f (a -> b) -> f a -> f b
do? i dont have any idea when i see the signatures, perhabs some example with a simple and easy to understand explanation will help me.",haskell,,,,,,open,0,89,11,"need to know what <*> <$> and . do in haskell hi guys can someone explain me as a haskell noob what the the operators:

    (.) :: (b -> c) -> (a -> b) -> a -> c
    (<$>) :: Functor f => (a -> b) -> f a -> f b
    (<*>) :: Applicative f => f (a -> b) -> f a -> f b
do? i dont have any idea when i see the signatures, perhabs some example with a simple and easy to understand explanation will help me.",1
4881422,02/03/2011 00:07:19,462302,09/29/2010 22:24:06,66,4,With ghc is there a way to import symbols that are not explicitly exported?,"I'm going to guess the answer is 'no', but is there a way to import a symbol from a module that is not explicitly export from said module?

I tried looking up various ghc (6.12.1) flags like [-XPackageImports][1], but I don't see anything that will do what I want? (which is purely for doing some quick & dirty testing without re-compiling some other modules; i don't actually want to write code this way)


  [1]: http://www.haskell.org/ghc/docs/6.12.2/html/users_guide/flag-reference.html#id598783",haskell,module,import,export,ghc,,open,0,75,14,"With ghc is there a way to import symbols that are not explicitly exported? I'm going to guess the answer is 'no', but is there a way to import a symbol from a module that is not explicitly export from said module?

I tried looking up various ghc (6.12.1) flags like [-XPackageImports][1], but I don't see anything that will do what I want? (which is purely for doing some quick & dirty testing without re-compiling some other modules; i don't actually want to write code this way)


  [1]: http://www.haskell.org/ghc/docs/6.12.2/html/users_guide/flag-reference.html#id598783",5
6536092,06/30/2011 14:09:56,371753,06/20/2010 23:43:58,9797,214,How do I disable dependency checking with a local cabal install?,"So I'm trying to install a package with a big messy dependency set (gitit, in this case). A direct `cabal install` from hackage forces rebuilds of plenty of libraries I don't want to rebuild (having to do with constraints on `text`, constraints on `network`, constraints on `parsec`, etc.) I did the right thing, ran `cabal unpack gitit`, manually edited the .cabal file, and successfully put it through a `cabal configure`, `cabal build` cycle. So far, so good.

Now, I want to run a `cabal install`. In the good old days (last year), this would just install the already built binaries and files where they belong. However, now, running `cabal install` runs the dependency checker, which decides that all the packages that I'm building with don't use the same `parsec`, etc., and tries to reinstall them *anyway*! Even though I just ran a perfectly fine `cabal build`. What's the magic flag to turn this off and get the old, not-clever, and perfectly acceptable behavior?",haskell,cabal,,,,,open,0,162,11,"How do I disable dependency checking with a local cabal install? So I'm trying to install a package with a big messy dependency set (gitit, in this case). A direct `cabal install` from hackage forces rebuilds of plenty of libraries I don't want to rebuild (having to do with constraints on `text`, constraints on `network`, constraints on `parsec`, etc.) I did the right thing, ran `cabal unpack gitit`, manually edited the .cabal file, and successfully put it through a `cabal configure`, `cabal build` cycle. So far, so good.

Now, I want to run a `cabal install`. In the good old days (last year), this would just install the already built binaries and files where they belong. However, now, running `cabal install` runs the dependency checker, which decides that all the packages that I'm building with don't use the same `parsec`, etc., and tries to reinstall them *anyway*! Even though I just ran a perfectly fine `cabal build`. What's the magic flag to turn this off and get the old, not-clever, and perfectly acceptable behavior?",2
2586287,04/06/2010 16:00:12,86949,04/03/2009 22:50:41,70,1,Good functions and techniques for dealing with haskell tuples?,"I've been doing a lot of work with tuples and lists of tuples recently and I've been wondering if I'm being sensible.

Things feel awkward and clunky which for me signals that I'm doing something wrong.

For example I've written three convenience functions for getting the first, second and third value in a tuple of 3 values.

Is there a better way I'm missing?

Are there more general functions that allow you to compose and manipulate tuple data?

Here are some things I am trying to do that feel should be generalisable.

Extracting values:
Do I need to create a version of fst,snd,etc... for tuples of size two, three, four and five, etc...?

    fst3(x,_,_) = x
    fst4(x,_,_,_) = x

Manipulating values:
Can you increment the last value in a list of pairs and then use that same function to increment the last value in a list of triples?

Zipping and Unzipping values:
There is a zip and a zip3. Do I also need a zip4? or is there some way of creating a general zip function?

Sorry if this seems subjective, I honestly don't know if this is even possible or if I'm wasting my time writing 3 extra functions every time I need a general solution.

Thank you for any help you can give!",haskell,,,,,,open,0,208,9,"Good functions and techniques for dealing with haskell tuples? I've been doing a lot of work with tuples and lists of tuples recently and I've been wondering if I'm being sensible.

Things feel awkward and clunky which for me signals that I'm doing something wrong.

For example I've written three convenience functions for getting the first, second and third value in a tuple of 3 values.

Is there a better way I'm missing?

Are there more general functions that allow you to compose and manipulate tuple data?

Here are some things I am trying to do that feel should be generalisable.

Extracting values:
Do I need to create a version of fst,snd,etc... for tuples of size two, three, four and five, etc...?

    fst3(x,_,_) = x
    fst4(x,_,_,_) = x

Manipulating values:
Can you increment the last value in a list of pairs and then use that same function to increment the last value in a list of triples?

Zipping and Unzipping values:
There is a zip and a zip3. Do I also need a zip4? or is there some way of creating a general zip function?

Sorry if this seems subjective, I honestly don't know if this is even possible or if I'm wasting my time writing 3 extra functions every time I need a general solution.

Thank you for any help you can give!",1
9188799,02/08/2012 06:34:44,1193915,02/07/2012 05:44:30,1,0,Higher order functions in haskell Error2,"can you please tell me how to fix this error in my code?

    {--------------------- BINARY TO DECIMAL MENU ---------------}
    
    functionBinToDecimal:: IO()
    functionBinToDecimal= do 
    	putStrLn(""\n\tConvert Binary To Decimal\n"")
    	putStrLn(""----------------------------------------------------------\n"")
    	putStrLn(""\t\tEnter a binary number : "") 
    	input<-getLine
    	let n=(read (reverse input))::String
    	let result = convertionFrom binaryToDec n
    	putStrLn(show result)
    	
    {----------------BINARY TO DECIMAL---------------------}
    
    binaryToDec :: String -> Int
    binaryToDec = foldr (\x s -> s * 2 + x) 0 . reverse . map charToInt 
        where charToInt x = if x == '0' then 0 else 1
    
    convertionFrom :: (String -> Int) -> String -> Int
    convertionFrom _ [] = 0
    convertionFrom f (x:xs) = f x ++ convertionFrom f xs

Error

> test.hs:28:27:
>     Couldn't match expected type `Int' with actual type `[a0]'
>     In the expression: f x ++ convertionFrom f xs
>     In an equation for `convertionFrom':
>         convertionFrom f (x : xs) = f x ++ convertionFrom f xs",haskell,,,,,04/26/2012 12:31:19,too localized,1,238,6,"Higher order functions in haskell Error2 can you please tell me how to fix this error in my code?

    {--------------------- BINARY TO DECIMAL MENU ---------------}
    
    functionBinToDecimal:: IO()
    functionBinToDecimal= do 
    	putStrLn(""\n\tConvert Binary To Decimal\n"")
    	putStrLn(""----------------------------------------------------------\n"")
    	putStrLn(""\t\tEnter a binary number : "") 
    	input<-getLine
    	let n=(read (reverse input))::String
    	let result = convertionFrom binaryToDec n
    	putStrLn(show result)
    	
    {----------------BINARY TO DECIMAL---------------------}
    
    binaryToDec :: String -> Int
    binaryToDec = foldr (\x s -> s * 2 + x) 0 . reverse . map charToInt 
        where charToInt x = if x == '0' then 0 else 1
    
    convertionFrom :: (String -> Int) -> String -> Int
    convertionFrom _ [] = 0
    convertionFrom f (x:xs) = f x ++ convertionFrom f xs

Error

> test.hs:28:27:
>     Couldn't match expected type `Int' with actual type `[a0]'
>     In the expression: f x ++ convertionFrom f xs
>     In an equation for `convertionFrom':
>         convertionFrom f (x : xs) = f x ++ convertionFrom f xs",1
5388894,03/22/2011 09:07:22,670882,03/22/2011 09:07:22,1,0,runhaskell error on ghc7.02,"I created a yesod application on ghc7.0.2.

when i use the command ”runhaskell devel-server.hs“ to run the app, errors Occurred：

GHCi runtime linker: fatal error: I found a duplicate definition for symbol
   ghczm7zi0zi2_AsmCodeGen_zdfMonadCmmOptM2_closure
whilst processing object file
   /usr/local/lib/ghc-7.0.2/ghc-7.0.2/libHSghc-7.0.2.a
This could be caused by:
   * Loading two different object files which export the same symbol
   * Specifying the same object file twice on the GHCi command line
   * An incorrect `package.conf' entry, causing some object to be
     loaded twice.
GHCi cannot safely continue in this situation.  Exiting now.  Sorry.

who can help me? thanks!",haskell,,,,,,open,0,103,4,"runhaskell error on ghc7.02 I created a yesod application on ghc7.0.2.

when i use the command ”runhaskell devel-server.hs“ to run the app, errors Occurred：

GHCi runtime linker: fatal error: I found a duplicate definition for symbol
   ghczm7zi0zi2_AsmCodeGen_zdfMonadCmmOptM2_closure
whilst processing object file
   /usr/local/lib/ghc-7.0.2/ghc-7.0.2/libHSghc-7.0.2.a
This could be caused by:
   * Loading two different object files which export the same symbol
   * Specifying the same object file twice on the GHCi command line
   * An incorrect `package.conf' entry, causing some object to be
     loaded twice.
GHCi cannot safely continue in this situation.  Exiting now.  Sorry.

who can help me? thanks!",1
8272068,11/25/2011 16:50:55,1063256,11/24/2011 05:22:42,14,0,Json toHtml instance or like,"Is there some way in yesod-0.9.3 to convert Json to Html to include it into <script/> tag?

Using Yesod.Json and Data.Aeson I can get a value of Json type, which I want to use as the value of a variable introduced in a <script> tag, that is, not to return RepJson, but include it as a part of RepHtml. Now instead I need to write this value by hands.

P.S. Note to those who know what are JSON and HTML but don't know what is yesod: please don't fix the capitalization and add json and html tags. Json and JSON are not the same, and the question has very little to JSON and HTML.  Just skip the question and proceed to those where you know what all the words mean.
",haskell,yesod,,,,,open,0,129,5,"Json toHtml instance or like Is there some way in yesod-0.9.3 to convert Json to Html to include it into <script/> tag?

Using Yesod.Json and Data.Aeson I can get a value of Json type, which I want to use as the value of a variable introduced in a <script> tag, that is, not to return RepJson, but include it as a part of RepHtml. Now instead I need to write this value by hands.

P.S. Note to those who know what are JSON and HTML but don't know what is yesod: please don't fix the capitalization and add json and html tags. Json and JSON are not the same, and the question has very little to JSON and HTML.  Just skip the question and proceed to those where you know what all the words mean.
",2
2035074,01/09/2010 21:43:52,123109,06/15/2009 13:11:55,5557,188,What programming task provided your breakthrough with monads?,"In a recent blog post about a probability monad he'd written, Mark Dominus wrote, [""So I feel like I've finally arrived, monadwise.""](http://blog.plover.com/prog/haskell/probmonad.html)

[My first monadic program](http://gbacon.blogspot.com/2007/02/my-first-monadic-program.html) was an awkward solution to [Problem 32](http://projecteuler.net/index.php?section=problems&id=32) from [Project Euler](http://projecteuler.net/) using [parsec](http://book.realworldhaskell.org/read/using-parsec.html) and the [Maybe monad](http://www.haskell.org/all_about_monads/html/maybemonad.html).

What were you working on when the light finally turned on for you? Provide at least a sketch of the code you wrote. Knowing what you know now, how would you improve it and why?",haskell,monads,,,,11/08/2011 07:11:45,off topic,1,75,8,"What programming task provided your breakthrough with monads? In a recent blog post about a probability monad he'd written, Mark Dominus wrote, [""So I feel like I've finally arrived, monadwise.""](http://blog.plover.com/prog/haskell/probmonad.html)

[My first monadic program](http://gbacon.blogspot.com/2007/02/my-first-monadic-program.html) was an awkward solution to [Problem 32](http://projecteuler.net/index.php?section=problems&id=32) from [Project Euler](http://projecteuler.net/) using [parsec](http://book.realworldhaskell.org/read/using-parsec.html) and the [Maybe monad](http://www.haskell.org/all_about_monads/html/maybemonad.html).

What were you working on when the light finally turned on for you? Provide at least a sketch of the code you wrote. Knowing what you know now, how would you improve it and why?",2
10932595,06/07/2012 13:15:43,317984,04/15/2010 20:53:22,707,3,Create a wizard with wxHaskell: sample code or documentation,"I want to create a simple wizard with wxHaskell. The only documentation I could find is the haddock documentation for [wxcore][1], which is kind of sparse. Has anyone ever tried and has some code samples or knows about some documentation somewhere?


  [1]: http://wxhaskell.sourceforge.net/doc/Graphics-UI-WXCore-WxcClassesMZ.html#120",haskell,wxwidgets,wxhaskell,,,,open,0,44,9,"Create a wizard with wxHaskell: sample code or documentation I want to create a simple wizard with wxHaskell. The only documentation I could find is the haddock documentation for [wxcore][1], which is kind of sparse. Has anyone ever tried and has some code samples or knows about some documentation somewhere?


  [1]: http://wxhaskell.sourceforge.net/doc/Graphics-UI-WXCore-WxcClassesMZ.html#120",3
7674594,10/06/2011 13:02:31,480398,10/19/2010 11:25:33,1375,17,Comparision of enumerator vs. iteratee package,"Currently, there two popular choices which implement the [iteratee pattern][1]:

 * The [enumerator package](http://hackage.haskell.org/package/enumerator) and 
 * the [iteratee package](http://hackage.haskell.org/package/iteratee).

What are their relative benefits? Is one better than the other, or does it depend on the use-case (and if so, what are the criteria to decide which one to use)?

[1]: http://okmij.org/ftp/Streams.html",haskell,enumerator,iteratee,,,,open,0,51,6,"Comparision of enumerator vs. iteratee package Currently, there two popular choices which implement the [iteratee pattern][1]:

 * The [enumerator package](http://hackage.haskell.org/package/enumerator) and 
 * the [iteratee package](http://hackage.haskell.org/package/iteratee).

What are their relative benefits? Is one better than the other, or does it depend on the use-case (and if so, what are the criteria to decide which one to use)?

[1]: http://okmij.org/ftp/Streams.html",3
3328682,07/25/2010 09:32:33,401453,07/25/2010 09:32:33,1,0,Int vs Integer in class instance,"class Visible a where
	toString :: a -> String
	size 	 :: a -> Int

intToString :: (Integral t) => t -> String
intToString 0 = ""0""
intToString 1 = ""1""
intToString 2 = ""2""
intToString 3 = ""3""
intToString 4 = ""4""
intToString 5 = ""5""
intToString 6 = ""6""
intToString 7 = ""7""
intToString 8 = ""8""
intToString 9 = ""9""
intToString n 
	| ((div n 10) == 0) = (intToString (mod n 10))
	| otherwise         = (intToString (div n 10)) ++ (intToString (mod n 10))


Now 
instance Visible Int where
	toString = intToString
	size n   = length (toString n)
gives me an error about an ambiguous type variable at the prompt if I type something like (toString 55)

but

instance Visible Integer where
	toString = intToString
	size n   = length (toString n)

does not.

What gives?",haskell,,,,,,open,0,126,6,"Int vs Integer in class instance class Visible a where
	toString :: a -> String
	size 	 :: a -> Int

intToString :: (Integral t) => t -> String
intToString 0 = ""0""
intToString 1 = ""1""
intToString 2 = ""2""
intToString 3 = ""3""
intToString 4 = ""4""
intToString 5 = ""5""
intToString 6 = ""6""
intToString 7 = ""7""
intToString 8 = ""8""
intToString 9 = ""9""
intToString n 
	| ((div n 10) == 0) = (intToString (mod n 10))
	| otherwise         = (intToString (div n 10)) ++ (intToString (mod n 10))


Now 
instance Visible Int where
	toString = intToString
	size n   = length (toString n)
gives me an error about an ambiguous type variable at the prompt if I type something like (toString 55)

but

instance Visible Integer where
	toString = intToString
	size n   = length (toString n)

does not.

What gives?",1
3870088,10/06/2010 06:55:24,259130,01/26/2010 10:08:00,299,78,"A monad is just a monoid in the category of endofunctors, what's the problem?","Who first said 

> A monad is just a monoid in the
> category of endofunctors, what's the
> problem?

and on a less important note is this true and if so could you give an explanation(hopefully one that can be understood by someone who doesn't have much haskell experience).",haskell,quotes,monads,category-theory,monoids,10/20/2011 10:32:22,off topic,1,47,14,"A monad is just a monoid in the category of endofunctors, what's the problem? Who first said 

> A monad is just a monoid in the
> category of endofunctors, what's the
> problem?

and on a less important note is this true and if so could you give an explanation(hopefully one that can be understood by someone who doesn't have much haskell experience).",5
4743005,01/20/2011 02:47:35,580981,01/19/2011 05:52:11,20,0,"Higher Order Function (uncurry,curry)","    enter code here

     uncurry cplus=\(a,b)->cplus a b  
     (cplus a b=a+b   ucplus(a,b)=a+b)

**strong text** As we know,(a,b) is the parameter of the function cplus, so the right side of equation is actually doing the function cplus a b. So why uncurry cplus equal to the right side of the equation?",haskell,,,,,,open,0,64,4,"Higher Order Function (uncurry,curry)     enter code here

     uncurry cplus=\(a,b)->cplus a b  
     (cplus a b=a+b   ucplus(a,b)=a+b)

**strong text** As we know,(a,b) is the parameter of the function cplus, so the right side of equation is actually doing the function cplus a b. So why uncurry cplus equal to the right side of the equation?",1
5277633,03/11/2011 19:51:25,315734,04/13/2010 17:16:49,245,3,How to throttle a producer in a producer/consumer situation on a TChan in Haskell?,"We have something dumping values on a TChan, and then a consumer processing those. But the consumer can't keep up, so we're getting lots of memory usage as the producer is dumping lots of stuff on the channel, but consumer isn't keeping up. Is there a straightforward way to have the producer block if the channel queue becomes a certain size or something so we can have the producer wait for the consumer to catch up?",haskell,,,,,,open,0,76,14,"How to throttle a producer in a producer/consumer situation on a TChan in Haskell? We have something dumping values on a TChan, and then a consumer processing those. But the consumer can't keep up, so we're getting lots of memory usage as the producer is dumping lots of stuff on the channel, but consumer isn't keeping up. Is there a straightforward way to have the producer block if the channel queue becomes a certain size or something so we can have the producer wait for the consumer to catch up?",1
9252488,02/12/2012 20:42:04,438830,09/03/2010 09:49:57,486,13,Haskell for someone who already knows some category theory,"So I've got enough experience with functional programming in general, and I have one nontrivial project written in Haskell already under my belt (a non-optimized Javascript compiler), and went through parts of Real World Haskell to learn Haskell during the project. So I have basic experience with Haskell and functional programming in general (I also enjoy Racket). But moreover, as of a year after I wrote the compiler I have gained some working knowledge of category theory, and in the coming years that knowledge will only increase (I'm a pure mathematics PhD student).

I'd like to know if there's a good book out there that introduces Haskell to someone who already knows category theory and programming. Essentially, I want a text that connects the dots. They always say, ""a monad is just a monoid in the category of endofunctors,"" and I actually understand what that means. I want to stay in that mindset, and be introduced to other ways that category-theoretical constructions influence Haskell and allow people to write interesting programs in Haskell.

For instance, typeclasses are a bit mysterious to me. It seems to me that a typeclass (say, Eq) is a functor from the category of types to the category of objects with morphisms defined by the defining operations of the typeclass (a -> b in this category if a == b). Does that make sense with the general idea of typeclasses in Haskell? Then a sub-type-class can be thought of as a ""sub-functor,"" or rather a natural transformation which is, in a sense, ""faithful."" But does that really make sense for a typeclass like Monad? For instance, for the State monad, what category does that correspond to? It usually happens that every time I think of some way to connect Haskell paradigms to category theory, the more complicated examples throw me off. I want a text written by someone who knows what they're talking about to either reaffirm my ideas, or correct/refine my naive nonsense.

In addition, I'm looking for results in category theory (theorems and lemmas!) that have given us insight into the programs that we didn't have before. I always hear about ""the category of types"" and how programs are morphims in that category, but what has that mindset taught us that we didn't already know?",haskell,books,category-theory,,,,open,0,378,9,"Haskell for someone who already knows some category theory So I've got enough experience with functional programming in general, and I have one nontrivial project written in Haskell already under my belt (a non-optimized Javascript compiler), and went through parts of Real World Haskell to learn Haskell during the project. So I have basic experience with Haskell and functional programming in general (I also enjoy Racket). But moreover, as of a year after I wrote the compiler I have gained some working knowledge of category theory, and in the coming years that knowledge will only increase (I'm a pure mathematics PhD student).

I'd like to know if there's a good book out there that introduces Haskell to someone who already knows category theory and programming. Essentially, I want a text that connects the dots. They always say, ""a monad is just a monoid in the category of endofunctors,"" and I actually understand what that means. I want to stay in that mindset, and be introduced to other ways that category-theoretical constructions influence Haskell and allow people to write interesting programs in Haskell.

For instance, typeclasses are a bit mysterious to me. It seems to me that a typeclass (say, Eq) is a functor from the category of types to the category of objects with morphisms defined by the defining operations of the typeclass (a -> b in this category if a == b). Does that make sense with the general idea of typeclasses in Haskell? Then a sub-type-class can be thought of as a ""sub-functor,"" or rather a natural transformation which is, in a sense, ""faithful."" But does that really make sense for a typeclass like Monad? For instance, for the State monad, what category does that correspond to? It usually happens that every time I think of some way to connect Haskell paradigms to category theory, the more complicated examples throw me off. I want a text written by someone who knows what they're talking about to either reaffirm my ideas, or correct/refine my naive nonsense.

In addition, I'm looking for results in category theory (theorems and lemmas!) that have given us insight into the programs that we didn't have before. I always hear about ""the category of types"" and how programs are morphims in that category, but what has that mindset taught us that we didn't already know?",3
5213322,03/06/2011 20:54:01,643545,03/03/2011 19:14:34,-2,0,how to combine functions??,"whats wrong with this code??

decomp :: String -> String

decomp """" = """"

decomp (x:xs) = exp(de(x:xs)

exp converts a a list (char, int) to a string 
such as a5d6 will output (a,5),(d,6)

and de converts a string into a list of (char,int)
such as (a,5),(d,6) will output aaaadddddd 

so decomp you input a5d6
aaaaadddddd
speech marks excluded etc",haskell,,,,,03/07/2011 00:58:52,not a real question,1,52,4,"how to combine functions?? whats wrong with this code??

decomp :: String -> String

decomp """" = """"

decomp (x:xs) = exp(de(x:xs)

exp converts a a list (char, int) to a string 
such as a5d6 will output (a,5),(d,6)

and de converts a string into a list of (char,int)
such as (a,5),(d,6) will output aaaadddddd 

so decomp you input a5d6
aaaaadddddd
speech marks excluded etc",1
5920200,05/07/2011 09:24:20,160673,08/21/2009 09:45:05,261,4,How to prevent common sub-expression elimination (CSE) with GHC,"Given the program:

    import Debug.Trace
    main = print $ trace ""hit"" 1 + trace ""hit"" 1

If I compile with `ghc -O` (7.0.1 or higher) I get the output:

    hit
    2

i.e. GHC has used common sub-expression elimination (CSE) to rewrite my program as:

    main = print $ let x = trace ""hit"" 1 in x + x

If I compile with `-fno-cse` then I see `hit` appearing twice.

Is it possible to avoid CSE by modifying the program? Is there any sub-expression `e` for which I can guarantee `e + e` will not be CSE'd? I know about <a href=""http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Exts.html#v:lazy"">`lazy`</a>, but can't find anything designed to inhibit CSE.

The background of this question is the <a href=""http://hackage.haskell.org/package/cmdargs"">cmdargs</a> library, where CSE breaks the library (due to impurity in the library). One solution is to ask users of the library to specify `-fno-cse`, but I'd prefer to modify the library.
",haskell,,,,,,open,0,159,9,"How to prevent common sub-expression elimination (CSE) with GHC Given the program:

    import Debug.Trace
    main = print $ trace ""hit"" 1 + trace ""hit"" 1

If I compile with `ghc -O` (7.0.1 or higher) I get the output:

    hit
    2

i.e. GHC has used common sub-expression elimination (CSE) to rewrite my program as:

    main = print $ let x = trace ""hit"" 1 in x + x

If I compile with `-fno-cse` then I see `hit` appearing twice.

Is it possible to avoid CSE by modifying the program? Is there any sub-expression `e` for which I can guarantee `e + e` will not be CSE'd? I know about <a href=""http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Exts.html#v:lazy"">`lazy`</a>, but can't find anything designed to inhibit CSE.

The background of this question is the <a href=""http://hackage.haskell.org/package/cmdargs"">cmdargs</a> library, where CSE breaks the library (due to impurity in the library). One solution is to ask users of the library to specify `-fno-cse`, but I'd prefer to modify the library.
",1
8370981,12/03/2011 21:00:13,1065942,11/25/2011 16:07:10,48,0,Will whole Haskell be a part of Curry?,"I found Curry from Wikipedia. It says Curry is nearly a superset but not because of lacking of something.

I'd like to see it support whole Haskell. Did they plan to implement Haskell as a part of Curry?

",haskell,logic-programming,curry,,,12/06/2011 02:48:29,not constructive,1,37,8,"Will whole Haskell be a part of Curry? I found Curry from Wikipedia. It says Curry is nearly a superset but not because of lacking of something.

I'd like to see it support whole Haskell. Did they plan to implement Haskell as a part of Curry?

",3
10414861,05/02/2012 13:34:11,1353742,04/24/2012 12:59:56,13,0,Removing every instance of the empty list from a list of lists - Haskell,"I'm new to Haskell and am just trying to write a simple list comprehension to remove every instance of the empty list from a list of lists, i.e entering this..

    > remove [""abfwfw"", ""wfgwg"", """", ""dfw""] 

will result in this output...

    > [""abfwfw"", ""wfgwg"", ""dfw""] 

thanks in advance :) ",haskell,,,,,,open,0,56,14,"Removing every instance of the empty list from a list of lists - Haskell I'm new to Haskell and am just trying to write a simple list comprehension to remove every instance of the empty list from a list of lists, i.e entering this..

    > remove [""abfwfw"", ""wfgwg"", """", ""dfw""] 

will result in this output...

    > [""abfwfw"", ""wfgwg"", ""dfw""] 

thanks in advance :) ",1
9791185,03/20/2012 16:45:20,795304,06/13/2011 02:22:31,1,0,Sokoban in Haskell?,"I don't know if this is a proper question, but if I want to write a Sokoban game in Haskell (or other functional programming languages), what's the differences with writing it in C?

I would like to ask this question because of two reasons. First, my only interest in programming is to write Sokoban programs (I have already written several sokoban programs). Second, I've read some introduction/tutorial articles about Haskell, but have no idea how these new methods can be applied to the Sokoban logic.",haskell,functional-programming,,,,03/20/2012 17:55:31,not a real question,1,84,3,"Sokoban in Haskell? I don't know if this is a proper question, but if I want to write a Sokoban game in Haskell (or other functional programming languages), what's the differences with writing it in C?

I would like to ask this question because of two reasons. First, my only interest in programming is to write Sokoban programs (I have already written several sokoban programs). Second, I've read some introduction/tutorial articles about Haskell, but have no idea how these new methods can be applied to the Sokoban logic.",2
1607843,10/22/2009 15:00:29,164711,08/28/2009 07:59:34,1,3,Explanations about the mechanics of a simple factorial function,"I'm new to Haskell, so i'm both naive and curious.

There is a definition of a factorial function :

    factorial n = product [1..n]

I naively understand this as : make the product of every number between 1 and  n. So, why

    factorial 0

returns 1 (which is the good result as far as my maths are not too rusted) ?

Thank you",haskell,,,,,,open,0,66,9,"Explanations about the mechanics of a simple factorial function I'm new to Haskell, so i'm both naive and curious.

There is a definition of a factorial function :

    factorial n = product [1..n]

I naively understand this as : make the product of every number between 1 and  n. So, why

    factorial 0

returns 1 (which is the good result as far as my maths are not too rusted) ?

Thank you",1
4659012,01/11/2011 15:04:59,393783,07/16/2010 11:28:50,1196,92,How do you get 100% code coverage with guards in Haskell?,"I'm trying to get (and prove) 100% test coverage for some code I'm writing in Haskell using HPC. However if I write something like this:

    fac n | n > 0 = n * (fac (n - 1))
          | otherwise = 1

Then the second expression of the guard statement has always True tagged to it. What is the easiest way to overcome this in the general case?",haskell,code-coverage,,,,,open,0,79,11,"How do you get 100% code coverage with guards in Haskell? I'm trying to get (and prove) 100% test coverage for some code I'm writing in Haskell using HPC. However if I write something like this:

    fac n | n > 0 = n * (fac (n - 1))
          | otherwise = 1

Then the second expression of the guard statement has always True tagged to it. What is the easiest way to overcome this in the general case?",2
9808637,03/21/2012 16:18:31,83602,03/27/2009 11:54:34,63,1,A Simple Haskell Program,"I am a novice on Haskell (and for that matter functional programming) and need some quick help. 

Can someone help me with a program which takes a number as input on first line and then that many times takes two numbers each time (on further lines) and prints the numbers (ECHOes them). 

I am unable to understand the command line processing and outputting. Confused!!! 

Thanks 
Manoj ",haskell,,,,,03/22/2012 09:56:45,not a real question,1,67,4,"A Simple Haskell Program I am a novice on Haskell (and for that matter functional programming) and need some quick help. 

Can someone help me with a program which takes a number as input on first line and then that many times takes two numbers each time (on further lines) and prints the numbers (ECHOes them). 

I am unable to understand the command line processing and outputting. Confused!!! 

Thanks 
Manoj ",1
9121277,02/02/2012 22:56:39,1186320,02/02/2012 22:44:14,1,0,A very basic Haskell query,"I've rather wondered into the world of Haskell with no prior background of anything to do with this. Reason being that I'm come across a puzzle that I'm trying to solve that seems to be based around haskell code. I believe that what I'm after is an integer.

What I'm trying to do is the following

    let a = \x -> x (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> y (y z)) (\x -> y (y (y (y (y (y (y x))))))) z) (\x -> y (y (y (y (y (y (y (y (y x))))))))) z) y (y z)) (\x -> y (y (y (y x)))) z) y (y z)) (\x -> y (y (y (y x)))) z) (\x -> y (y (y (y (y x))))) z) y (y z)) (\x -> y (y (y (y (y (y (y (y x)))))))) z) (\x -> y (y (y (y (y (y (y (y x)))))))) z) (\x -> y (y (y (y (y (y (y (y x)))))))) z) (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> y (y z)) (\x -> y (y (y (y (y (y (y (y (y x))))))))) z) y (y z)) (\x -> y (y (y (y (y x))))) z) (\x -> y (y (y (y (y (y x)))))) z) y (y z)) (\x -> y (y x)) z) (\x -> y (y (y (y (y (y x)))))) z)

    a (1+) 0

This returns the following error message

    <interactive>:1:4:
    No instance for (Num
                       (((t20 -> t20) -> t20 -> t20) -> (t20 -> t20) -> t20 -> t20))
      arising from the literal `1'
    Possible fix:
      add an instance declaration for
      (Num (((t20 -> t20) -> t20 -> t20) -> (t20 -> t20) -> t20 -> t20))
    In the first argument of `(+)', namely `1'
    In the first argument of `a', namely `(1 +)'
    In the expression: a (1 +) 0

    <interactive>:1:8:
    No instance for (Num (t20 -> t20))
      arising from the literal `0'
    Possible fix: add an instance declaration for (Num (t20 -> t20))
    In the second argument of `a', namely `0'
    In the expression: a (1 +) 0
    In an equation for `it': it = a (1 +) 0

Simple question - what do I need to do to make this work?

Please bear in mind that I have very little idea about this at the moment. I would massively appreciate any help that anybody could give me!",haskell,,,,,,open,0,526,5,"A very basic Haskell query I've rather wondered into the world of Haskell with no prior background of anything to do with this. Reason being that I'm come across a puzzle that I'm trying to solve that seems to be based around haskell code. I believe that what I'm after is an integer.

What I'm trying to do is the following

    let a = \x -> x (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> y (y z)) (\x -> y (y (y (y (y (y (y x))))))) z) (\x -> y (y (y (y (y (y (y (y (y x))))))))) z) y (y z)) (\x -> y (y (y (y x)))) z) y (y z)) (\x -> y (y (y (y x)))) z) (\x -> y (y (y (y (y x))))) z) y (y z)) (\x -> y (y (y (y (y (y (y (y x)))))))) z) (\x -> y (y (y (y (y (y (y (y x)))))))) z) (\x -> y (y (y (y (y (y (y (y x)))))))) z) (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> (\y z -> y (y z)) (\x -> y (y (y (y (y (y (y (y (y x))))))))) z) y (y z)) (\x -> y (y (y (y (y x))))) z) (\x -> y (y (y (y (y (y x)))))) z) y (y z)) (\x -> y (y x)) z) (\x -> y (y (y (y (y (y x)))))) z)

    a (1+) 0

This returns the following error message

    <interactive>:1:4:
    No instance for (Num
                       (((t20 -> t20) -> t20 -> t20) -> (t20 -> t20) -> t20 -> t20))
      arising from the literal `1'
    Possible fix:
      add an instance declaration for
      (Num (((t20 -> t20) -> t20 -> t20) -> (t20 -> t20) -> t20 -> t20))
    In the first argument of `(+)', namely `1'
    In the first argument of `a', namely `(1 +)'
    In the expression: a (1 +) 0

    <interactive>:1:8:
    No instance for (Num (t20 -> t20))
      arising from the literal `0'
    Possible fix: add an instance declaration for (Num (t20 -> t20))
    In the second argument of `a', namely `0'
    In the expression: a (1 +) 0
    In an equation for `it': it = a (1 +) 0

Simple question - what do I need to do to make this work?

Please bear in mind that I have very little idea about this at the moment. I would massively appreciate any help that anybody could give me!",1
8766953,01/07/2012 02:52:28,239916,12/29/2009 01:52:35,2998,123,Overlapping instances to flatten tuples,"I'm trying to write code to remove empty tuples from a tuple chain, but I can't get it to work.

Code:

    {-# LANGUAGE FlexibleInstances #-}
    {-# LANGUAGE FunctionalDependencies #-}
    {-# LANGUAGE MultiParamTypeClasses #-}
    {-# LANGUAGE OverlappingInstances #-}
    {-# LANGUAGE UndecidableInstances #-}
    
    class Flatten a b | a -> b where
      flatten :: a -> b
    
    instance Flatten a a where
      flatten x = x
    
    instance Flatten a b => Flatten ((), a) b where
      flatten (_, rest) = flatten rest
    
    instance Flatten (a, ()) a where
      flatten (x, _) = x

    instance Flatten ((), ()) a where
      flatten _ = ()

    instance Flatten b c => Flatten (a, b) (a, c) where
      flatten (x, rest) = (x, flatten rest)

Goal:

    flatten (0, ((), (1, (2, (3, ((), ((), 4))))))) == (0, (1, (2, (3, 4))))
    flatten (0, ()) = 0",haskell,functional-dependencies,,,,,open,0,223,5,"Overlapping instances to flatten tuples I'm trying to write code to remove empty tuples from a tuple chain, but I can't get it to work.

Code:

    {-# LANGUAGE FlexibleInstances #-}
    {-# LANGUAGE FunctionalDependencies #-}
    {-# LANGUAGE MultiParamTypeClasses #-}
    {-# LANGUAGE OverlappingInstances #-}
    {-# LANGUAGE UndecidableInstances #-}
    
    class Flatten a b | a -> b where
      flatten :: a -> b
    
    instance Flatten a a where
      flatten x = x
    
    instance Flatten a b => Flatten ((), a) b where
      flatten (_, rest) = flatten rest
    
    instance Flatten (a, ()) a where
      flatten (x, _) = x

    instance Flatten ((), ()) a where
      flatten _ = ()

    instance Flatten b c => Flatten (a, b) (a, c) where
      flatten (x, rest) = (x, flatten rest)

Goal:

    flatten (0, ((), (1, (2, (3, ((), ((), 4))))))) == (0, (1, (2, (3, 4))))
    flatten (0, ()) = 0",2
11697353,07/28/2012 01:00:53,172754,09/13/2009 14:02:55,151,3,haskell Couldn't match expected type `Maybe Text' with actual type `Text',"full code https://github.com/gertcuykens/haskell-design

How can i lift Maybe from Maybe Text type

    application :: MVar ServerState -> WS.Request -> WS.WebSockets WS.Hybi10 ()
    application state rq = do
        WS.acceptRequest rq
        WS.getVersion >>= liftIO . putStrLn . (""Client version: "" ++)
        sink <- WS.getSink
        msg <- WS.receiveData
        clients <- liftIO $ readMVar state
        url <- liftIO fbUrl
    
        let prefix = ""Facebook code""
        let code = T.drop (T.length prefix) msg
        
        let a = (""code"",T.unpack code)
        e <- liftIO $ fbEmail $ (\(x,y) -> (C.pack x, C.pack y)) a
        
        let client = (e, sink) --ERROR
        
        case msg of
            _   | not (prefix `T.isPrefixOf` msg) -> do
                    WS.sendTextData (""Facebook login "" `mappend` url :: Text)
                | any ($ fst client)
                    [T.null, T.any isPunctuation, T.any isSpace] ->
                        WS.sendTextData (""Facbook code invalid"" :: Text)
                | clientExists client clients ->
                    WS.sendTextData (""User already exists"" :: Text)
                | otherwise -> do
                    liftIO $ modifyMVar_ state $ \s -> do
                        let s' = addClient client s
                        WS.sendSink sink $ WS.textData $
                            ""Welcome! Users: "" `mappend`
                            T.intercalate "", "" (map fst s)
                        broadcast (fst client `mappend` "" joined"") s'
                        return s'
                    talk state client
    
        Couldn't match expected type `Maybe Text' with actual type `Text'
        Expected type: Maybe Text -> Bool
          Actual type: Text -> Bool
        In the expression: T.null
        In the second argument of `any', namely
          `[T.null, T.any isPunctuation, T.any isSpace]'
",haskell,,,,,07/30/2012 02:36:33,not a real question,1,709,11,"haskell Couldn't match expected type `Maybe Text' with actual type `Text' full code https://github.com/gertcuykens/haskell-design

How can i lift Maybe from Maybe Text type

    application :: MVar ServerState -> WS.Request -> WS.WebSockets WS.Hybi10 ()
    application state rq = do
        WS.acceptRequest rq
        WS.getVersion >>= liftIO . putStrLn . (""Client version: "" ++)
        sink <- WS.getSink
        msg <- WS.receiveData
        clients <- liftIO $ readMVar state
        url <- liftIO fbUrl
    
        let prefix = ""Facebook code""
        let code = T.drop (T.length prefix) msg
        
        let a = (""code"",T.unpack code)
        e <- liftIO $ fbEmail $ (\(x,y) -> (C.pack x, C.pack y)) a
        
        let client = (e, sink) --ERROR
        
        case msg of
            _   | not (prefix `T.isPrefixOf` msg) -> do
                    WS.sendTextData (""Facebook login "" `mappend` url :: Text)
                | any ($ fst client)
                    [T.null, T.any isPunctuation, T.any isSpace] ->
                        WS.sendTextData (""Facbook code invalid"" :: Text)
                | clientExists client clients ->
                    WS.sendTextData (""User already exists"" :: Text)
                | otherwise -> do
                    liftIO $ modifyMVar_ state $ \s -> do
                        let s' = addClient client s
                        WS.sendSink sink $ WS.textData $
                            ""Welcome! Users: "" `mappend`
                            T.intercalate "", "" (map fst s)
                        broadcast (fst client `mappend` "" joined"") s'
                        return s'
                    talk state client
    
        Couldn't match expected type `Maybe Text' with actual type `Text'
        Expected type: Maybe Text -> Bool
          Actual type: Text -> Bool
        In the expression: T.null
        In the second argument of `any', namely
          `[T.null, T.any isPunctuation, T.any isSpace]'
",1
3398861,08/03/2010 17:03:37,175097,09/17/2009 17:23:24,871,40,"Have J style adverbs, forks etc been emulated via libraries in mainstream functional languages?","Has an emulation of J style of super condensed tacit programming via verbs, adverbs, forks, etc., ever been attempted via libraries for mainstream functional languages?

If so, how successful was the result?

If not, is there a technical issue that makes this impossible, or is it just not worth doing?

I'm particularly interested in constructs like forks that don't appear to correspond directly to basic concepts in functional programming.",haskell,f#,functional-programming,lisp,j,,open,0,66,14,"Have J style adverbs, forks etc been emulated via libraries in mainstream functional languages? Has an emulation of J style of super condensed tacit programming via verbs, adverbs, forks, etc., ever been attempted via libraries for mainstream functional languages?

If so, how successful was the result?

If not, is there a technical issue that makes this impossible, or is it just not worth doing?

I'm particularly interested in constructs like forks that don't appear to correspond directly to basic concepts in functional programming.",5
8156038,11/16/2011 17:32:50,1001528,10/18/2011 15:56:06,11,0,"Create My own language with ""Functional Programming Language""","Prefer,`Haskell`.

I already know ""how to create my own language with Procedural Language"" (example,C,Java,Python etc).

But,I know `How to create my own language with Functional Language(example --Haskell,Clojure,and Scala)`.

I already read:

**Internet Resource**

1. [Write Yourself a Scheme in 48 Hours][1]
2. [Real World Haskell - Chapter 16.Using Persec][2]
3. [Writing A Lisp Interpreter In Haskell][3]
4. [Parsec, a fast combinator parser][4]
5. [Implementing functional languages: a tutorial][5]

**Book**

1. [Introduction Functional Programming Using Haskell 2nd Edition -- Haskell][6]

**StackOverFrow(but, with procedural language)**

1. [Learning to write a compiler][7]
2. [create my own programming language][8]

**Source**

1. [Libraries and tools/HJS -- Haskell][9]

Is there another good source? 

  [1]: http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours
  [2]: http://book.realworldhaskell.org/read/using-parsec.html
  [3]: http://www.defmacro.org/ramblings/lisp-in-haskell.html
  [4]: http://legacy.cs.uu.nl/daan/download/parsec/parsec.html
  [5]: http://research.microsoft.com/en-us/um/people/simonpj/papers/pj-lester-book/
  [6]: http://www.amazon.co.jp/Introduction-Functional-Programming-Prentice-Computer/dp/0134843460
  [7]: http://stackoverflow.com/questions/1669/learning-to-write-a-compiler
  [8]: http://stackoverflow.com/questions/3662410/create-my-own-programming-language
  [9]: http://www.haskell.org/haskellwiki/Libraries_and_tools/HJS",haskell,,,,,11/17/2011 16:39:03,not constructive,1,118,8,"Create My own language with ""Functional Programming Language"" Prefer,`Haskell`.

I already know ""how to create my own language with Procedural Language"" (example,C,Java,Python etc).

But,I know `How to create my own language with Functional Language(example --Haskell,Clojure,and Scala)`.

I already read:

**Internet Resource**

1. [Write Yourself a Scheme in 48 Hours][1]
2. [Real World Haskell - Chapter 16.Using Persec][2]
3. [Writing A Lisp Interpreter In Haskell][3]
4. [Parsec, a fast combinator parser][4]
5. [Implementing functional languages: a tutorial][5]

**Book**

1. [Introduction Functional Programming Using Haskell 2nd Edition -- Haskell][6]

**StackOverFrow(but, with procedural language)**

1. [Learning to write a compiler][7]
2. [create my own programming language][8]

**Source**

1. [Libraries and tools/HJS -- Haskell][9]

Is there another good source? 

  [1]: http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours
  [2]: http://book.realworldhaskell.org/read/using-parsec.html
  [3]: http://www.defmacro.org/ramblings/lisp-in-haskell.html
  [4]: http://legacy.cs.uu.nl/daan/download/parsec/parsec.html
  [5]: http://research.microsoft.com/en-us/um/people/simonpj/papers/pj-lester-book/
  [6]: http://www.amazon.co.jp/Introduction-Functional-Programming-Prentice-Computer/dp/0134843460
  [7]: http://stackoverflow.com/questions/1669/learning-to-write-a-compiler
  [8]: http://stackoverflow.com/questions/3662410/create-my-own-programming-language
  [9]: http://www.haskell.org/haskellwiki/Libraries_and_tools/HJS",1
11592962,07/21/2012 14:21:39,471436,10/10/2010 09:09:48,1845,23,Yampa Particle Field,"I want to have a particle field in Yampa. The single particle should just move in a straight line, but depending on an angle given. That angle and movement speed changes depending on the player's speed and angle. I don't know how better to explain, I'm developing something similar to [this game](http://www.indiedb.com/games/startrade).

Anyway, my code for now looks like this:

    star :: (Float, Float) -> SF (Float, Float) (Float, Float)
    star p0 = proc (vel, a) -> do
        rec
            v <- integral -< vel *^ (cos a, sin a)
            p <- clampS ^<< (p0 ^+^) ^<< integral -< v ^+^ p
        returnA -< p

    clampS s@(x, y) | x > 1 = (x-2, y)
                    | x < (-1) = (x+2, y)
                    | y > 1 = (x, y-2)
                    | y < (-1) = (x, y+2)
                    | otherwise = s

`vel` is the current speed, `a` is the current angle. But the particles move in, well, strange ways. (Full code [here](https://github.com/scan/freetrade.hs)

Unfortunately, I am sure I am thinking in a wrong way, but I have not yet been able to figure out how to do that, especially how using `integral` correctly.

Maybe someone can give me some hints.",haskell,particle-system,yampa,,,,open,0,314,3,"Yampa Particle Field I want to have a particle field in Yampa. The single particle should just move in a straight line, but depending on an angle given. That angle and movement speed changes depending on the player's speed and angle. I don't know how better to explain, I'm developing something similar to [this game](http://www.indiedb.com/games/startrade).

Anyway, my code for now looks like this:

    star :: (Float, Float) -> SF (Float, Float) (Float, Float)
    star p0 = proc (vel, a) -> do
        rec
            v <- integral -< vel *^ (cos a, sin a)
            p <- clampS ^<< (p0 ^+^) ^<< integral -< v ^+^ p
        returnA -< p

    clampS s@(x, y) | x > 1 = (x-2, y)
                    | x < (-1) = (x+2, y)
                    | y > 1 = (x, y-2)
                    | y < (-1) = (x, y+2)
                    | otherwise = s

`vel` is the current speed, `a` is the current angle. But the particles move in, well, strange ways. (Full code [here](https://github.com/scan/freetrade.hs)

Unfortunately, I am sure I am thinking in a wrong way, but I have not yet been able to figure out how to do that, especially how using `integral` correctly.

Maybe someone can give me some hints.",3
6651301,07/11/2011 14:03:03,786580,06/06/2011 21:49:28,106,8,"Simple interpreter written in Haskell, saves out print output until the end, instead of when it comes accross a print statement","
Below is my attempt at a very simple interpretter which is translated from the Java version of the program described in Chapter 1 of ""modern compiler implementation in Java"" by Andrew w. Appel, and operates directly upon a tree which represents the language.

Basically, my problem is that it saves up all the output until the end before anything at all is printed. I'm really just looking for advice on how to restructure it so that the ""print"" statements are printed as they are interpretted.


    module Interpretter where

    --------------------------------------------------------------------

    type Id			=	[Char]
    type Output		=	[Char]
    type Value		=	Int
    type Table		=	[(Id, Value)]

    data Stm		=	CompoundStm Stm Stm |
    					AssignStm Id Exp |
    					PrintStm ExpList deriving Show

    data Exp		=	IdExp Id |
    					NumExp Value |
    					OpExp Exp Op Exp |
    					EseqExp Stm Exp deriving Show

    data ExpList	=	PairExpList Exp ExpList |
    					LastExpList Exp deriving Show

    data Op			=	Plus | Minus | Times | Div deriving Show

    --------------------------------------------------------------------

    example	::	Stm
    example	=	CompoundStm (AssignStm ""a"" (OpExp (NumExp 5) Plus (NumExp 3))) 
    			(CompoundStm (AssignStm ""b"" (EseqExp (PrintStm (PairExpList (IdExp ""a"")
    			 (LastExpList (OpExp (IdExp ""a"") Minus (NumExp 1))))) (OpExp (NumExp 10) Times
    			  (IdExp ""a"")))) (PrintStm (LastExpList (IdExp ""b""))))

    --------------------------------------------------------------------

    tableUpdate								::	Table -> Id -> Value -> Table
    tableUpdate t i v						=	(i,v):t

    tableLookup								::	Table -> Id -> Value
    tableLookup ((x,v):t) i	| x == i		=	v
    tableLookup ((x,v):t) i	| x /= i		=	tableLookup t i

    --------------------------------------------------------------------

    execute									::	Stm -> IO()
    execute s								=	putStr ((\(o,_)->o) (interpStm s ("""",[])))

    interpStm								::	Stm -> (Output, Table) -> (Output, Table)
    interpStm (CompoundStm l r) ot			=	interpStm r (interpStm l ot)
    interpStm (PrintStm el) (o,t)			=	(interpExpList el o t)
    interpStm (AssignStm i e) (o,t)			=	f i (interpExp e (o,t))
    		where
    			f i (v,o,t)					=	(o, tableUpdate t i v)

    interpExp								::	Exp -> (Output, Table) -> (Value, Output, Table)
    interpExp (IdExp i)	(o,t)				=	(tableLookup t i, o, t)
    interpExp (NumExp v) (o,t)				=	(v, o, t)
    interpExp (EseqExp s e) ot				=	interpExp e (interpStm s ot)
    interpExp (OpExp l op r) (o,t)			=	f (interpExp l (o,t)) op r
    		where
    			f (v,o,t) op r				=	g v op (interpExp r (o,t))
    			g v1 Plus (v2,o,t)			=	(v1 + v2, o, t)
    			g v1 Minus (v2,o,t)			=	(v1 - v2, o, t)
    			g v1 Times (v2,o,t)			=	(v1 * v2, o, t)
    			g v1 Div (v2,o,t)			=	(v1 `div` v2, o, t)

    interpExpList							::	ExpList -> Output -> Table -> (Output, Table)
    interpExpList (LastExpList e) o t		=	f (interpExp e (o,t))		
    		where
    			f (v, o, t)					=	(o ++ (show v) ++ ""\n"", t)
    interpExpList (PairExpList e el) o t	=	f (interpExp e (o,t))
    		where
    			f (v, o, t)					=	interpExpList el (o ++ (show v) ++ "" "") t
",haskell,io,interpreter,monads,,,open,0,565,21,"Simple interpreter written in Haskell, saves out print output until the end, instead of when it comes accross a print statement 
Below is my attempt at a very simple interpretter which is translated from the Java version of the program described in Chapter 1 of ""modern compiler implementation in Java"" by Andrew w. Appel, and operates directly upon a tree which represents the language.

Basically, my problem is that it saves up all the output until the end before anything at all is printed. I'm really just looking for advice on how to restructure it so that the ""print"" statements are printed as they are interpretted.


    module Interpretter where

    --------------------------------------------------------------------

    type Id			=	[Char]
    type Output		=	[Char]
    type Value		=	Int
    type Table		=	[(Id, Value)]

    data Stm		=	CompoundStm Stm Stm |
    					AssignStm Id Exp |
    					PrintStm ExpList deriving Show

    data Exp		=	IdExp Id |
    					NumExp Value |
    					OpExp Exp Op Exp |
    					EseqExp Stm Exp deriving Show

    data ExpList	=	PairExpList Exp ExpList |
    					LastExpList Exp deriving Show

    data Op			=	Plus | Minus | Times | Div deriving Show

    --------------------------------------------------------------------

    example	::	Stm
    example	=	CompoundStm (AssignStm ""a"" (OpExp (NumExp 5) Plus (NumExp 3))) 
    			(CompoundStm (AssignStm ""b"" (EseqExp (PrintStm (PairExpList (IdExp ""a"")
    			 (LastExpList (OpExp (IdExp ""a"") Minus (NumExp 1))))) (OpExp (NumExp 10) Times
    			  (IdExp ""a"")))) (PrintStm (LastExpList (IdExp ""b""))))

    --------------------------------------------------------------------

    tableUpdate								::	Table -> Id -> Value -> Table
    tableUpdate t i v						=	(i,v):t

    tableLookup								::	Table -> Id -> Value
    tableLookup ((x,v):t) i	| x == i		=	v
    tableLookup ((x,v):t) i	| x /= i		=	tableLookup t i

    --------------------------------------------------------------------

    execute									::	Stm -> IO()
    execute s								=	putStr ((\(o,_)->o) (interpStm s ("""",[])))

    interpStm								::	Stm -> (Output, Table) -> (Output, Table)
    interpStm (CompoundStm l r) ot			=	interpStm r (interpStm l ot)
    interpStm (PrintStm el) (o,t)			=	(interpExpList el o t)
    interpStm (AssignStm i e) (o,t)			=	f i (interpExp e (o,t))
    		where
    			f i (v,o,t)					=	(o, tableUpdate t i v)

    interpExp								::	Exp -> (Output, Table) -> (Value, Output, Table)
    interpExp (IdExp i)	(o,t)				=	(tableLookup t i, o, t)
    interpExp (NumExp v) (o,t)				=	(v, o, t)
    interpExp (EseqExp s e) ot				=	interpExp e (interpStm s ot)
    interpExp (OpExp l op r) (o,t)			=	f (interpExp l (o,t)) op r
    		where
    			f (v,o,t) op r				=	g v op (interpExp r (o,t))
    			g v1 Plus (v2,o,t)			=	(v1 + v2, o, t)
    			g v1 Minus (v2,o,t)			=	(v1 - v2, o, t)
    			g v1 Times (v2,o,t)			=	(v1 * v2, o, t)
    			g v1 Div (v2,o,t)			=	(v1 `div` v2, o, t)

    interpExpList							::	ExpList -> Output -> Table -> (Output, Table)
    interpExpList (LastExpList e) o t		=	f (interpExp e (o,t))		
    		where
    			f (v, o, t)					=	(o ++ (show v) ++ ""\n"", t)
    interpExpList (PairExpList e el) o t	=	f (interpExp e (o,t))
    		where
    			f (v, o, t)					=	interpExpList el (o ++ (show v) ++ "" "") t
",4
9320131,02/16/2012 22:32:11,1214949,02/16/2012 22:11:01,1,0,Haskell - Issue Compiling in GHC,"I'm very new to Haskell, and I've recently installed the platform with GHC. I decided to test it out by compiling a simple Hello world program: `main = putStrLn ""Hello, world""`

Now, when I go into the command line (Windows 7), find the proper directory, and type in `ghc hello.hs`, it comes back with the following message: ""[1 of 1] Compiling Main ( hello.hs, hello.o )"". I understand that once it's done compiling, it should follow with ""Linking hello.exe ..."", but that never comes.

Basically, is there any discernible reason why this would be happening? Is there a problem with the code, is there something I don't know about, or should I just try re-installing the Haskell Platform?

Thank you.",haskell,compilation,ghc,,,,open,0,117,6,"Haskell - Issue Compiling in GHC I'm very new to Haskell, and I've recently installed the platform with GHC. I decided to test it out by compiling a simple Hello world program: `main = putStrLn ""Hello, world""`

Now, when I go into the command line (Windows 7), find the proper directory, and type in `ghc hello.hs`, it comes back with the following message: ""[1 of 1] Compiling Main ( hello.hs, hello.o )"". I understand that once it's done compiling, it should follow with ""Linking hello.exe ..."", but that never comes.

Basically, is there any discernible reason why this would be happening? Is there a problem with the code, is there something I don't know about, or should I just try re-installing the Haskell Platform?

Thank you.",3
10164667,04/15/2012 18:10:00,81557,03/23/2009 17:44:54,344,2,Why is Haskell so large?,"I'm new to Haskell and so far quite enjoying it. One thing that strikes me is that it seems quite large, with many syntactical constructs and libraries that define functions for just about everything. For example, Data.Map defines almost 100 functions. Data.Set also defines many functions, as does Data.List, which also provides alot of the same functionality as Data.Set.

I have my beginner's opinion on why this might be (provide functions for all common patterns, reduce noise), but I'm interested to hear some veteran opinions on the topic.",haskell,syntax,language,,,04/15/2012 21:03:04,not constructive,1,87,5,"Why is Haskell so large? I'm new to Haskell and so far quite enjoying it. One thing that strikes me is that it seems quite large, with many syntactical constructs and libraries that define functions for just about everything. For example, Data.Map defines almost 100 functions. Data.Set also defines many functions, as does Data.List, which also provides alot of the same functionality as Data.Set.

I have my beginner's opinion on why this might be (provide functions for all common patterns, reduce noise), but I'm interested to hear some veteran opinions on the topic.",3
7180577,08/24/2011 18:41:49,756986,05/17/2011 08:20:00,35,5,Filtering out empty lists from inside a list,"Consider the list
   
      [[],[1],[1,2],[1,2,3],[],[2],[2,3],[],[3],[]]

I want to filter out all elements which are not empty lists i.e the filetered out put should give me a result like 


      [[1],[1,2],[1,2,3],[2],[2,3],[3]]

the following code fails:
     
      myfilter lst = filter(\x -> x/=[]) lst

",haskell,haskell-platform,real-world-haskell,,,,open,0,61,8,"Filtering out empty lists from inside a list Consider the list
   
      [[],[1],[1,2],[1,2,3],[],[2],[2,3],[],[3],[]]

I want to filter out all elements which are not empty lists i.e the filetered out put should give me a result like 


      [[1],[1,2],[1,2,3],[2],[2,3],[3]]

the following code fails:
     
      myfilter lst = filter(\x -> x/=[]) lst

",3
11734344,07/31/2012 06:27:15,777131,05/31/2011 05:43:00,1141,20,The newest GHC is still VERY slow,"Today `cabal install xmonad-contrib` takes long time. Meanwhile the other programs become slow when GHC is compiling & linking.

I really donot understand why GHC cannot achieve the same speed as OCaml (a FP language as Haskell)?  


Any suggestion is appreciated !",haskell,ghc,,,,07/31/2012 08:02:06,not a real question,1,42,7,"The newest GHC is still VERY slow Today `cabal install xmonad-contrib` takes long time. Meanwhile the other programs become slow when GHC is compiling & linking.

I really donot understand why GHC cannot achieve the same speed as OCaml (a FP language as Haskell)?  


Any suggestion is appreciated !",2
207265,10/16/2008 02:50:54,8482,09/15/2008 16:07:44,264,13,"Where next, after Haskell?","I tend to have a stereotype of Haskell as the most ""advanced"" (high-level, sophisticated, powerful, abstract) language. One which has lots of weird features that, if I could grasp them, would make me a super-hero programmer.

But what comes *after* Haskell? What languages and new kinds of abstraction are being invented now in academia which make even Haskell look like Blub?",haskell,power,abstraction,academia,,10/16/2008 03:07:27,not constructive,1,60,4,"Where next, after Haskell? I tend to have a stereotype of Haskell as the most ""advanced"" (high-level, sophisticated, powerful, abstract) language. One which has lots of weird features that, if I could grasp them, would make me a super-hero programmer.

But what comes *after* Haskell? What languages and new kinds of abstraction are being invented now in academia which make even Haskell look like Blub?",4
11023250,06/13/2012 21:02:59,1161847,01/21/2012 03:20:28,16,1,Writing BBS Software,"I am looking into making a text based game that I wrote in Haskell into a BBS software package. I am having problems finding information on writing the simplest of BBS software such as a echo server. I have implemented a simple telnet server before, but never a BBS software package. 

Am I not googling the correct keywords or is it that dead simple?

Ideally, I am looking for a link to an existing tutorial on making a BBS software package.",haskell,,,,,06/14/2012 04:09:37,off topic,1,80,3,"Writing BBS Software I am looking into making a text based game that I wrote in Haskell into a BBS software package. I am having problems finding information on writing the simplest of BBS software such as a echo server. I have implemented a simple telnet server before, but never a BBS software package. 

Am I not googling the correct keywords or is it that dead simple?

Ideally, I am looking for a link to an existing tutorial on making a BBS software package.",1
4305831,11/29/2010 16:36:49,124486,06/17/2009 16:37:13,6023,188,Haskell slice and lexing question,"How are these two function paresed?


    >  (** (1/2)) $ 40
    6.324555320336759
    it :: Double
    
    >  ((**) (1/2)) $ 40
    9.094947017729282e-13
    it :: Double

",haskell,,,,,,open,0,48,5,"Haskell slice and lexing question How are these two function paresed?


    >  (** (1/2)) $ 40
    6.324555320336759
    it :: Double
    
    >  ((**) (1/2)) $ 40
    9.094947017729282e-13
    it :: Double

",1
2546524,03/30/2010 15:37:03,82368,03/25/2009 04:27:50,1824,30,How do you write the function 'pair' in Haskell?,"The pair function needs to do something like this:

    pairs [1, 2, 3, 4] -> [(1, 2), (2, 3), (3, 4)]",haskell,,,,,,open,0,24,9,"How do you write the function 'pair' in Haskell? The pair function needs to do something like this:

    pairs [1, 2, 3, 4] -> [(1, 2), (2, 3), (3, 4)]",1
10500320,05/08/2012 14:11:35,1006010,10/20/2011 20:24:21,1438,24,(Haskell) Redoing the standard classes,"As evidenced by the Typeclassopedia, the current stack of classes imported from category theory is a bit of a tangled accident of history, rather than a beautiful coherent whole.

In particular, this makes it rather difficult to follow what's happening.

Can someone draw up a sketch of what this stuff ""should"" look like, petty concerns like backwards compatibility, code duplication or tractably short type signatures were not an issue?
",haskell,types,,,,05/10/2012 13:46:43,not constructive,1,67,5,"(Haskell) Redoing the standard classes As evidenced by the Typeclassopedia, the current stack of classes imported from category theory is a bit of a tangled accident of history, rather than a beautiful coherent whole.

In particular, this makes it rather difficult to follow what's happening.

Can someone draw up a sketch of what this stuff ""should"" look like, petty concerns like backwards compatibility, code duplication or tractably short type signatures were not an issue?
",2
8404510,12/06/2011 18:01:07,11173,09/16/2008 05:51:30,3949,105,"Am I the only one confused by the names Iteratee, Enumerator, and Enumeratee?","I love iteratees as a paradigm for IO, but... seriously what the heck is up with these names?

I get confused enough remembering whether I am a lessor or a lessee, and this is even worse.

I am having trouble developing a relationship with these names. Could someone explain their origin? The definition `data Stream a = Chunks [a] | EOF` is worse, if anything. That isn't a stream, it's just a little piece of one!

It seems like if `Iteratee`s consume things, `Enumerator`s produce them, and `Enumeratee`s do both that names like `Sink`, `Source`, and `Transformer` or `Consumer`, `Producer`, and `Transformer` might be better choices? Is there some reason apart from convention why these names wouldn't fit the concepts well?

Of all the eleventy-seven variations on this theme out there, I'm intrigued by [John Millikin's take on this old Haskell-Cafe thread about a variation which statically eliminates the ""divergent iteratee"" problem](http://www.opensubscriber.com/message/haskell-cafe@haskell.org/14463096.html) (the problem of an iteratee that returns Continue in response to EOF), but my problems with the names apply to pretty much all of the versions I have yet seen.",haskell,naming,iteratee,,,12/06/2011 18:29:38,not constructive,1,178,13,"Am I the only one confused by the names Iteratee, Enumerator, and Enumeratee? I love iteratees as a paradigm for IO, but... seriously what the heck is up with these names?

I get confused enough remembering whether I am a lessor or a lessee, and this is even worse.

I am having trouble developing a relationship with these names. Could someone explain their origin? The definition `data Stream a = Chunks [a] | EOF` is worse, if anything. That isn't a stream, it's just a little piece of one!

It seems like if `Iteratee`s consume things, `Enumerator`s produce them, and `Enumeratee`s do both that names like `Sink`, `Source`, and `Transformer` or `Consumer`, `Producer`, and `Transformer` might be better choices? Is there some reason apart from convention why these names wouldn't fit the concepts well?

Of all the eleventy-seven variations on this theme out there, I'm intrigued by [John Millikin's take on this old Haskell-Cafe thread about a variation which statically eliminates the ""divergent iteratee"" problem](http://www.opensubscriber.com/message/haskell-cafe@haskell.org/14463096.html) (the problem of an iteratee that returns Continue in response to EOF), but my problems with the names apply to pretty much all of the versions I have yet seen.",3
8423502,12/07/2011 22:26:47,208257,11/10/2009 23:19:14,7929,195,Simple exercises to learn Netwire?,"[Haskell wiki > Netwire](http://haskell.org/haskellwiki/Netwire) has some good introductory material to Netwire, but now (as a hobbyist Haskeller) I'm interested in something more. What kinds of simple exercises would be beneficial in order to sharpen my arrow/netwire skills?",haskell,reactive-programming,exercise,arrows,,12/10/2011 05:58:38,not a real question,1,37,5,"Simple exercises to learn Netwire? [Haskell wiki > Netwire](http://haskell.org/haskellwiki/Netwire) has some good introductory material to Netwire, but now (as a hobbyist Haskeller) I'm interested in something more. What kinds of simple exercises would be beneficial in order to sharpen my arrow/netwire skills?",4
7982771,11/02/2011 15:17:55,986465,10/09/2011 15:07:52,73,0,What general purpose functions do you use really often that aren't in the standard library?,"It can be your own or from other libraries. Many from this google talk are pretty nifty:
https://github.com/mtnviewmark/haskell-amuse-bouche",haskell,,,,,11/02/2011 15:50:08,not constructive,1,17,15,"What general purpose functions do you use really often that aren't in the standard library? It can be your own or from other libraries. Many from this google talk are pretty nifty:
https://github.com/mtnviewmark/haskell-amuse-bouche",1
7455199,09/17/2011 13:44:45,950293,09/17/2011 13:44:45,1,0,[haskell][cabal] installing reactive-banana-wx,"when you try to install the library reactie-banana-wx, get the error:
src\CRUD.hs:10:18: Could not find module `Data.Map': It is a member of the hidden package `containers-0.4.0.0'. Perhaps you need to add `containers' to the build-depends in your .cabal file.

installed the command: cabal install reactive-banana-wx

Please help correct the problem.",haskell,cabal,,,,,open,0,47,3,"[haskell][cabal] installing reactive-banana-wx when you try to install the library reactie-banana-wx, get the error:
src\CRUD.hs:10:18: Could not find module `Data.Map': It is a member of the hidden package `containers-0.4.0.0'. Perhaps you need to add `containers' to the build-depends in your .cabal file.

installed the command: cabal install reactive-banana-wx

Please help correct the problem.",2
6240749,06/05/2011 03:01:03,145567,07/27/2009 07:10:18,1550,53,Generating a 2D grid in Haskell,"Learning haskell and want to generate a 2D grid similar to how you might in C:

    int data[10][10]

what's an acceptable and elegant approach? Zip? Foldl?
",haskell,,,,,,open,0,28,6,"Generating a 2D grid in Haskell Learning haskell and want to generate a 2D grid similar to how you might in C:

    int data[10][10]

what's an acceptable and elegant approach? Zip? Foldl?
",1
10834544,05/31/2012 13:24:29,1428509,05/31/2012 13:22:58,1,0,HASKELL companies? Who uses haskel?,"I just would like to know which companies in Europe already use Haskell, do you know any consulting companies etc.??? ",haskell,haskell-platform,template-haskell,,,05/31/2012 13:33:22,off topic,1,21,5,"HASKELL companies? Who uses haskel? I just would like to know which companies in Europe already use Haskell, do you know any consulting companies etc.??? ",3
10460032,05/05/2012 08:05:03,947301,09/15/2011 16:50:42,424,0,"Haskell ""parse error on input `=>' ""","

    first :: (a,b,c) -> a
    first (x, _, _) = x
    
    second :: (a,b,c) -> b
    second (_,y,_) = y
    
    third:: (a,b,c)-> c
    third (_,_,z) => z

I got error message from this piece of code.

    ""parse error on input `=>'
    ""

I cannot see any reason. Could anyone help me to point out?
thanks.
",haskell,,,,,05/05/2012 15:20:39,too localized,1,85,7,"Haskell ""parse error on input `=>' "" 

    first :: (a,b,c) -> a
    first (x, _, _) = x
    
    second :: (a,b,c) -> b
    second (_,y,_) = y
    
    third:: (a,b,c)-> c
    third (_,_,z) => z

I got error message from this piece of code.

    ""parse error on input `=>'
    ""

I cannot see any reason. Could anyone help me to point out?
thanks.
",1
6592763,07/06/2011 07:11:12,462569,09/30/2010 07:23:14,493,0,How might I improve the structure of this Haskell source?,"Must say I find programming in Haskell to require much more cognitive intensity than any other language I've tried. I'm not certain I care about lazy evaluation or monads very much, but I do appreciate certain functional aspects, static type checking and not needing a huge VM to run.

I've been writing a short program to rename images based on EXIF and now have something that works. I'd like someone Haskell expert opinions on the overall structure of the source code in terms of what I've done right/wrong, and how I might improve and make the code more succinct. I won't bother posting the entire program but a lot of the overall structure is below. Appreciate it.

    import Control.Applicative
    import Control.Monad.Error
    import Data.Char
    import Data.Either
    import Data.List
    import Data.Maybe
    import Data.Time.Format
    import Data.Time.LocalTime
    import System.Console.GetOpt
    import System.Directory
    import System.Environment
    import System.FilePath
    import System.Locale
    import System.IO.Error
    import Text.Printf
    
    import Album.Utils
    import Album.Exif
    import Album.Error
    
    -- -----------------------------------------------------------------------
    -- Main
    
    main = do
      r <- try main0
      case r of
        Left err -> do
          printf ""Error type:     %s\n"" $ (show $ ioeGetErrorType err)
          printf ""Error string:   %s\n"" $ (ioeGetErrorString err)
          printf ""Error filename: %s\n"" $ (maybe ""None"" id $ ioeGetFileName err)
          printf ""Error handle:   %s\n"" $ (maybe ""None"" show $ ioeGetHandle err)
        Right _  -> return ()
    
    -- Process arguments
    main0 = do
      args <- getArgs
      case processArgs args desc of
        (True, _, usage) -> showUsage usage
        (False, (flags, fns, []), usage) -> do
          rv <- runErrorT $ main1 flags fns
          either (\e -> showErrs [show e] usage) (const $ return ()) rv
        (False, (_, _, errs), usage) -> showErrs errs usage
      where
        desc = ""Rename and catalog media.\n"" ++
               ""Usage: album -n <albumname> <options> <media files>\n""
    
    -- Sanity check
    main1 flags fns = do
    
        -- Check name
        albName <- maybe (throwError AlbumNameError) return $ albumName flags
    
        -- Check for duplicate media
        let dups = nub $ fns \\ nub fns
        unless (null dups) $ throwError $ MediaDuplicateError dups
    
        -- Check for valid filenames
        (haves, havenots) <- liftIO $ filesExist fns
        unless (null havenots) $ throwError $ MediaNotFoundError havenots
        when (null haves)      $ throwError MediaNotSpecifiedError
    
        -- Check exiftool existence
        tool0 <- liftIO $ findExecutable ""exiftool""
        tool  <- maybe (throwError ExifToolNotFoundError) return tool0
    
        -- Get EXIF attributes
        exifs0 <- liftIO $ getExifs tool fns
        exifs  <- either (throwError . ExifParseError) return exifs0
    
        -- Check for exiftool errors
        let bads = findExifs ""ExifTool:Error"" exifs
        unless (null bads) $ throwError $ MediaBadError $ map fst bads
    
        -- Check for timestamps
        let infos0 = map (\(n,e) -> (n, exifToDateTime e)) exifs
        let nodates = filter (isNothing . snd) infos0
        unless (null nodates) $ throwError $ MediaDateTimeTagError $ map fst nodates
    
        let infos = map (\(n,Just dt) -> (n,dt)) infos0
        main2 albName infos
    
    -- Do renames
    main2 albName infos = do
    
        -- Album folder name
        let mints     = minimum $ map snd infos
        let mintsiso  = formatTime defaultTimeLocale ""%Y%m%d"" mints
        let albFolder = printf ""%s - %s"" mintsiso albName
    
        -- Get list of existing media
        albExist <- liftIO $ doesDirectoryExist albFolder
        (albCreate, existing) <- case albExist of
            False -> return (True, [])
            True -> do
                e <- liftIO $ filter ((/= ""."") . nub) <$> getDirectoryContents albFolder
                return (False, e)
    
        -- Rename list
        let rens0 = mediaNames albName infos existing
        let rens1 = map (\(a,b) -> (a, combine albFolder b)) rens0
        let len = maximum $ map (length . fst) rens1
    
        if albCreate
          then do
            liftIO $ printf ""Creating folder: %s\n"" albFolder
            liftIO $ createDirectory albFolder
          else 
            return ()
    
        forM_ rens1 $ \(oldf, newf) -> do
            liftIO $ printf ""%*s >>> %s\n"" len oldf newf
            liftIO $ renameFile oldf newf
    
        return ()
    
    showErrs errs usage = do
        putStrLn $ concatMap (""Error: "" ++ ) errs
        return ()
    
    showUsage usage = do
        putStrLn usage
        return ()
    
    -- -----------------------------------------------------------------------
    -- Rename
    
    mediaNames albName infos existing = go existing (map cands infos)
        where
        go es [] = []
        go es ((fn,cs):css) = let p = unused cs es in (fn,p):go (p:es) css
        unused cs es = fromJust $ find (`notElem` es) cs
        cands (fn,dt) = (fn, map (++ ext) (pref:alts))
            where
            pref  = printf ""%s - %s"" (ft dt) albName
            ft dt = formatTime defaultTimeLocale ""%Y%m%dT%H%M%S"" dt
            alts  = map (printf ""%s (%02d)"" pref) ([1..] :: [Int])
            ext   = map toLower (takeExtension fn)
    
    -- -----------------------------------------------------------------------
    -- Arguments
    
    data Option = OptionAlbumName String
                | OptionHelp
                deriving (Eq, Show)
    
    processArgs args desc = (elem OptionHelp flags, opts, usage)
      where
        opts@(flags, fns, errs)  = getOpt RequireOrder conf args
        usage = usageInfo desc conf
        conf  = [
          Option ""n"" [""name""] (ReqArg OptionAlbumName ""NAME"") ""Album name"",
          Option ""h"" [""help""] (NoArg OptionHelp) ""Help""]
    
    albumName (OptionAlbumName n:xs) = Just n
    albumName (x:xs)                 = albumName xs
    albumName []                     = Nothing

",haskell,,,,,07/06/2011 10:53:03,off topic,1,1791,10,"How might I improve the structure of this Haskell source? Must say I find programming in Haskell to require much more cognitive intensity than any other language I've tried. I'm not certain I care about lazy evaluation or monads very much, but I do appreciate certain functional aspects, static type checking and not needing a huge VM to run.

I've been writing a short program to rename images based on EXIF and now have something that works. I'd like someone Haskell expert opinions on the overall structure of the source code in terms of what I've done right/wrong, and how I might improve and make the code more succinct. I won't bother posting the entire program but a lot of the overall structure is below. Appreciate it.

    import Control.Applicative
    import Control.Monad.Error
    import Data.Char
    import Data.Either
    import Data.List
    import Data.Maybe
    import Data.Time.Format
    import Data.Time.LocalTime
    import System.Console.GetOpt
    import System.Directory
    import System.Environment
    import System.FilePath
    import System.Locale
    import System.IO.Error
    import Text.Printf
    
    import Album.Utils
    import Album.Exif
    import Album.Error
    
    -- -----------------------------------------------------------------------
    -- Main
    
    main = do
      r <- try main0
      case r of
        Left err -> do
          printf ""Error type:     %s\n"" $ (show $ ioeGetErrorType err)
          printf ""Error string:   %s\n"" $ (ioeGetErrorString err)
          printf ""Error filename: %s\n"" $ (maybe ""None"" id $ ioeGetFileName err)
          printf ""Error handle:   %s\n"" $ (maybe ""None"" show $ ioeGetHandle err)
        Right _  -> return ()
    
    -- Process arguments
    main0 = do
      args <- getArgs
      case processArgs args desc of
        (True, _, usage) -> showUsage usage
        (False, (flags, fns, []), usage) -> do
          rv <- runErrorT $ main1 flags fns
          either (\e -> showErrs [show e] usage) (const $ return ()) rv
        (False, (_, _, errs), usage) -> showErrs errs usage
      where
        desc = ""Rename and catalog media.\n"" ++
               ""Usage: album -n <albumname> <options> <media files>\n""
    
    -- Sanity check
    main1 flags fns = do
    
        -- Check name
        albName <- maybe (throwError AlbumNameError) return $ albumName flags
    
        -- Check for duplicate media
        let dups = nub $ fns \\ nub fns
        unless (null dups) $ throwError $ MediaDuplicateError dups
    
        -- Check for valid filenames
        (haves, havenots) <- liftIO $ filesExist fns
        unless (null havenots) $ throwError $ MediaNotFoundError havenots
        when (null haves)      $ throwError MediaNotSpecifiedError
    
        -- Check exiftool existence
        tool0 <- liftIO $ findExecutable ""exiftool""
        tool  <- maybe (throwError ExifToolNotFoundError) return tool0
    
        -- Get EXIF attributes
        exifs0 <- liftIO $ getExifs tool fns
        exifs  <- either (throwError . ExifParseError) return exifs0
    
        -- Check for exiftool errors
        let bads = findExifs ""ExifTool:Error"" exifs
        unless (null bads) $ throwError $ MediaBadError $ map fst bads
    
        -- Check for timestamps
        let infos0 = map (\(n,e) -> (n, exifToDateTime e)) exifs
        let nodates = filter (isNothing . snd) infos0
        unless (null nodates) $ throwError $ MediaDateTimeTagError $ map fst nodates
    
        let infos = map (\(n,Just dt) -> (n,dt)) infos0
        main2 albName infos
    
    -- Do renames
    main2 albName infos = do
    
        -- Album folder name
        let mints     = minimum $ map snd infos
        let mintsiso  = formatTime defaultTimeLocale ""%Y%m%d"" mints
        let albFolder = printf ""%s - %s"" mintsiso albName
    
        -- Get list of existing media
        albExist <- liftIO $ doesDirectoryExist albFolder
        (albCreate, existing) <- case albExist of
            False -> return (True, [])
            True -> do
                e <- liftIO $ filter ((/= ""."") . nub) <$> getDirectoryContents albFolder
                return (False, e)
    
        -- Rename list
        let rens0 = mediaNames albName infos existing
        let rens1 = map (\(a,b) -> (a, combine albFolder b)) rens0
        let len = maximum $ map (length . fst) rens1
    
        if albCreate
          then do
            liftIO $ printf ""Creating folder: %s\n"" albFolder
            liftIO $ createDirectory albFolder
          else 
            return ()
    
        forM_ rens1 $ \(oldf, newf) -> do
            liftIO $ printf ""%*s >>> %s\n"" len oldf newf
            liftIO $ renameFile oldf newf
    
        return ()
    
    showErrs errs usage = do
        putStrLn $ concatMap (""Error: "" ++ ) errs
        return ()
    
    showUsage usage = do
        putStrLn usage
        return ()
    
    -- -----------------------------------------------------------------------
    -- Rename
    
    mediaNames albName infos existing = go existing (map cands infos)
        where
        go es [] = []
        go es ((fn,cs):css) = let p = unused cs es in (fn,p):go (p:es) css
        unused cs es = fromJust $ find (`notElem` es) cs
        cands (fn,dt) = (fn, map (++ ext) (pref:alts))
            where
            pref  = printf ""%s - %s"" (ft dt) albName
            ft dt = formatTime defaultTimeLocale ""%Y%m%dT%H%M%S"" dt
            alts  = map (printf ""%s (%02d)"" pref) ([1..] :: [Int])
            ext   = map toLower (takeExtension fn)
    
    -- -----------------------------------------------------------------------
    -- Arguments
    
    data Option = OptionAlbumName String
                | OptionHelp
                deriving (Eq, Show)
    
    processArgs args desc = (elem OptionHelp flags, opts, usage)
      where
        opts@(flags, fns, errs)  = getOpt RequireOrder conf args
        usage = usageInfo desc conf
        conf  = [
          Option ""n"" [""name""] (ReqArg OptionAlbumName ""NAME"") ""Album name"",
          Option ""h"" [""help""] (NoArg OptionHelp) ""Help""]
    
    albumName (OptionAlbumName n:xs) = Just n
    albumName (x:xs)                 = albumName xs
    albumName []                     = Nothing

",1
8593147,12/21/2011 16:35:35,1109892,12/21/2011 13:00:27,3,0,Haskell program will not end if input = 0,"
When the user inputs number m = 0, the program will never stop counting. Is there any way how to take care of that? so if the user inputs 0 the program will end.    

    import Control.Monad (replicateM)

    transpose :: [[a]]->[[a]]
    transpose ([]:_) = []
    transpose x = (map head x) : transpose (map tail x)

    readMany :: Read a => IO [a]
    readMany = fmap (map read . words) getLine

    formatMatrix :: [[Int]] -> String
    formatMatrix = unlines . map unwords . map (map show)

    parse :: IO ([[Int]])
    parse = do
			[n] <- readMany
			matrix <- replicateM n readMany
			return (matrix)

    main :: IO ()
    main = do	  
			  matrix <- parse
			  let tMatrix = transpose matrix
			  putStrLn ""\n""
			  putStr (formatMatrix tMatrix)

",haskell,,,,,,open,0,165,9,"Haskell program will not end if input = 0 
When the user inputs number m = 0, the program will never stop counting. Is there any way how to take care of that? so if the user inputs 0 the program will end.    

    import Control.Monad (replicateM)

    transpose :: [[a]]->[[a]]
    transpose ([]:_) = []
    transpose x = (map head x) : transpose (map tail x)

    readMany :: Read a => IO [a]
    readMany = fmap (map read . words) getLine

    formatMatrix :: [[Int]] -> String
    formatMatrix = unlines . map unwords . map (map show)

    parse :: IO ([[Int]])
    parse = do
			[n] <- readMany
			matrix <- replicateM n readMany
			return (matrix)

    main :: IO ()
    main = do	  
			  matrix <- parse
			  let tMatrix = transpose matrix
			  putStrLn ""\n""
			  putStr (formatMatrix tMatrix)

",1
10230562,04/19/2012 14:42:15,1127609,01/03/2012 10:19:25,321,13,"Confusion over the State Monad code on ""Learn you a Haskell""","I am trying to get a grasp on Haskell using the online book [Learn you a Haskell for great Good](http://learnyouahaskell.com).

I have, to my knowledge, been able to understand Monads so far until I hit the chapter introducing the [State Monad](http://learnyouahaskell.com/for-a-few-monads-more#state).

However, the code presented and claimed to be the Monad implementation of the State type (I have not been able to locate it in Hoogle) seems too much for me to handle.

* To begin with, I do not understand the logic behind it i.e why it should work and how the author considered this technique.( maybe relevant articles or white-papers can be suggested?)

* At line 4, it is suggested that function f takes 1 parameter.  
However a few lines down we are presented with pop, which takes no parameters!

* To extend on point 1, what is the author trying to accomplish using a function to represent the State.

Any help in understanding what is going on is greatly appreciated.",haskell,monads,state-monad,,,,open,0,158,11,"Confusion over the State Monad code on ""Learn you a Haskell"" I am trying to get a grasp on Haskell using the online book [Learn you a Haskell for great Good](http://learnyouahaskell.com).

I have, to my knowledge, been able to understand Monads so far until I hit the chapter introducing the [State Monad](http://learnyouahaskell.com/for-a-few-monads-more#state).

However, the code presented and claimed to be the Monad implementation of the State type (I have not been able to locate it in Hoogle) seems too much for me to handle.

* To begin with, I do not understand the logic behind it i.e why it should work and how the author considered this technique.( maybe relevant articles or white-papers can be suggested?)

* At line 4, it is suggested that function f takes 1 parameter.  
However a few lines down we are presented with pop, which takes no parameters!

* To extend on point 1, what is the author trying to accomplish using a function to represent the State.

Any help in understanding what is going on is greatly appreciated.",3
10466871,05/05/2012 23:40:16,947301,09/15/2011 16:50:42,417,0,got parse error on input `=>' on Haskell,"    bmiTell :: => Double -> String
    bmiTell bmi
    	| bmi <= 18.5 = ""You're underweight, you emo, you!""
    	| bmi <= 25.0 = ""You're supposeldly normal. Pffft, I bet you're ugly!""
    	| bmi <= 30.0 = ""You're fat! Lose some weight, fatty!""
    	| otherwise   = ""You are a whale, congratulations!""
    	

This code got me an error, ""parse error on input '=>'""
I have no idea why.
Any help?
thank you !
",haskell,,,,,,open,0,92,8,"got parse error on input `=>' on Haskell     bmiTell :: => Double -> String
    bmiTell bmi
    	| bmi <= 18.5 = ""You're underweight, you emo, you!""
    	| bmi <= 25.0 = ""You're supposeldly normal. Pffft, I bet you're ugly!""
    	| bmi <= 30.0 = ""You're fat! Lose some weight, fatty!""
    	| otherwise   = ""You are a whale, congratulations!""
    	

This code got me an error, ""parse error on input '=>'""
I have no idea why.
Any help?
thank you !
",1
1160702,07/21/2009 17:55:30,114979,05/31/2009 02:21:34,70,5,"Values inside monads, nested in data structures?","Suppose that in a Haskell program  I have some data whose type is something like:

* `IO [ IO (Int, String, Int) ]`, or
* `IO [ (Int, String, IO Int) ]`, or
* `[ (Int, String, IO Int) ]`

but I have pure functions that should operate on those values. It seems that I'd have to clumsily remove the inside values from the IO monad, until I got something like IO [ (Int, string, Int) ] and then (from inside the IO monad) apply the pure functions. There is no easy pre-defined way to do this, I suppose? Something that would lift a whole data structure into a monad, turning all *inside* types into pure types? (That would be very convenient!)",haskell,monads,,,,,open,0,119,7,"Values inside monads, nested in data structures? Suppose that in a Haskell program  I have some data whose type is something like:

* `IO [ IO (Int, String, Int) ]`, or
* `IO [ (Int, String, IO Int) ]`, or
* `[ (Int, String, IO Int) ]`

but I have pure functions that should operate on those values. It seems that I'd have to clumsily remove the inside values from the IO monad, until I got something like IO [ (Int, string, Int) ] and then (from inside the IO monad) apply the pure functions. There is no easy pre-defined way to do this, I suppose? Something that would lift a whole data structure into a monad, turning all *inside* types into pure types? (That would be very convenient!)",2
4557394,12/29/2010 20:02:39,72994,03/02/2009 22:37:58,717,17,How do you use the Bounded typeclass in Haskell to define a type with a floating point range?,"I expected the following code to fail with a type error due to violation of the minBound and maxBound. But, as you can see, it goes through without flagging an error. 

    {-# OPTIONS_GHC -XTypeSynonymInstances #-}
    module Main where
    
    type Probability = Float
    instance Bounded Probability where
        minBound = 0.0
        maxBound = 1.0
    
    testout :: Float -> Probability
    testout xx = xx + 1.0
    
    main = do
      putStrLn $ show $ testout 0.5
      putStrLn $ show $ testout (-1.5)
      putStrLn $ show $ testout 1.5

In the Prelude I get this

    *Main> :type (testout 0.5)
    (testout 0.5) :: Probability

And at the prompt I get this: 

    [~/test]$runhaskell demo.hs
    1.5
    -0.5
    2.5

Clearly I'm not declaring Bounded properly, and I'm sure I'm doing something wrong syntactically.  There isn't much simple stuff on Google regarding Bounded typeclasses, so any help would be much appreciated. ",haskell,types,typeclass,,,,open,0,222,18,"How do you use the Bounded typeclass in Haskell to define a type with a floating point range? I expected the following code to fail with a type error due to violation of the minBound and maxBound. But, as you can see, it goes through without flagging an error. 

    {-# OPTIONS_GHC -XTypeSynonymInstances #-}
    module Main where
    
    type Probability = Float
    instance Bounded Probability where
        minBound = 0.0
        maxBound = 1.0
    
    testout :: Float -> Probability
    testout xx = xx + 1.0
    
    main = do
      putStrLn $ show $ testout 0.5
      putStrLn $ show $ testout (-1.5)
      putStrLn $ show $ testout 1.5

In the Prelude I get this

    *Main> :type (testout 0.5)
    (testout 0.5) :: Probability

And at the prompt I get this: 

    [~/test]$runhaskell demo.hs
    1.5
    -0.5
    2.5

Clearly I'm not declaring Bounded properly, and I'm sure I'm doing something wrong syntactically.  There isn't much simple stuff on Google regarding Bounded typeclasses, so any help would be much appreciated. ",3
2727008,04/28/2010 05:21:01,225200,12/05/2009 00:35:25,1,0,How do you install GHC into Cygwin or point Cygwin to GHC?,"I attempted to point the Cygwin installer to http://haskell.org/ghc/cygwin, but the installer was unable to find setup.ini.sig. If possible, how could I alternatively edit my .bashrc to reference an installation made using the setup binaries in C:/ghc/.",haskell,cygwin,bash,installation,,,open,0,37,12,"How do you install GHC into Cygwin or point Cygwin to GHC? I attempted to point the Cygwin installer to http://haskell.org/ghc/cygwin, but the installer was unable to find setup.ini.sig. If possible, how could I alternatively edit my .bashrc to reference an installation made using the setup binaries in C:/ghc/.",4
4696618,01/14/2011 22:22:00,576286,01/14/2011 22:22:00,1,0,Is Haskell a Lisp?,"I've been reading The Haskell Road to Logic, Maths and Programming by Doets and Eijck 2004. It seems to be a well respected book, but I was struck when it claims that Haskell is a member of the Lisp family. Would anyone else agree with that? I would characterise Lisps with s-expressions, impure functions, and lists as the only composite data structure. Haskell has none of that. What do you think?",haskell,lisp,,,,12/27/2011 23:44:00,not constructive,1,71,4,"Is Haskell a Lisp? I've been reading The Haskell Road to Logic, Maths and Programming by Doets and Eijck 2004. It seems to be a well respected book, but I was struck when it claims that Haskell is a member of the Lisp family. Would anyone else agree with that? I would characterise Lisps with s-expressions, impure functions, and lists as the only composite data structure. Haskell has none of that. What do you think?",2
11128759,06/20/2012 21:55:24,1243996,03/02/2012 00:05:01,108,12,Beautiful and terrible Haskell,"Haskell is beautiful. That's a fact. It's concise, fast etc. Many of you will admit that writing in it is a great pleasure. On the other hand I think that it's conciseness might be a disadvantage when people try to write too sophisticated code. For example I recently opened my friend's project and found something like this:

    stationDepartures id sc=map (\(s1,list)->(stationName $ (stationMap $ system sc) Map.! s1,list)) ( Map.toList (Map.fromListWith (++) (map (\((s1,s2),(d,start,dur))->(s2,[start])) (Map.toList (Map.filterWithKey (\(s1,s2) _ ->s1==id) (Map.unions (List.map times (Map.elems $ schedule sc))))))))

This one-liner was absolutely unreadable to me. This is of course a quite extreme example but it helped me to realize that maybe my Haskell code might seem unreadable to others. I started to wonder what are the principles of creating a beautiful code in Haskell. I found that e.g. lambda functions are considered by some people as superfluous because they make the code less readable. What do you think about that? What requirements should Haskell code meet to be considered as ""beautiful""?",haskell,functional-programming,,,,06/20/2012 22:28:38,not constructive,1,171,4,"Beautiful and terrible Haskell Haskell is beautiful. That's a fact. It's concise, fast etc. Many of you will admit that writing in it is a great pleasure. On the other hand I think that it's conciseness might be a disadvantage when people try to write too sophisticated code. For example I recently opened my friend's project and found something like this:

    stationDepartures id sc=map (\(s1,list)->(stationName $ (stationMap $ system sc) Map.! s1,list)) ( Map.toList (Map.fromListWith (++) (map (\((s1,s2),(d,start,dur))->(s2,[start])) (Map.toList (Map.filterWithKey (\(s1,s2) _ ->s1==id) (Map.unions (List.map times (Map.elems $ schedule sc))))))))

This one-liner was absolutely unreadable to me. This is of course a quite extreme example but it helped me to realize that maybe my Haskell code might seem unreadable to others. I started to wonder what are the principles of creating a beautiful code in Haskell. I found that e.g. lambda functions are considered by some people as superfluous because they make the code less readable. What do you think about that? What requirements should Haskell code meet to be considered as ""beautiful""?",2
8189405,11/18/2011 21:30:18,194089,10/21/2009 20:11:08,701,22,"resources for learning idiomatic Haskell? (eta elimination, symbolic infix operators, libraries etc.)","Despite some experience with Lisp and ML, I'm having a great deal of trouble learning to read and (idiomatically) write Haskell because the local style seems to be

- do eta elimination whenever possible
- eschew parentheses in favor of exploiting operator precedence
- pack half your logic into bucketloads of overloaded, non-alphanumeric infix operators

The last one is particularly difficult because there are so many predefined operators, each with their own conventions and general semantics, that often reading Haskell becomes an exercise in Hoogle and `:type`.

Are there any good tutorials that assume knowledge of CS/functional concepts, and instead focus on Haskell-specific idioms?  I'm looking for something like Real-World Haskell, that starts off with a very naive, explicit program and then gradually transforms it into a more idiomatic style, introducing and explaining the idioms as it goes.  But instead of introducing and explaining general concepts like monads and type classes, it would introduce specific monads and specific type classes, like ""but this is exactly what the Alternative monoid does!""",haskell,idioms,,,,11/21/2011 11:25:20,not constructive,1,167,12,"resources for learning idiomatic Haskell? (eta elimination, symbolic infix operators, libraries etc.) Despite some experience with Lisp and ML, I'm having a great deal of trouble learning to read and (idiomatically) write Haskell because the local style seems to be

- do eta elimination whenever possible
- eschew parentheses in favor of exploiting operator precedence
- pack half your logic into bucketloads of overloaded, non-alphanumeric infix operators

The last one is particularly difficult because there are so many predefined operators, each with their own conventions and general semantics, that often reading Haskell becomes an exercise in Hoogle and `:type`.

Are there any good tutorials that assume knowledge of CS/functional concepts, and instead focus on Haskell-specific idioms?  I'm looking for something like Real-World Haskell, that starts off with a very naive, explicit program and then gradually transforms it into a more idiomatic style, introducing and explaining the idioms as it goes.  But instead of introducing and explaining general concepts like monads and type classes, it would introduce specific monads and specific type classes, like ""but this is exactly what the Alternative monoid does!""",2
5759838,04/22/2011 20:41:15,659733,03/14/2011 23:21:32,21,2,Cannot get cabal to find the mpi library for haskell-mpi on Windows,"Dear Stackoverflow readers:

I am wanting to use haskell-mpi on a lab machine at one of my university labs to do my final project for my parallel computing class, but I am running into trouble trying to get haskell-mpi to build against MPICH2.

haskell-mpi is pretty much completely undocumented, and digging through their git repository has helped me program some example programs on it but has done nothing to help me set it up on Windows. On my personal linux system, I had no trouble setting up and running haskell-mpi against MPICH2.

The problem is probably in one of cabal, the way MPICH2 is installed, or with haskell-mpi's cabal configuration, hence the choice of tags.

I am open to experimenting here for the sake of troubleshooting, and adding more information as needed, but eventually I will no longer have access to these machines.

I have administrator rights in the lab where I will be running this, so if the problem is with the MPICH2 installation itself, I could indeed reinstall it.

cabal fails as follows when I try to install haskell-mpi:

    Resolving dependencies...
    Configuring haskell-mpi-1.0.0...
    cabal: Missing dependency on a foreign library:
    * Missing C library: mpi
    This problem can usually be solved by installing the system package that
    provides this library (you may need the ""-dev"" version). If the library is
    already installed but in a non-standard location then you can use the flags
    --extra-include-dirs= and --extra-lib-dirs= to specify where it is.
    cabal: Error: some packages failed to install:
    haskell-mpi-1.0.0 failed during the configure step. The exception was:
    ExitFailure 1

Here are what I tried giving for --extra-lib-dirs and --extra-include-dirs:

    --extra-lib-dirs=""C:\Program Files\MPICH2\lib"" 
    --extra-include-dirs=""C:\Program Files\MPICH2\include""

I've tried reordering where I put those flags, escaping the backlashes, using the short path `PROGRA~1` and various permutations of these. So I don't think this is going to help. I need to know what the `mpi` dependency actually means and figure out how I will satisfy it so that this library can actually build. Here is what lives in the two aforementioned folders at this moment:

Libs:

     Volume in drive C has no label.
     Volume Serial Number is 5406-5C5C
    
     Directory of C:\Program Files\MPICH2\lib
    
    04/22/2011  01:20 PM    <DIR>          .
    04/22/2011  01:20 PM    <DIR>          ..
    01/31/2011  03:59 PM           515,704 cxx.lib
    01/31/2011  04:23 PM           137,434 fmpich2.lib
    01/31/2011  04:25 PM           410,982 fmpich2g.lib
    01/31/2011  04:29 PM           162,690 fmpich2s.lib
    01/31/2011  04:53 PM                 0 libfmpich2g.a
    01/31/2011  04:53 PM                 0 libmpi.a
    01/31/2011  04:53 PM           215,528 libmpicxx.a
    01/31/2011  04:16 PM            10,618 mpe.lib
    01/31/2011  04:46 PM           135,434 mpi.lib
                   9 File(s)      1,588,390 bytes
                   2 Dir(s)  221,505,835,008 bytes free

Include:

     Volume in drive C has no label.
     Volume Serial Number is 5406-5C5C
    
     Directory of C:\Program Files\MPICH2\include
    
    02/01/2011  05:38 PM    <DIR>          .
    02/01/2011  05:38 PM    <DIR>          ..
    11/17/2009  09:46 PM             4,857 clog_commset.h
    11/02/2007  05:50 PM               696 clog_const.h
    01/31/2011  03:50 PM               731 clog_inttypes.h
    11/17/2009  09:46 PM             1,353 clog_uuid.h
    10/21/2010  01:20 PM               355 mpe.h
    11/17/2009  09:46 PM            11,102 mpe_log.h
    11/02/2007  05:50 PM             1,833 mpe_logf.h
    11/17/2009  09:46 PM             1,322 mpe_misc.h
    01/31/2011  03:50 PM            57,128 mpi.h
    01/31/2011  04:23 PM             3,251 mpi.mod
    01/31/2011  03:50 PM            97,267 mpicxx.h
    01/31/2011  03:51 PM            19,051 mpif.h
    01/31/2011  03:50 PM            16,765 mpio.h
    01/31/2011  04:23 PM            13,668 mpi_base.mod
    01/31/2011  04:23 PM            30,866 mpi_constants.mod
    01/31/2011  04:23 PM             7,802 mpi_sizeofs.mod
                  16 File(s)        268,047 bytes
                   2 Dir(s)  221,505,830,912 bytes free

Is there anything here that might be recognizably missing?

Note that `C:\Program Files\MPICH2\bin` is already in PATH, although perhaps I am missing other environment variables.

I am quite stumped at this point. Just about any suggestion would be helpful.

Sincerely, Barend.

PS: This should probably be tagged ""haskell-mpi"", but I'm not allowed to make new tags. I guess nobody else is really using it yet.",haskell,cabal,mpich2,,,12/08/2011 17:02:14,too localized,1,1212,12,"Cannot get cabal to find the mpi library for haskell-mpi on Windows Dear Stackoverflow readers:

I am wanting to use haskell-mpi on a lab machine at one of my university labs to do my final project for my parallel computing class, but I am running into trouble trying to get haskell-mpi to build against MPICH2.

haskell-mpi is pretty much completely undocumented, and digging through their git repository has helped me program some example programs on it but has done nothing to help me set it up on Windows. On my personal linux system, I had no trouble setting up and running haskell-mpi against MPICH2.

The problem is probably in one of cabal, the way MPICH2 is installed, or with haskell-mpi's cabal configuration, hence the choice of tags.

I am open to experimenting here for the sake of troubleshooting, and adding more information as needed, but eventually I will no longer have access to these machines.

I have administrator rights in the lab where I will be running this, so if the problem is with the MPICH2 installation itself, I could indeed reinstall it.

cabal fails as follows when I try to install haskell-mpi:

    Resolving dependencies...
    Configuring haskell-mpi-1.0.0...
    cabal: Missing dependency on a foreign library:
    * Missing C library: mpi
    This problem can usually be solved by installing the system package that
    provides this library (you may need the ""-dev"" version). If the library is
    already installed but in a non-standard location then you can use the flags
    --extra-include-dirs= and --extra-lib-dirs= to specify where it is.
    cabal: Error: some packages failed to install:
    haskell-mpi-1.0.0 failed during the configure step. The exception was:
    ExitFailure 1

Here are what I tried giving for --extra-lib-dirs and --extra-include-dirs:

    --extra-lib-dirs=""C:\Program Files\MPICH2\lib"" 
    --extra-include-dirs=""C:\Program Files\MPICH2\include""

I've tried reordering where I put those flags, escaping the backlashes, using the short path `PROGRA~1` and various permutations of these. So I don't think this is going to help. I need to know what the `mpi` dependency actually means and figure out how I will satisfy it so that this library can actually build. Here is what lives in the two aforementioned folders at this moment:

Libs:

     Volume in drive C has no label.
     Volume Serial Number is 5406-5C5C
    
     Directory of C:\Program Files\MPICH2\lib
    
    04/22/2011  01:20 PM    <DIR>          .
    04/22/2011  01:20 PM    <DIR>          ..
    01/31/2011  03:59 PM           515,704 cxx.lib
    01/31/2011  04:23 PM           137,434 fmpich2.lib
    01/31/2011  04:25 PM           410,982 fmpich2g.lib
    01/31/2011  04:29 PM           162,690 fmpich2s.lib
    01/31/2011  04:53 PM                 0 libfmpich2g.a
    01/31/2011  04:53 PM                 0 libmpi.a
    01/31/2011  04:53 PM           215,528 libmpicxx.a
    01/31/2011  04:16 PM            10,618 mpe.lib
    01/31/2011  04:46 PM           135,434 mpi.lib
                   9 File(s)      1,588,390 bytes
                   2 Dir(s)  221,505,835,008 bytes free

Include:

     Volume in drive C has no label.
     Volume Serial Number is 5406-5C5C
    
     Directory of C:\Program Files\MPICH2\include
    
    02/01/2011  05:38 PM    <DIR>          .
    02/01/2011  05:38 PM    <DIR>          ..
    11/17/2009  09:46 PM             4,857 clog_commset.h
    11/02/2007  05:50 PM               696 clog_const.h
    01/31/2011  03:50 PM               731 clog_inttypes.h
    11/17/2009  09:46 PM             1,353 clog_uuid.h
    10/21/2010  01:20 PM               355 mpe.h
    11/17/2009  09:46 PM            11,102 mpe_log.h
    11/02/2007  05:50 PM             1,833 mpe_logf.h
    11/17/2009  09:46 PM             1,322 mpe_misc.h
    01/31/2011  03:50 PM            57,128 mpi.h
    01/31/2011  04:23 PM             3,251 mpi.mod
    01/31/2011  03:50 PM            97,267 mpicxx.h
    01/31/2011  03:51 PM            19,051 mpif.h
    01/31/2011  03:50 PM            16,765 mpio.h
    01/31/2011  04:23 PM            13,668 mpi_base.mod
    01/31/2011  04:23 PM            30,866 mpi_constants.mod
    01/31/2011  04:23 PM             7,802 mpi_sizeofs.mod
                  16 File(s)        268,047 bytes
                   2 Dir(s)  221,505,830,912 bytes free

Is there anything here that might be recognizably missing?

Note that `C:\Program Files\MPICH2\bin` is already in PATH, although perhaps I am missing other environment variables.

I am quite stumped at this point. Just about any suggestion would be helpful.

Sincerely, Barend.

PS: This should probably be tagged ""haskell-mpi"", but I'm not allowed to make new tags. I guess nobody else is really using it yet.",3
11236283,06/27/2012 23:42:12,1417244,05/25/2012 11:15:03,195,2,palindrome - Functional Programming (haskell),What is the crucial technical reason/feature behind palindrome gets so many mentions in Functional Programming (haskell)?,haskell,palindrome,,,,06/27/2012 23:52:06,not a real question,1,16,5,palindrome - Functional Programming (haskell) What is the crucial technical reason/feature behind palindrome gets so many mentions in Functional Programming (haskell)?,2
2206489,02/05/2010 10:22:04,149901,08/03/2009 17:36:11,250,16,Haskell speculative parallel execution,"I am thinking about exploiting parallelism for one problem I am trying to solve. The problem is roughly this: given input (sequence of points) find a best output (biggest triangle composed from these points, longest line etc.). There are 3 different 'shapes' to be found in the sequence of points, however I am interested only in the one with 'best score' (usually some form of 'length' times coefficient). Let's call the shapes S1, S2, S3.

I have 2 different algorithms for solving S1 - 'S1a' is in O(n<sup>2</sup>), 'S1b' mostly behaves better, but the worst case is about O(n<sup>4</sup>). 

First question: is there some simple way to run S1a and S1b in parallel, use the one that finishes first and stop the other? As far as I am reading documentation, this could be programmed using some forkIO and killing the threads when a result is obtained - just asking if there is something simpler?

Second question - much tougher: I am calling the optimization function this way:

    optimize valueOfSx input

valueOfSx is specific for every shape and returns a 'score' (or a guess of a score) a possible solution. Optimize calls this function to find out best solution. What I am interested in is:

    s1 = optimize valueOfS1 input
    s2 = optimize valueOfS2 input
    s3 = optimize valueOfS3 input
    <- maximum [s1,s2,s3]

However, if I know the result of S1, I can discard all solutions that are smaller, thus making s2 and s3 converge faster if no better solution exists (or at least throw away the worst solutions and thus be more space efficient). What I am doing now is:

    zeroOn threshold f = decide .f
        where decide x = if (x < threshold) then 0 else x
    s1 = optimize valueOfS1 input
    s2 = optimize (zeroOn s1 valueOfS2) input
    s3 = optimize (zeroOn (max s1 s2) valueOfS3) input

The question is: can I run e.g. S2 and S3 in parallel in such a way, that whichever finishes first would update the 'threshold' parameter of the score function running in the other thread? Something in the sense of:

    threshold = 0
    firstSolution = firstOf (optimize (zeroOn threshold valueOfS2), optimize (zeroOn threshold valueofS3))
    update threshold from firstSolution
    wait for second solution

",haskell,speculative,parallel-processing,,,,open,0,411,4,"Haskell speculative parallel execution I am thinking about exploiting parallelism for one problem I am trying to solve. The problem is roughly this: given input (sequence of points) find a best output (biggest triangle composed from these points, longest line etc.). There are 3 different 'shapes' to be found in the sequence of points, however I am interested only in the one with 'best score' (usually some form of 'length' times coefficient). Let's call the shapes S1, S2, S3.

I have 2 different algorithms for solving S1 - 'S1a' is in O(n<sup>2</sup>), 'S1b' mostly behaves better, but the worst case is about O(n<sup>4</sup>). 

First question: is there some simple way to run S1a and S1b in parallel, use the one that finishes first and stop the other? As far as I am reading documentation, this could be programmed using some forkIO and killing the threads when a result is obtained - just asking if there is something simpler?

Second question - much tougher: I am calling the optimization function this way:

    optimize valueOfSx input

valueOfSx is specific for every shape and returns a 'score' (or a guess of a score) a possible solution. Optimize calls this function to find out best solution. What I am interested in is:

    s1 = optimize valueOfS1 input
    s2 = optimize valueOfS2 input
    s3 = optimize valueOfS3 input
    <- maximum [s1,s2,s3]

However, if I know the result of S1, I can discard all solutions that are smaller, thus making s2 and s3 converge faster if no better solution exists (or at least throw away the worst solutions and thus be more space efficient). What I am doing now is:

    zeroOn threshold f = decide .f
        where decide x = if (x < threshold) then 0 else x
    s1 = optimize valueOfS1 input
    s2 = optimize (zeroOn s1 valueOfS2) input
    s3 = optimize (zeroOn (max s1 s2) valueOfS3) input

The question is: can I run e.g. S2 and S3 in parallel in such a way, that whichever finishes first would update the 'threshold' parameter of the score function running in the other thread? Something in the sense of:

    threshold = 0
    firstSolution = firstOf (optimize (zeroOn threshold valueOfS2), optimize (zeroOn threshold valueofS3))
    update threshold from firstSolution
    wait for second solution

",3
7409788,09/13/2011 23:46:03,681337,03/29/2011 04:12:20,16,0,How to Handle Exceptions with http-enumerator,"Haskell newbie here. I'm attempting to use the http-enumerator to query a service via XML over HTTP. I'm able to connect and send an xml-formatted request, and to receive the xml-formatted response. 

When the query is successful, the server sends back a response starting with <SYSTEM... When the request generates an error on the server due to either an invalid query or authentication timeout, the response starts with <FAULT...  Fault codes and messages are in the FAULT xml document.

What I'm struggling with is the correct way to handle the exceptions indicated in the FAULT document. I'm trying to use `Either`, but without success. 

What I have below compiles in ghci:

    import Network.HTTP.Enumerator 
    import Network.HTTP.Types
    
    import qualified Data.ByteString.Lazy as L 
    import Data.ByteString.UTF8
    
    import Text.XML.Light
    
    hostname = ""https://server...""
    
    doPost username password token = do
    
        let q = QName ""SYSTEM"" Nothing Nothing
    
        let attribs = [Attr {attrKey = QName ""user"" Nothing Nothing, attrVal = username},
                       Attr {attrKey = QName ""password"" Nothing Nothing, attrVal = password},
                       Attr {attrKey = QName ""token"" Nothing Nothing, attrVal = token}]
    
        let doc = Element {elName=q, elAttribs=attribs, elContent= [], elLine=Nothing}
    
        req0 <- parseUrl hostname 
     
        let req = req0 { method = methodPost 
                      , requestHeaders = [(""Content-Type"", ""text/xml"")]   
                      , requestBody = RequestBodyBS $ fromString $ showTopElement doc
                      } 
      
        res <- withManager $ httpLbs req 
    
        let status = Network.HTTP.Enumerator.statusCode res
        let content = responseBody res
    
        -- this is where I would check for different fault codes using a case statement
        if content == ""<FAULT/>""
    		then Left ""error""
    		else Right content

However, when I attempt to run it in ghci I get the following:

    *Main> doPost ""user"" ""password"" """"
    
    <interactive>:1:1:
        No instances for (Control.Failure.Failure
                            HttpException (Either a0),
                          Control.Monad.IO.Control.MonadControlIO (Either a0))
          arising from a use of `doPost'
        Possible fix:
          add instance declarations for
          (Control.Failure.Failure HttpException (Either a0),
           Control.Monad.IO.Control.MonadControlIO (Either a0))
        In the expression: doPost ""user"" ""password"" """"
        In an equation for `it': it = doPost ""user"" ""password"" """"

What is the best way to handle exceptions in a case like this?

Thanks in advance.
Neil



",haskell,,,,,,open,0,720,6,"How to Handle Exceptions with http-enumerator Haskell newbie here. I'm attempting to use the http-enumerator to query a service via XML over HTTP. I'm able to connect and send an xml-formatted request, and to receive the xml-formatted response. 

When the query is successful, the server sends back a response starting with <SYSTEM... When the request generates an error on the server due to either an invalid query or authentication timeout, the response starts with <FAULT...  Fault codes and messages are in the FAULT xml document.

What I'm struggling with is the correct way to handle the exceptions indicated in the FAULT document. I'm trying to use `Either`, but without success. 

What I have below compiles in ghci:

    import Network.HTTP.Enumerator 
    import Network.HTTP.Types
    
    import qualified Data.ByteString.Lazy as L 
    import Data.ByteString.UTF8
    
    import Text.XML.Light
    
    hostname = ""https://server...""
    
    doPost username password token = do
    
        let q = QName ""SYSTEM"" Nothing Nothing
    
        let attribs = [Attr {attrKey = QName ""user"" Nothing Nothing, attrVal = username},
                       Attr {attrKey = QName ""password"" Nothing Nothing, attrVal = password},
                       Attr {attrKey = QName ""token"" Nothing Nothing, attrVal = token}]
    
        let doc = Element {elName=q, elAttribs=attribs, elContent= [], elLine=Nothing}
    
        req0 <- parseUrl hostname 
     
        let req = req0 { method = methodPost 
                      , requestHeaders = [(""Content-Type"", ""text/xml"")]   
                      , requestBody = RequestBodyBS $ fromString $ showTopElement doc
                      } 
      
        res <- withManager $ httpLbs req 
    
        let status = Network.HTTP.Enumerator.statusCode res
        let content = responseBody res
    
        -- this is where I would check for different fault codes using a case statement
        if content == ""<FAULT/>""
    		then Left ""error""
    		else Right content

However, when I attempt to run it in ghci I get the following:

    *Main> doPost ""user"" ""password"" """"
    
    <interactive>:1:1:
        No instances for (Control.Failure.Failure
                            HttpException (Either a0),
                          Control.Monad.IO.Control.MonadControlIO (Either a0))
          arising from a use of `doPost'
        Possible fix:
          add instance declarations for
          (Control.Failure.Failure HttpException (Either a0),
           Control.Monad.IO.Control.MonadControlIO (Either a0))
        In the expression: doPost ""user"" ""password"" """"
        In an equation for `it': it = doPost ""user"" ""password"" """"

What is the best way to handle exceptions in a case like this?

Thanks in advance.
Neil



",1
6538384,06/30/2011 17:01:43,823482,06/30/2011 17:01:43,1,0,Help with program in Haskell,"I need your help.

I'm a beginner and I was given this exercise to do in Haskell.

I have no idea about how to start...
Any suggestions will be highly appreciated

THANK YOU , Carlos



    Given a CFG (Context - Free Grammar) G
    and also a PDA (Push Down Automata) M
    
    Define a Haskell function called fromGtoM that accepts the alphabet T (terminals)
    
    and the list of productions of P and returns the list of instances
    of the transition relation Delta
    
    Use the following types:
    type T = [Char]
    type P = (Char , Maybe String)
    type Delta = ((Maybe Char, Char), Maybe String)
    
    fromGtoM :: T--> [P]--> [Delta]
    
    A pair (A,B) of type P denotes the production A-->B
    The constructor Nothing represents the empty string
    The constructor Just String describes non-empty expansions",haskell,,,,,07/02/2011 15:25:37,not a real question,1,188,5,"Help with program in Haskell I need your help.

I'm a beginner and I was given this exercise to do in Haskell.

I have no idea about how to start...
Any suggestions will be highly appreciated

THANK YOU , Carlos



    Given a CFG (Context - Free Grammar) G
    and also a PDA (Push Down Automata) M
    
    Define a Haskell function called fromGtoM that accepts the alphabet T (terminals)
    
    and the list of productions of P and returns the list of instances
    of the transition relation Delta
    
    Use the following types:
    type T = [Char]
    type P = (Char , Maybe String)
    type Delta = ((Maybe Char, Char), Maybe String)
    
    fromGtoM :: T--> [P]--> [Delta]
    
    A pair (A,B) of type P denotes the production A-->B
    The constructor Nothing represents the empty string
    The constructor Just String describes non-empty expansions",1
7490768,09/20/2011 19:34:45,208257,11/10/2009 23:19:14,4451,123,What are Haskell's strictness points?,"We all know (or should know) that Haskell is lazy by default. Nothing is evaluated until it must be evaluated. So when must something be evaluated? There are points where Haskell must be strict. I call these ""strictness points"", although this particular term isn't as widespread as I had thought. According to me:

> Reduction (or evaluation) in Haskell *only* occurs at strictness points.

So the question is: **what, *precisely*, are Haskell's strictness points?** My intuition says that `main`, `seq` / bang patterns, pattern matching, and any `IO` action performed via `main` are the primary strictness points, but I don't really know why I know that. Please point me to some docs (Haskell 2010?) and explain to me, as comprehensively as possible, what I need to know to feel confident in my knowledge about Haskell's strictness points. Brownie points if you can explain why these particular design decisions were made in the first place. (I mean, beyond ""we wanted Haskell to be like Miranda and Miranda is lazy"".)

(Also, if they're not called ""strictness points"", what *are* they called?)

I imagine a good answer will include some discussion about WHNF and so on. I also imagine it might touch on lambda calculus. I'm hoping for really, really good thorough answers, because I'm sure you guys can explain this. I *will* put a bounty on this question if necessary.",haskell,language-design,lazy-evaluation,strict,,,open,0,224,5,"What are Haskell's strictness points? We all know (or should know) that Haskell is lazy by default. Nothing is evaluated until it must be evaluated. So when must something be evaluated? There are points where Haskell must be strict. I call these ""strictness points"", although this particular term isn't as widespread as I had thought. According to me:

> Reduction (or evaluation) in Haskell *only* occurs at strictness points.

So the question is: **what, *precisely*, are Haskell's strictness points?** My intuition says that `main`, `seq` / bang patterns, pattern matching, and any `IO` action performed via `main` are the primary strictness points, but I don't really know why I know that. Please point me to some docs (Haskell 2010?) and explain to me, as comprehensively as possible, what I need to know to feel confident in my knowledge about Haskell's strictness points. Brownie points if you can explain why these particular design decisions were made in the first place. (I mean, beyond ""we wanted Haskell to be like Miranda and Miranda is lazy"".)

(Also, if they're not called ""strictness points"", what *are* they called?)

I imagine a good answer will include some discussion about WHNF and so on. I also imagine it might touch on lambda calculus. I'm hoping for really, really good thorough answers, because I'm sure you guys can explain this. I *will* put a bounty on this question if necessary.",4
10261541,04/21/2012 17:58:29,1201199,02/10/2012 03:45:39,1,0,Haskell sets and graphs,"I am horrifically stuck on my homework... if i don't pass this assignment it will take me an extra semester to graduate (long story). I know this site frowns upon giving homework answers, and I totally agree. So I don't want straight out answers, just some good guidelines as my professor sucks... I am hyper linking to the assignment, and so far, I have the first set of problems done, but I am completely dumbfounded by the sections on sets, and graphs, I usually have no problem picking up new languages, but this haskell stuff is just killing me, and no matter how much I read up on it, I can't get anywhere...

Please help!!! 

http://charity.cs.uwlax.edu/cs421/Homeworks/Homework5.pdf",haskell,,,,,04/22/2012 18:19:16,not a real question,1,115,4,"Haskell sets and graphs I am horrifically stuck on my homework... if i don't pass this assignment it will take me an extra semester to graduate (long story). I know this site frowns upon giving homework answers, and I totally agree. So I don't want straight out answers, just some good guidelines as my professor sucks... I am hyper linking to the assignment, and so far, I have the first set of problems done, but I am completely dumbfounded by the sections on sets, and graphs, I usually have no problem picking up new languages, but this haskell stuff is just killing me, and no matter how much I read up on it, I can't get anywhere...

Please help!!! 

http://charity.cs.uwlax.edu/cs421/Homeworks/Homework5.pdf",1
6222521,06/03/2011 02:55:33,761180,05/19/2011 13:41:21,264,16,Haskell do syntax and I/O,"I was playing around with a simple program in Haskell:


    hello :: String -> String
    hello s = ""Hello, "" ++ (trim s) ++ ""!\n""
    
    trim :: String -> String
    trim [] = []
    trim s = head $ words s
    
    main :: IO()
    main = do putStr ""\nPlease enter your name: ""
              name <- getLine
              hstring <- return $ hello name
              putStr hstring

This is the output I am expecting:

    
    Please enter your name: John Doe
    Hello, John!

This works as expected when I load the program into ghci.  However when I compile the program using

    ghc -o hello.exe hello.hs

it starts, waits for input, and then prints both prompts at the same time:

    John Doe
    Please enter your name: Hello, John!

Why is the behavior different between the interactive environment and compiler, and how can I make the compiler do what I want?

Thanks in advance for the help!",haskell,ghc,ghci,,,,open,0,234,5,"Haskell do syntax and I/O I was playing around with a simple program in Haskell:


    hello :: String -> String
    hello s = ""Hello, "" ++ (trim s) ++ ""!\n""
    
    trim :: String -> String
    trim [] = []
    trim s = head $ words s
    
    main :: IO()
    main = do putStr ""\nPlease enter your name: ""
              name <- getLine
              hstring <- return $ hello name
              putStr hstring

This is the output I am expecting:

    
    Please enter your name: John Doe
    Hello, John!

This works as expected when I load the program into ghci.  However when I compile the program using

    ghc -o hello.exe hello.hs

it starts, waits for input, and then prints both prompts at the same time:

    John Doe
    Please enter your name: Hello, John!

Why is the behavior different between the interactive environment and compiler, and how can I make the compiler do what I want?

Thanks in advance for the help!",3
11304634,07/03/2012 04:48:59,74865,03/06/2009 20:16:16,2685,82,Reduce the size of the Snap binary?,"When I compile my [Snap][1] webapp (to deploy it to production server), it comes out to 19MB!
What gives? Is this normal? Am I doing something wrong?

My site only has 3 static pages, basically [snap's init project][2].


  [1]: http://snapframework.com/
  [2]: http://snapframework.com/docs/quickstart",haskell,snap,,,,,open,0,42,7,"Reduce the size of the Snap binary? When I compile my [Snap][1] webapp (to deploy it to production server), it comes out to 19MB!
What gives? Is this normal? Am I doing something wrong?

My site only has 3 static pages, basically [snap's init project][2].


  [1]: http://snapframework.com/
  [2]: http://snapframework.com/docs/quickstart",2
8927010,01/19/2012 13:40:29,955679,09/20/2011 21:08:03,229,0,Compiling to GHC Core,"I would like to create a frontend for a simple language that would produce GHC Core. I would like to then take this output and run it through the normal GHC pipeline. According to [this page](http://www.haskell.org/ghc/docs/7.2.2/html/users_guide/ext-core.html), it is not directly possible from the ghc command. I am wondering if there is _any_ way to do it.

I am ideally expecting a few function calls to the ghc-api but I am also open to any suggestions that include (not-so-extensive) hacking in the source of GHC. Any pointers would help!",haskell,ghc,ghc-api,,,,open,0,87,4,"Compiling to GHC Core I would like to create a frontend for a simple language that would produce GHC Core. I would like to then take this output and run it through the normal GHC pipeline. According to [this page](http://www.haskell.org/ghc/docs/7.2.2/html/users_guide/ext-core.html), it is not directly possible from the ghc command. I am wondering if there is _any_ way to do it.

I am ideally expecting a few function calls to the ghc-api but I am also open to any suggestions that include (not-so-extensive) hacking in the source of GHC. Any pointers would help!",3
8261345,11/24/2011 18:38:31,74865,03/06/2009 20:16:16,1054,80,"Why Haskell range need spaces when using LT, GT?","Why is it that when I do range in Haskell, this works:

    [LT .. GT]

but this doesn't:

    [LT..GT]

However, When I use Ints, the second form (without spaces) works:

    [1..3]",haskell,,,,,,open,0,38,9,"Why Haskell range need spaces when using LT, GT? Why is it that when I do range in Haskell, this works:

    [LT .. GT]

but this doesn't:

    [LT..GT]

However, When I use Ints, the second form (without spaces) works:

    [1..3]",1
10733067,05/24/2012 07:32:09,139117,07/16/2009 01:12:31,3349,70,A sandboxed version of Haskell,"Is there a sandboxed version of Haskell that prevents dangerous code from being run? I stumbled across [mueval](http://hackage.haskell.org/package/mueval-0.4.6) and [Safe Haskell](http://hackage.haskell.org/trac/ghc/wiki/SafeHaskell/)...mueval only takes expressions, and Safe Haskell hasn't been implemented yet. Is there some other alternative for sandboxing Haskell scripts? It seems like preventing IO should be enough. Is there an easy way to prevent all IO in a Haskell script?",haskell,sandbox,,,,,open,0,61,5,"A sandboxed version of Haskell Is there a sandboxed version of Haskell that prevents dangerous code from being run? I stumbled across [mueval](http://hackage.haskell.org/package/mueval-0.4.6) and [Safe Haskell](http://hackage.haskell.org/trac/ghc/wiki/SafeHaskell/)...mueval only takes expressions, and Safe Haskell hasn't been implemented yet. Is there some other alternative for sandboxing Haskell scripts? It seems like preventing IO should be enough. Is there an easy way to prevent all IO in a Haskell script?",2
1531039,10/07/2009 11:25:12,128138,06/24/2009 10:44:37,707,46,Guard is skipped when it should not be.,"I have the following snippet of code

    module Main where
    
    main :: IO()
    main = do
       ne <- getLine
       c <- getLine
       putStrLn $ show $ foo c (words ne)
    
    foo :: String -> [String] -> Integer
    foo c (n:e:_) =
       foo' (read c::Integer) (read e::Integer) (read n::Integer) [2..]
       where foo' c e n (x:xs)
          | mod (x^e) n == c = mod x n
          | otherwise = foo' c e n xs

Which works as expected except when given the following input:

    9 3 
    2

The first guard is skipped and an infinite loop is entered.
The way I see this is that
`foo'` should first be called with `2 3 9` which would result in `mod (2^9) 3 == 2` which is true and should result in the value `mod 2 9` but this is not the case.

I am sure I am missing something trivial here, but I just cant see it...
",haskell,,,,,,open,0,228,8,"Guard is skipped when it should not be. I have the following snippet of code

    module Main where
    
    main :: IO()
    main = do
       ne <- getLine
       c <- getLine
       putStrLn $ show $ foo c (words ne)
    
    foo :: String -> [String] -> Integer
    foo c (n:e:_) =
       foo' (read c::Integer) (read e::Integer) (read n::Integer) [2..]
       where foo' c e n (x:xs)
          | mod (x^e) n == c = mod x n
          | otherwise = foo' c e n xs

Which works as expected except when given the following input:

    9 3 
    2

The first guard is skipped and an infinite loop is entered.
The way I see this is that
`foo'` should first be called with `2 3 9` which would result in `mod (2^9) 3 == 2` which is true and should result in the value `mod 2 9` but this is not the case.

I am sure I am missing something trivial here, but I just cant see it...
",1
11604492,07/22/2012 22:26:34,172754,09/13/2009 14:02:55,142,3,haskell model export error,"Reference [http://stackoverflow.com/questions/11596234/haskell-facebook-example][1] works perfect, but now I can't figure out how to split it in a separate module so I can do something useful with it. Also I can't figure out what type I need to put for fbEmail fbUrl and if I need to put OverloadedStrings in every module?

login.hs

    {-# LANGUAGE OverloadedStrings #-}
    module Login (
        fbUrl,
        fbEmail
    ) where
    
    import qualified Facebook as FB
    import Network.HTTP.Conduit (withManager)
    
    app :: FB.Credentials
    app = FB.Credentials ""localhost"" ""249348058430770"" ""...""
    
    url :: FB.RedirectUrl
    url = ""http://localhost/fb""
    
    perms :: [FB.Permission]
    perms = [""user_about_me"", ""email""]
    
    --fbUrl :: FB.FacebookT FB.Auth m Text
    fbUrl = FB.getUserAccessTokenStep1 url perms
    
    --fbEmail :: Maybe FB.Text
    fbEmail c = withManager $ \manager -> FB.runFacebookT app manager $ do
        t <- FB.getUserAccessTokenStep2 url [c]
        u <- FB.getUser ""me"" [] (Just t)
        FB.userEmail u

main.hs

    {-# LANGUAGE OverloadedStrings #-}
    module Main (
      main
    ) where
    
    import Login
    import Control.Monad.IO.Class (liftIO)
    import System.IO
    
    main :: IO ()
    main = do
        u <- fbUrl
        liftIO $ print u
        a <- liftIO $ readLn
        e <- fbEmail a
        liftIO $ print e

I get the following error 

    src/Login.hs:26:5:
        Couldn't match expected type `FB.FacebookT FB.Auth m0 a0'
                    with actual type `Maybe text-0.11.2.0:Data.Text.Internal.Text'
        In the return type of a call of `FB.userEmail'
        In a stmt of a 'do' block: FB.userEmail u
        In the second argument of `($)', namely
          `do { t <- FB.getUserAccessTokenStep2 url [c];
                u <- FB.getUser ""me"" [] (Just t);
                FB.userEmail u }'

  [1]: http://stackoverflow.com/questions/11596234/haskell-facebook-example
",haskell,,,,,07/24/2012 00:58:18,too localized,1,505,4,"haskell model export error Reference [http://stackoverflow.com/questions/11596234/haskell-facebook-example][1] works perfect, but now I can't figure out how to split it in a separate module so I can do something useful with it. Also I can't figure out what type I need to put for fbEmail fbUrl and if I need to put OverloadedStrings in every module?

login.hs

    {-# LANGUAGE OverloadedStrings #-}
    module Login (
        fbUrl,
        fbEmail
    ) where
    
    import qualified Facebook as FB
    import Network.HTTP.Conduit (withManager)
    
    app :: FB.Credentials
    app = FB.Credentials ""localhost"" ""249348058430770"" ""...""
    
    url :: FB.RedirectUrl
    url = ""http://localhost/fb""
    
    perms :: [FB.Permission]
    perms = [""user_about_me"", ""email""]
    
    --fbUrl :: FB.FacebookT FB.Auth m Text
    fbUrl = FB.getUserAccessTokenStep1 url perms
    
    --fbEmail :: Maybe FB.Text
    fbEmail c = withManager $ \manager -> FB.runFacebookT app manager $ do
        t <- FB.getUserAccessTokenStep2 url [c]
        u <- FB.getUser ""me"" [] (Just t)
        FB.userEmail u

main.hs

    {-# LANGUAGE OverloadedStrings #-}
    module Main (
      main
    ) where
    
    import Login
    import Control.Monad.IO.Class (liftIO)
    import System.IO
    
    main :: IO ()
    main = do
        u <- fbUrl
        liftIO $ print u
        a <- liftIO $ readLn
        e <- fbEmail a
        liftIO $ print e

I get the following error 

    src/Login.hs:26:5:
        Couldn't match expected type `FB.FacebookT FB.Auth m0 a0'
                    with actual type `Maybe text-0.11.2.0:Data.Text.Internal.Text'
        In the return type of a call of `FB.userEmail'
        In a stmt of a 'do' block: FB.userEmail u
        In the second argument of `($)', namely
          `do { t <- FB.getUserAccessTokenStep2 url [c];
                u <- FB.getUser ""me"" [] (Just t);
                FB.userEmail u }'

  [1]: http://stackoverflow.com/questions/11596234/haskell-facebook-example
",1
6487360,06/26/2011 23:19:33,445107,09/11/2010 13:42:25,23,0,Haskell: can Lazy Evaluation help to stop a voting earlier?,"Suppose I have 10 heavy different functions (parallel or not) deciding about the same problem.
Is there a good way to implement a voting scheme that lazy-automatically realizes when a majority is reached and no more calculation is needed?

obs.: This is more a question about scope/limits of lazy ev.
Of course a simple ""if"" could detect a majority.

Thanks",haskell,lazy-evaluation,,,,,open,0,56,10,"Haskell: can Lazy Evaluation help to stop a voting earlier? Suppose I have 10 heavy different functions (parallel or not) deciding about the same problem.
Is there a good way to implement a voting scheme that lazy-automatically realizes when a majority is reached and no more calculation is needed?

obs.: This is more a question about scope/limits of lazy ev.
Of course a simple ""if"" could detect a majority.

Thanks",2
6052670,05/19/2011 00:56:52,759880,05/18/2011 19:58:07,35,0,Haskell function type question,"I'm beginning Haskell... I tried to write the following trivial function in two different ways, letting Haskell decide the types, and the type system does something different in each case. What is the explanation for that behavior?

    Prelude> let f x = 2 * x
    Prelude> let g = (2*)
    Prelude> :info f
    f :: Num a => a -> a 	-- Defined at <interactive>:1:5
    Prelude> :info g
    g :: Integer -> Integer 	-- Defined at <interactive>:1:5

Thanks!",haskell,types,,,,,open,0,95,4,"Haskell function type question I'm beginning Haskell... I tried to write the following trivial function in two different ways, letting Haskell decide the types, and the type system does something different in each case. What is the explanation for that behavior?

    Prelude> let f x = 2 * x
    Prelude> let g = (2*)
    Prelude> :info f
    f :: Num a => a -> a 	-- Defined at <interactive>:1:5
    Prelude> :info g
    g :: Integer -> Integer 	-- Defined at <interactive>:1:5

Thanks!",2
9914206,03/28/2012 19:16:34,1299036,03/28/2012 18:57:56,1,0,need to filter and make lisk in haskell,"I need to write a function that returns a list of adjacent cells
I already wrote a function that checks if two coordinates are adjacent or not.

    getAdj :: Coord -> World -> [Cell]

    type World = [Cell]
    data Cell = Cell {cellCoord :: Coord, cellState :: CellState}
    deriving (Show, Read)
    data Coord = Coord {xCoord, yCoord :: Integer}
    deriving (Ord, Eq, Show, Read)",haskell,,,,,03/30/2012 12:21:17,not a real question,1,81,8,"need to filter and make lisk in haskell I need to write a function that returns a list of adjacent cells
I already wrote a function that checks if two coordinates are adjacent or not.

    getAdj :: Coord -> World -> [Cell]

    type World = [Cell]
    data Cell = Cell {cellCoord :: Coord, cellState :: CellState}
    deriving (Show, Read)
    data Coord = Coord {xCoord, yCoord :: Integer}
    deriving (Ord, Eq, Show, Read)",1
11111642,06/20/2012 01:22:02,525980,12/01/2010 02:10:33,2915,54,Haskell: foldl' accumulator parameter,"I've been asking a few questions about strictness, but I think I've missed the mark before. Hopefully this is more precise.

Lets say we have:

    n = 1000000
    f z = foldl' (\(x1, x2) y -> (x1 + y, y - x2)) z [1..n]

Without changing `f`, what should I set

    z = ...

So that `f z` does not overflow the stack? (i.e. runs in constant space regardless of the size of n)
",haskell,lazy-evaluation,,,,,open,0,80,4,"Haskell: foldl' accumulator parameter I've been asking a few questions about strictness, but I think I've missed the mark before. Hopefully this is more precise.

Lets say we have:

    n = 1000000
    f z = foldl' (\(x1, x2) y -> (x1 + y, y - x2)) z [1..n]

Without changing `f`, what should I set

    z = ...

So that `f z` does not overflow the stack? (i.e. runs in constant space regardless of the size of n)
",2
7240407,08/30/2011 08:14:24,208437,11/11/2009 06:10:37,45,0,Inaccessible fields in records,"A bit more [indirectly] regarding my [previous question][1]: there, my definition of lens was

    data Iso α β = Iso { fw :: α -> β, bw :: β -> α }
    data Lens α β = forall r. Lens (Iso α (β, r))

And this is fine, as long as the module is imported unqualified. Problems begin with the case where it is, and, for `import qualified Util.Lens as L`, I get an error about `fw` not being a (visible) field of constructor `Iso`. The code itself is trivial,

    data BValue = BValue { p :: Float, d :: Float, q :: Float } deriving Show
    pLens :: L.Lens BValue Float
    pLens = L.Lens (L.Iso { fw = pFwd, bw = pBwd })

The Util.Lens exports both `Lens(..)` and `Iso(..)`. TIA.
  [1]: http://stackoverflow.com/questions/7233587/isomorphism-lenses",haskell,,,,,,open,0,148,4,"Inaccessible fields in records A bit more [indirectly] regarding my [previous question][1]: there, my definition of lens was

    data Iso α β = Iso { fw :: α -> β, bw :: β -> α }
    data Lens α β = forall r. Lens (Iso α (β, r))

And this is fine, as long as the module is imported unqualified. Problems begin with the case where it is, and, for `import qualified Util.Lens as L`, I get an error about `fw` not being a (visible) field of constructor `Iso`. The code itself is trivial,

    data BValue = BValue { p :: Float, d :: Float, q :: Float } deriving Show
    pLens :: L.Lens BValue Float
    pLens = L.Lens (L.Iso { fw = pFwd, bw = pBwd })

The Util.Lens exports both `Lens(..)` and `Iso(..)`. TIA.
  [1]: http://stackoverflow.com/questions/7233587/isomorphism-lenses",1
9275105,02/14/2012 10:13:41,286871,03/05/2010 06:09:23,6621,175,How can I set an environment variable?,"I can easily read an environment variable using `System.Environment.getEnv`. However, `System.Environment` does not have any corresponding `setEnv` function (as far as I could tell).

How do I set an environment variable from a Haskell program? I would prefer a cross-platform solution. (So just executing `export VAR=val` doesn't really cut it.)",haskell,cross-platform,environment-variables,,,,open,0,49,7,"How can I set an environment variable? I can easily read an environment variable using `System.Environment.getEnv`. However, `System.Environment` does not have any corresponding `setEnv` function (as far as I could tell).

How do I set an environment variable from a Haskell program? I would prefer a cross-platform solution. (So just executing `export VAR=val` doesn't really cut it.)",3
8553016,12/18/2011 16:21:31,938694,09/10/2011 23:47:06,100,5,GHC - getting weird dynamic linker errors (libffi.so.4),"Whenever I try to compile an executable with ghc --make, I am getting the following error when trying to execute the program afterwards, despite there being no errors upon compilation:

    ./main: error while loading shared libraries: libffi.so.4: cannot open shared object  file: No such file or directory

(It works fine if I load the programs into ghci though)

Here's a minimal example program that used to work, but now doesn't (I don't know why)

    module Main(main)
    where
    
    main = do c <- getContents
              putStr c

I am using GHC 7.0.3, on Ubuntu 11.10. Help would be appreciated.",haskell,ghc,,,,,open,0,124,8,"GHC - getting weird dynamic linker errors (libffi.so.4) Whenever I try to compile an executable with ghc --make, I am getting the following error when trying to execute the program afterwards, despite there being no errors upon compilation:

    ./main: error while loading shared libraries: libffi.so.4: cannot open shared object  file: No such file or directory

(It works fine if I load the programs into ghci though)

Here's a minimal example program that used to work, but now doesn't (I don't know why)

    module Main(main)
    where
    
    main = do c <- getContents
              putStr c

I am using GHC 7.0.3, on Ubuntu 11.10. Help would be appreciated.",2
8935323,01/20/2012 00:26:16,618815,01/03/2011 04:06:55,771,1,Detecting cycles of a graph(maybe directed or undirected) in Haskell,"I started to solve this problem in imperative way and it works. However, it takes me triple time to figure out how to do it Haskell and failed! Suppose I represent graph as list (or map) of a node with its adjacency nodes.

    type Node = Int
    type Graph = [Node, [Node]]

Note the above representation can be directed or undirected. 
I also pass the seen set and finished set as arguments(since no side effects are preferred in functional) when doing exploration to detect back track edge. However, I just can't do it in Haskell! 
I know there may be using State monad, but that thing hasn't come through my mind quite well neither. 
I am curious to know how could anyone guide me how to do it in ""beautiful"" Haskell style?


 ",haskell,,,,,,open,0,138,10,"Detecting cycles of a graph(maybe directed or undirected) in Haskell I started to solve this problem in imperative way and it works. However, it takes me triple time to figure out how to do it Haskell and failed! Suppose I represent graph as list (or map) of a node with its adjacency nodes.

    type Node = Int
    type Graph = [Node, [Node]]

Note the above representation can be directed or undirected. 
I also pass the seen set and finished set as arguments(since no side effects are preferred in functional) when doing exploration to detect back track edge. However, I just can't do it in Haskell! 
I know there may be using State monad, but that thing hasn't come through my mind quite well neither. 
I am curious to know how could anyone guide me how to do it in ""beautiful"" Haskell style?


 ",1
6269565,06/07/2011 17:56:40,787903,06/07/2011 17:03:20,1,0,Delete the entered number or char from a list in Haskell,"i want a script produce this output
comment
give a list and give a number and produce this output

Main>delete [1,3,4,1] 1 

output : [3,4]

or

Main>delete ['a','b','a','c'] 'c' 

output : ['a','b','a']


thank you",haskell,,,,,06/09/2011 19:37:46,not a real question,1,28,11,"Delete the entered number or char from a list in Haskell i want a script produce this output
comment
give a list and give a number and produce this output

Main>delete [1,3,4,1] 1 

output : [3,4]

or

Main>delete ['a','b','a','c'] 'c' 

output : ['a','b','a']


thank you",1
11173102,06/23/2012 21:24:15,1250537,03/05/2012 18:43:12,21,3,Haskell code examples - small to medium,"I am reading hs-webdriver a wrapper for selenium browser automation library. I have read one Haskell book in the past, and am almost done with Learn You A Haskell. The hs-webdriver is a little difficult for me to follow, probably because almost all of it relies on a monad for sending http requests. Can you guys point me towards smaller pieces of real haskell code, so I can build up to the level of maturity of hs-webdriver? Probably other standard library modules you found helpful to read when you were first learning haskell. I know scheme well and clojure somewhat well. I think I have some more getting used to type classes, type constructors, and monads until I feel fully comfortable.",haskell,,,,,06/23/2012 21:27:48,not constructive,1,121,7,"Haskell code examples - small to medium I am reading hs-webdriver a wrapper for selenium browser automation library. I have read one Haskell book in the past, and am almost done with Learn You A Haskell. The hs-webdriver is a little difficult for me to follow, probably because almost all of it relies on a monad for sending http requests. Can you guys point me towards smaller pieces of real haskell code, so I can build up to the level of maturity of hs-webdriver? Probably other standard library modules you found helpful to read when you were first learning haskell. I know scheme well and clojure somewhat well. I think I have some more getting used to type classes, type constructors, and monads until I feel fully comfortable.",1
10344233,04/27/2012 03:05:18,717778,04/20/2011 19:22:50,106,4,What are some good Haskell Papers?,"I am fairly new to Haskell and would love some suggestions of papers to further my knowledge of the language and the field of functional programming!

Has anyone got any recommendations? ",haskell,functional-programming,,,,04/27/2012 18:22:00,not constructive,1,31,6,"What are some good Haskell Papers? I am fairly new to Haskell and would love some suggestions of papers to further my knowledge of the language and the field of functional programming!

Has anyone got any recommendations? ",2
11149190,06/22/2012 01:37:58,114887,05/30/2009 19:44:38,590,4,Which Haskell compiler has the informative error messages?,I'm starting to learn Haskell and I've heard that many Haskell compilers have especially cryptic error messages. Which compiler would be the best for a beginner learning the language?,haskell,compiler-errors,,,,06/22/2012 08:35:02,not constructive,1,29,8,Which Haskell compiler has the informative error messages? I'm starting to learn Haskell and I've heard that many Haskell compilers have especially cryptic error messages. Which compiler would be the best for a beginner learning the language?,2
5836058,04/29/2011 18:45:50,217649,11/24/2009 08:35:33,1205,11,Using guards after assigning some variables first,"I know I can do this...

    isZero :: Int -> Bool
    isZero x
      | x == 0      = True
      | otherwise   = False

But can I do something like this?

    isPalindrome :: Int -> Bool
    isPalindrome x
      let digitList = intToDigits x -- Decomposes the integer into
                                    -- digits, i.e. 37 -> [3, 7]
      | digitList == reverse digitList                = True
      | otherwise                                     = False

This will result in compilation errors, but I'm sure that you know what I'm trying to do.",haskell,,,,,,open,0,210,7,"Using guards after assigning some variables first I know I can do this...

    isZero :: Int -> Bool
    isZero x
      | x == 0      = True
      | otherwise   = False

But can I do something like this?

    isPalindrome :: Int -> Bool
    isPalindrome x
      let digitList = intToDigits x -- Decomposes the integer into
                                    -- digits, i.e. 37 -> [3, 7]
      | digitList == reverse digitList                = True
      | otherwise                                     = False

This will result in compilation errors, but I'm sure that you know what I'm trying to do.",1
744368,04/13/2009 16:05:46,86751,04/03/2009 14:03:44,431,16,Which functional programming language should I use?,"I know this is probably a subjective question, still, I'm sure there's a lot that could be said.
I'm learning Haskell this moment, and, have to admit, I'm struck by its sheer beauty.

Still, Haskell is only one language, and I have no clue how one functional language differs from te next one.
I've came across lots of imperative languages (OO or not) in my life, and I think, as much as the next guy, 
the imperative languages, COBOL and C# are hardly comparable. If there's that much difference in functional 
languages, is the choosing of one very relevant to me.

Of course, which language to use is very dependant of the context, I can imagine that the answer on 
'Which functional language to use for production code' (any?) as not the same as 
'Which language to use to study the functional language principles', so I very much would like 
some positioning of the different languages.
Like which should I use when I need a GUI? Which one have compilers for windows to? 
Is Haskell 'the' functional language, and so forth...
",haskell,functional-programming,,,,07/25/2012 22:10:15,not constructive,1,176,7,"Which functional programming language should I use? I know this is probably a subjective question, still, I'm sure there's a lot that could be said.
I'm learning Haskell this moment, and, have to admit, I'm struck by its sheer beauty.

Still, Haskell is only one language, and I have no clue how one functional language differs from te next one.
I've came across lots of imperative languages (OO or not) in my life, and I think, as much as the next guy, 
the imperative languages, COBOL and C# are hardly comparable. If there's that much difference in functional 
languages, is the choosing of one very relevant to me.

Of course, which language to use is very dependant of the context, I can imagine that the answer on 
'Which functional language to use for production code' (any?) as not the same as 
'Which language to use to study the functional language principles', so I very much would like 
some positioning of the different languages.
Like which should I use when I need a GUI? Which one have compilers for windows to? 
Is Haskell 'the' functional language, and so forth...
",2
6082090,05/21/2011 13:38:56,38256,11/17/2008 15:01:13,5027,235,Haskell: Deriving Show for custom type,"I have this type definition:

    data Operace = Op (Int->Int->Int) String (Int->Int->Int) deriving Show

I want to print this type into the interactive shell (GHCi). All that should be printed is the String field.

I tried this:

instance Show Operace where
	show (Op op str inv) = show str

But I still keep getting

    No instance for (Show (Int -> Int -> Int))
      arising from the 'deriving' clause of a data type declaration
    Possible fix:
      add an instance declaration for (Show (Int -> Int -> Int))
      or use a standalone 'deriving instance' declaration,
           so you can specify the instance context yourself
    When deriving the instance for (Show Operace)

I don't want to add Show for (Int->Int->Int), all I want to print is the string.

Thanks for help!",haskell,ghci,,,,,open,0,157,6,"Haskell: Deriving Show for custom type I have this type definition:

    data Operace = Op (Int->Int->Int) String (Int->Int->Int) deriving Show

I want to print this type into the interactive shell (GHCi). All that should be printed is the String field.

I tried this:

instance Show Operace where
	show (Op op str inv) = show str

But I still keep getting

    No instance for (Show (Int -> Int -> Int))
      arising from the 'deriving' clause of a data type declaration
    Possible fix:
      add an instance declaration for (Show (Int -> Int -> Int))
      or use a standalone 'deriving instance' declaration,
           so you can specify the instance context yourself
    When deriving the instance for (Show Operace)

I don't want to add Show for (Int->Int->Int), all I want to print is the string.

Thanks for help!",2
8914501,01/18/2012 17:26:23,1089355,12/09/2011 08:29:57,53,0,parameterized data structures in haskell,"Can you advise on how to represent parameterized data structures in haskell? e.g. in an application which represents contents of a garments shop, I might have instances of racks for men's and women's clothes. These parameters can be hierarchical, e.g. based on age groups. So I can have a rack(men(under14)), or a rack(women(adult)). Also, some constraints may apply to the rack parameters, e.g. no baby clothes. And as with java classes, I would need some member functions which would operate on these instances.
",haskell,template-haskell,,,,01/19/2012 03:25:19,not a real question,1,83,5,"parameterized data structures in haskell Can you advise on how to represent parameterized data structures in haskell? e.g. in an application which represents contents of a garments shop, I might have instances of racks for men's and women's clothes. These parameters can be hierarchical, e.g. based on age groups. So I can have a rack(men(under14)), or a rack(women(adult)). Also, some constraints may apply to the rack parameters, e.g. no baby clothes. And as with java classes, I would need some member functions which would operate on these instances.
",2
5713418,04/19/2011 08:10:26,465074,10/03/2010 09:25:11,51,2,TemplateHaskell and IO,"Is there any proper way to make TH's functions safe if they use side effects? Say, I want to have a function that calls git in compile time and generates a version string:

    {-# LANGUAGE TemplateHaskell #-}
    
    module Qq where
    
    import System.Process
    import Language.Haskell.TH
    
    version =  $( [| (readProcess ""git"" [""rev-parse"", ""HEAD""] """")  |] )


the type of version is IO String. But version is completely free of side effects in runtime,
it has side effects only in compile time. Is there any way to make it pure in runtime without using unsafePerformIO ?
",haskell,template-haskell,,,,,open,0,121,3,"TemplateHaskell and IO Is there any proper way to make TH's functions safe if they use side effects? Say, I want to have a function that calls git in compile time and generates a version string:

    {-# LANGUAGE TemplateHaskell #-}
    
    module Qq where
    
    import System.Process
    import Language.Haskell.TH
    
    version =  $( [| (readProcess ""git"" [""rev-parse"", ""HEAD""] """")  |] )


the type of version is IO String. But version is completely free of side effects in runtime,
it has side effects only in compile time. Is there any way to make it pure in runtime without using unsafePerformIO ?
",2
6905163,08/01/2011 22:16:38,81636,03/23/2009 20:34:18,2022,52,"What's the best workaround for not having ""cabal upgrade""?","I want to upgrade all packages, not just a specific one with `cabal install --upgrade-dependencies`.",haskell,cabal,,,,,open,0,15,9,"What's the best workaround for not having ""cabal upgrade""? I want to upgrade all packages, not just a specific one with `cabal install --upgrade-dependencies`.",2
9190638,02/08/2012 09:31:57,480398,10/19/2010 11:25:33,1954,21,"How, why and when to use the "".Internal"" modules pattern?","I've seen a couple of package on [hackage](http://hackage.haskell.org/packages/archive/pkg-list.html) which contain module names with `.Internal` as their last name component (e.g. `Data.ByteString.Internal`)

Those modules are usually not properly browsable (but they may show up nevertheless) in Haddock and should not be used by client code, but contain definitions which are either re-exported from exposed modules or just used internally.

Now my question(s) to this library organization pattern are:

 - What problem(s) do those `.Internal` modules solve?
 - Are there other preferable ways to workaround those problems?
 - Which definitions should be moved to those `.Internal` modules?
 - What's the current recommended practice with respect to organizing libraries with the help of such `.Internal` modules?",haskell,,,,,,open,0,111,10,"How, why and when to use the "".Internal"" modules pattern? I've seen a couple of package on [hackage](http://hackage.haskell.org/packages/archive/pkg-list.html) which contain module names with `.Internal` as their last name component (e.g. `Data.ByteString.Internal`)

Those modules are usually not properly browsable (but they may show up nevertheless) in Haddock and should not be used by client code, but contain definitions which are either re-exported from exposed modules or just used internally.

Now my question(s) to this library organization pattern are:

 - What problem(s) do those `.Internal` modules solve?
 - Are there other preferable ways to workaround those problems?
 - Which definitions should be moved to those `.Internal` modules?
 - What's the current recommended practice with respect to organizing libraries with the help of such `.Internal` modules?",1
1169197,07/23/2009 02:00:05,91857,04/16/2009 21:16:37,958,90,Where can I find some good documentation about Haskell programming language?,I'm having problems with Haskell documentation that I found. Is not too clear and too simple. Where can I find any better documentation about this language?,haskell,programming-languages,documentation,,,,open,0,26,11,Where can I find some good documentation about Haskell programming language? I'm having problems with Haskell documentation that I found. Is not too clear and too simple. Where can I find any better documentation about this language?,3
8378281,12/04/2011 20:15:34,1080459,12/04/2011 19:36:58,1,0,function that generates a String in Haskell,"I want to program a function that generates a String. The String contains only 1,0,s and S.
The numbers are binary numbers. Each number is separated through a s. And a number gives the length of the rest of the String. The capital S is the end of the String.

Examples:
func :: Integral a => a -> String

func 1

""1S""

func 3

""110s11s1S""

func 4

""1010s110s11s1S""

My problem is, that I don't know, how I can get the length of the tail (""s1S"" -> tail, 11 ->head) and than get the new tail.
",haskell,,,,,,open,0,85,7,"function that generates a String in Haskell I want to program a function that generates a String. The String contains only 1,0,s and S.
The numbers are binary numbers. Each number is separated through a s. And a number gives the length of the rest of the String. The capital S is the end of the String.

Examples:
func :: Integral a => a -> String

func 1

""1S""

func 3

""110s11s1S""

func 4

""1010s110s11s1S""

My problem is, that I don't know, how I can get the length of the tail (""s1S"" -> tail, 11 ->head) and than get the new tail.
",1
7693708,10/07/2011 23:18:32,1198582,06/16/2011 21:39:48,123,1,Could someone articulate the uses of type safety for me?,"I'm using it to sanitize strings, but I would like more uses articulated.",haskell,types,,,,10/08/2011 02:27:35,not a real question,1,13,10,"Could someone articulate the uses of type safety for me? I'm using it to sanitize strings, but I would like more uses articulated.",2
7506657,09/21/2011 21:07:43,410102,08/03/2010 20:12:41,1256,77,how to convert from lazy text to non-lazy text?,"i am new to Haskell so this may be a trivial problem. I am seeing an error message that says
<code><pre>
Couldn't match expected type 'Data.Text.Lazy.Internal.Text'
with actual type 'Text'
</pre></code>
and I think the problem is that the actual type is <code>Data.Text.Text</code> and it expects lazy text. how can I convert one to the other?",haskell,,,,,,open,0,51,9,"how to convert from lazy text to non-lazy text? i am new to Haskell so this may be a trivial problem. I am seeing an error message that says
<code><pre>
Couldn't match expected type 'Data.Text.Lazy.Internal.Text'
with actual type 'Text'
</pre></code>
and I think the problem is that the actual type is <code>Data.Text.Text</code> and it expects lazy text. how can I convert one to the other?",1
8117057,11/14/2011 03:41:14,1044896,11/14/2011 03:33:41,1,0,Haskell - reverse a list,"I'm learning Haskell and got this bizzare result when trying to reverse a list:
 

    reverse' :: [b] -> [b]
    reverse' [] = []
    reverse' [x] = [x]
    reverse'(x:xs) = last (x:xs) : reverse' xs
    
    *Main> reverse' [0,8,2,5,6,1,20,99,91,1]
    [1,1,1,1,1,1,1,1,1,1]

thanks a ton for anyone to point out the bug!",haskell,,,,,,open,0,70,5,"Haskell - reverse a list I'm learning Haskell and got this bizzare result when trying to reverse a list:
 

    reverse' :: [b] -> [b]
    reverse' [] = []
    reverse' [x] = [x]
    reverse'(x:xs) = last (x:xs) : reverse' xs
    
    *Main> reverse' [0,8,2,5,6,1,20,99,91,1]
    [1,1,1,1,1,1,1,1,1,1]

thanks a ton for anyone to point out the bug!",1
8108869,11/13/2011 01:22:27,81636,03/23/2009 20:34:18,3008,69,where is the ghc 7.4.1 branch?,"Sorry this is a dumb question; how do I download the GHC 7.4.1 branch? I want to play around with the ConstraintKinds. The default branch seems to say it's version 7.3. I did look around a little bit, but didn't see anything helpful, or any branch named ""7.4"" on the github repository. Thanks!

(P.S. It might be helpful to add the info to http://hackage.haskell.org/trac/ghc/milestone/7.4.1 if you are a GHC developer?)",haskell,ghc,building,,,11/13/2011 15:52:02,too localized,1,69,6,"where is the ghc 7.4.1 branch? Sorry this is a dumb question; how do I download the GHC 7.4.1 branch? I want to play around with the ConstraintKinds. The default branch seems to say it's version 7.3. I did look around a little bit, but didn't see anything helpful, or any branch named ""7.4"" on the github repository. Thanks!

(P.S. It might be helpful to add the info to http://hackage.haskell.org/trac/ghc/milestone/7.4.1 if you are a GHC developer?)",3
11186723,06/25/2012 09:32:31,1417244,05/25/2012 11:15:03,136,2,haskell application project documentation,">What is literate programming? To quote Dr. Knuth:
    ""The main idea is to regard a program as a communication to human beings rather than as a set of instructions to a computer.""

What are the popular ways to generate haskell application project documentation? Please mention main strength area / key benefits of each method.",haskell,,,,,06/25/2012 12:38:49,not constructive,1,56,4,"haskell application project documentation >What is literate programming? To quote Dr. Knuth:
    ""The main idea is to regard a program as a communication to human beings rather than as a set of instructions to a computer.""

What are the popular ways to generate haskell application project documentation? Please mention main strength area / key benefits of each method.",1
5921573,05/07/2011 14:07:39,390510,06/06/2010 12:23:33,224,10,Convert a string representing a binary number to a base 10 string haskell,"I have the string ""1001"" and I want the string ""9"".

The numeric library has the (rather clunky) showIntAtBase, but I haven't been able to find the opposite.",haskell,,,,,,open,0,27,13,"Convert a string representing a binary number to a base 10 string haskell I have the string ""1001"" and I want the string ""9"".

The numeric library has the (rather clunky) showIntAtBase, but I haven't been able to find the opposite.",1
8684018,12/30/2011 20:55:52,1123502,12/30/2011 20:24:23,1,0,does non-local type inference in haskell or ocaml really usefull?,"First, I assume that local type inference is type inference like Scala and C# type inference. Also, such a definition as

         fact 0 = 1
         fact n = n * fact(n-1)

seems to be local type inference. Type inference here is local to function fact.

So, I wonder, is there a practical example of at least 2 mutually recusive functions or any other non-locality at your discretion that has some benefit from type inference? Please do not post a silly examples like

        odd 0 = false
        odd n = even(n-1)

        even 0 = true
        even n = odd(n-1)

I suspect that non-silly, practical examples arise in parses. Also, please point a benefit for a programmer to such use of non-local type inference. 

// Also, feel free to correct my english.",haskell,ocaml,type-inference,example,non-local,12/31/2011 03:30:03,not constructive,1,171,10,"does non-local type inference in haskell or ocaml really usefull? First, I assume that local type inference is type inference like Scala and C# type inference. Also, such a definition as

         fact 0 = 1
         fact n = n * fact(n-1)

seems to be local type inference. Type inference here is local to function fact.

So, I wonder, is there a practical example of at least 2 mutually recusive functions or any other non-locality at your discretion that has some benefit from type inference? Please do not post a silly examples like

        odd 0 = false
        odd n = even(n-1)

        even 0 = true
        even n = odd(n-1)

I suspect that non-silly, practical examples arise in parses. Also, please point a benefit for a programmer to such use of non-local type inference. 

// Also, feel free to correct my english.",5
6382028,06/17/2011 06:16:10,683727,12/10/2010 00:31:36,315,8,what does 'import' do in haskell,"it came from another question, but things has changed.

http://stackoverflow.com/questions/6370094/the-type-signature-of-parsec-function-parse-and-the-class-stream

I'm now wondering what does `import` do to make things different.

----
file:RunParse.hs

    module RunParse where
    import System.IO
    import Data.Functor.Identity (Identity)
    ----import Text.Parsec ()     ....................(1)
    ----import Text.Parsec        ....................(2)
    import Text.Parsec.Prim (Parsec, parse, Stream)
    
    runIOParse :: (Show a) => Parsec String () a -> String -> IO ()
    runIOParse pa fn =
      do
        inh <- openFile fn ReadMode
        outh <- openFile (fn ++ "".parseout"") WriteMode
        instr <- hGetContents inh
        let result = case parse pa fn instr of
                       Right rs -> show rs
                       Left err -> ""error""
        hPutStr outh result
        hClose inh
        hClose outh

----

(I'm using ghc 7.0.4)

load the file into ghci:

    > :l RunParse.hs
it tells me:

----

    RunParse.hs:13:23:
    Could not deduce (Stream String Identity t0)
      arising from a use of `parse'
    from the context (Show a)
      bound by the type signature for
                 runIOParse :: Show a => Parsec String () a -> String -> IO ()
      at RunParse.hs:(8,1)-(18,15)
    Possible fix:
      add (Stream String Identity t0) to the context of
        the type signature for
          runIOParse :: Show a => Parsec String () a -> String -> IO ()
      or add an instance declaration for (Stream String Identity t0)
    In the expression: parse pa fn instr
    In the expression:
      case parse pa fn instr of {
        Right rs -> show rs
        Left err -> ""error"" }
    In an equation for `result':
        result
          = case parse pa fn instr of {
              Right rs -> show rs
              Left err -> ""error"" }

----

then I added either (1) or (2):

    import Text.Parsec ()     ....................(1)
    import Text.Parsec        ....................(2)

Then `:l RunParse` , load succeeded.

Then I remove all of (1) and (2), then `:l RunParse`, still succeeded!

Then I `:q` quit the ghci, restart ghci, just same as the start, it failed to load.

Does this is a bug of ghc, or I should know more about `import`?

P.S. RunParse.hs failed the `ghc -c --make RunParse.hs` without (1) and (2).

",haskell,import,namespaces,,,,open,0,608,6,"what does 'import' do in haskell it came from another question, but things has changed.

http://stackoverflow.com/questions/6370094/the-type-signature-of-parsec-function-parse-and-the-class-stream

I'm now wondering what does `import` do to make things different.

----
file:RunParse.hs

    module RunParse where
    import System.IO
    import Data.Functor.Identity (Identity)
    ----import Text.Parsec ()     ....................(1)
    ----import Text.Parsec        ....................(2)
    import Text.Parsec.Prim (Parsec, parse, Stream)
    
    runIOParse :: (Show a) => Parsec String () a -> String -> IO ()
    runIOParse pa fn =
      do
        inh <- openFile fn ReadMode
        outh <- openFile (fn ++ "".parseout"") WriteMode
        instr <- hGetContents inh
        let result = case parse pa fn instr of
                       Right rs -> show rs
                       Left err -> ""error""
        hPutStr outh result
        hClose inh
        hClose outh

----

(I'm using ghc 7.0.4)

load the file into ghci:

    > :l RunParse.hs
it tells me:

----

    RunParse.hs:13:23:
    Could not deduce (Stream String Identity t0)
      arising from a use of `parse'
    from the context (Show a)
      bound by the type signature for
                 runIOParse :: Show a => Parsec String () a -> String -> IO ()
      at RunParse.hs:(8,1)-(18,15)
    Possible fix:
      add (Stream String Identity t0) to the context of
        the type signature for
          runIOParse :: Show a => Parsec String () a -> String -> IO ()
      or add an instance declaration for (Stream String Identity t0)
    In the expression: parse pa fn instr
    In the expression:
      case parse pa fn instr of {
        Right rs -> show rs
        Left err -> ""error"" }
    In an equation for `result':
        result
          = case parse pa fn instr of {
              Right rs -> show rs
              Left err -> ""error"" }

----

then I added either (1) or (2):

    import Text.Parsec ()     ....................(1)
    import Text.Parsec        ....................(2)

Then `:l RunParse` , load succeeded.

Then I remove all of (1) and (2), then `:l RunParse`, still succeeded!

Then I `:q` quit the ghci, restart ghci, just same as the start, it failed to load.

Does this is a bug of ghc, or I should know more about `import`?

P.S. RunParse.hs failed the `ghc -c --make RunParse.hs` without (1) and (2).

",3
9286799,02/15/2012 01:39:33,455610,09/22/2010 22:32:27,11,2,Haskell libraries overview and their quality,"I want to use Haskell in production. It has a lot of libraties but not all of them are stable, ready-to-use and well-developed. Some libraries with interesting conceptions have experimental status. Many libraries are still in minor versions (0.0.1 for example). Some of them just abandoned. Hackage too huge to monitor them, so I need a brief slice of the current libraries state, their prospects and suitability for use.

I understand that question is very broad, but this information will be useful to anyone in any way.

### So what libraries I can use for: ###

- Fast arrays capable of handling millions of items
- Fast and powerful maps (probably, Data.Map?)
- Fast, generic and convenient trees
- Queues, hashtables
- Regular expressions
- Finite state machines
- Neural networks, genetic algorithms
- Mathematical calculations
- Physics (wich can be used in game developing)
- GUI
- Image processing (we have various image formats actually)
- Working with databases (maybe ORM or some DSLs to generate SQL)
- Functional reactive programming
- OpenGL bindings (yes, HOpenGL is good), OpenAL and OpenCL bindings
- Parsing (Parsec is great I think)
- Multithread and parallel programming
- Network
- Multipurpose game engines
- Something else?

### What is also interesting to have the tools for: ###

- Testing (QuickCheck)
- Logging (Maybe hslogger)
- Profiling
- Debugging

-------------------------------------

###Here the links to the similar topics:###

+ [What are the best Haskell libraries to operationalize a program?](http://stackoverflow.com/questions/5808825/what-are-the-best-haskell-libraries-to-operationalize-a-program)
+ [Regex & String Libraries in Haskell](http://stackoverflow.com/questions/4410061/regex-string-libraries-in-haskell)
+ [Libraries for strict data structures in Haskell](http://stackoverflow.com/questions/8124359/libraries-for-strict-data-structures-in-haskell)

###Other links###

+ [Applications and libraries (list and brief description)](http://www.haskell.org/haskellwiki/Libraries_and_tools)
+ [Regular expressions](http://www.haskell.org/haskellwiki/Regular_expressions)
+ [Haskell libraries you should use](http://blog.johantibell.com/2011/04/haskell-libraries-you-should-use.html)
+ [There are a hell of a lot of Haskell libraries now. What are we going to do about it?](http://donsbot.wordpress.com/2010/05/31/there-are-a-hell-of-a-lot-of-haskell-libraries-now-what-are-we-going-to-do-about-it/)
+ [Popular Haskell Packages: Q2 2010 report](http://donsbot.wordpress.com/2010/06/30/popular-haskell-packages-q2-2010-report/)

Thank you.",haskell,libraries,quality,,,02/20/2012 07:48:10,not constructive,1,270,6,"Haskell libraries overview and their quality I want to use Haskell in production. It has a lot of libraties but not all of them are stable, ready-to-use and well-developed. Some libraries with interesting conceptions have experimental status. Many libraries are still in minor versions (0.0.1 for example). Some of them just abandoned. Hackage too huge to monitor them, so I need a brief slice of the current libraries state, their prospects and suitability for use.

I understand that question is very broad, but this information will be useful to anyone in any way.

### So what libraries I can use for: ###

- Fast arrays capable of handling millions of items
- Fast and powerful maps (probably, Data.Map?)
- Fast, generic and convenient trees
- Queues, hashtables
- Regular expressions
- Finite state machines
- Neural networks, genetic algorithms
- Mathematical calculations
- Physics (wich can be used in game developing)
- GUI
- Image processing (we have various image formats actually)
- Working with databases (maybe ORM or some DSLs to generate SQL)
- Functional reactive programming
- OpenGL bindings (yes, HOpenGL is good), OpenAL and OpenCL bindings
- Parsing (Parsec is great I think)
- Multithread and parallel programming
- Network
- Multipurpose game engines
- Something else?

### What is also interesting to have the tools for: ###

- Testing (QuickCheck)
- Logging (Maybe hslogger)
- Profiling
- Debugging

-------------------------------------

###Here the links to the similar topics:###

+ [What are the best Haskell libraries to operationalize a program?](http://stackoverflow.com/questions/5808825/what-are-the-best-haskell-libraries-to-operationalize-a-program)
+ [Regex & String Libraries in Haskell](http://stackoverflow.com/questions/4410061/regex-string-libraries-in-haskell)
+ [Libraries for strict data structures in Haskell](http://stackoverflow.com/questions/8124359/libraries-for-strict-data-structures-in-haskell)

###Other links###

+ [Applications and libraries (list and brief description)](http://www.haskell.org/haskellwiki/Libraries_and_tools)
+ [Regular expressions](http://www.haskell.org/haskellwiki/Regular_expressions)
+ [Haskell libraries you should use](http://blog.johantibell.com/2011/04/haskell-libraries-you-should-use.html)
+ [There are a hell of a lot of Haskell libraries now. What are we going to do about it?](http://donsbot.wordpress.com/2010/05/31/there-are-a-hell-of-a-lot-of-haskell-libraries-now-what-are-we-going-to-do-about-it/)
+ [Popular Haskell Packages: Q2 2010 report](http://donsbot.wordpress.com/2010/06/30/popular-haskell-packages-q2-2010-report/)

Thank you.",3
11274864,06/30/2012 14:28:58,1417244,05/25/2012 11:15:03,332,2,haskell code - What does 'qualified' mean in 'import qualified Data.List?,"haskell code - Import Data.List, I understand but ""What does 'qualified' mean in 'import  qualified Data.List"" ?",haskell,,,,,,open,0,18,11,"haskell code - What does 'qualified' mean in 'import qualified Data.List? haskell code - Import Data.List, I understand but ""What does 'qualified' mean in 'import  qualified Data.List"" ?",1
7720929,10/11/2011 02:54:25,331473,05/03/2010 14:15:34,684,29,"Space leaks, and Writers, and Sums (oh my!)","I've been playing with the Writer Monad recently, and I've run into
what appears to be a space leak.  I can't say I fully understand these
things yet, so I'd like to know what's happening here, and how to fix it.

First, here's how I can trigger this error:

    import Control.Monad.Writer
    import Data.Monoid

    foo :: Integer -> Writer (Sum Integer) Integer
    foo 0 = return 0
    foo x = tell (Sum x) >> foo (pred x)

    main = print $ runWriter $ foo 1000000

I get:

    Stack space overflow: current size 8388608 bytes.
    Use `+RTS -Ksize -RTS' to increase it.

To understand this better, I've reimplemented similar functionality
without Writer or Sum, and if I keep things nice and lazy, I get the
same error:

    bar :: Integer -> (Integer, Integer)
    bar x = bar' 0 x
        where bar' c 0 = (0, c)
              bar' c x = bar' (c + x) (pred x)

But I can remedy this by adding `seq` to the equation:

    bar' c x = c `seq` bar' (c + x) (pred x)

I've tried `seq`ing various bits of my `foo` function, but that doesn't seem
to help.  Also, I've tried using `Control.Monad.Writer.Strict` but that
doesn't make a difference either.

Does `Sum` need to be strict somehow?  Or am I missing something
completely different?

**Notes**

 - I may have my terminology wrong here.  According to [Space leak
   zoo][1], my problem would be classified as a 'stack overflow', and if
   that's the case, how would I convert `foo` to a more iterative style?  Is my manual
   recursion the problem?
 - After reading http://stackoverflow.com/questions/7140732/haskell-space-overflow, I had
   the idea to compile with `-O2`, just to see what happens.  This may be a topic for
   another question, but with optimizations, even my `seq`'d `bar` function fails to run.

  [1]: http://blog.ezyang.com/2011/05/space-leak-zoo/",haskell,space-leak,,,,,open,0,356,8,"Space leaks, and Writers, and Sums (oh my!) I've been playing with the Writer Monad recently, and I've run into
what appears to be a space leak.  I can't say I fully understand these
things yet, so I'd like to know what's happening here, and how to fix it.

First, here's how I can trigger this error:

    import Control.Monad.Writer
    import Data.Monoid

    foo :: Integer -> Writer (Sum Integer) Integer
    foo 0 = return 0
    foo x = tell (Sum x) >> foo (pred x)

    main = print $ runWriter $ foo 1000000

I get:

    Stack space overflow: current size 8388608 bytes.
    Use `+RTS -Ksize -RTS' to increase it.

To understand this better, I've reimplemented similar functionality
without Writer or Sum, and if I keep things nice and lazy, I get the
same error:

    bar :: Integer -> (Integer, Integer)
    bar x = bar' 0 x
        where bar' c 0 = (0, c)
              bar' c x = bar' (c + x) (pred x)

But I can remedy this by adding `seq` to the equation:

    bar' c x = c `seq` bar' (c + x) (pred x)

I've tried `seq`ing various bits of my `foo` function, but that doesn't seem
to help.  Also, I've tried using `Control.Monad.Writer.Strict` but that
doesn't make a difference either.

Does `Sum` need to be strict somehow?  Or am I missing something
completely different?

**Notes**

 - I may have my terminology wrong here.  According to [Space leak
   zoo][1], my problem would be classified as a 'stack overflow', and if
   that's the case, how would I convert `foo` to a more iterative style?  Is my manual
   recursion the problem?
 - After reading http://stackoverflow.com/questions/7140732/haskell-space-overflow, I had
   the idea to compile with `-O2`, just to see what happens.  This may be a topic for
   another question, but with optimizations, even my `seq`'d `bar` function fails to run.

  [1]: http://blog.ezyang.com/2011/05/space-leak-zoo/",2
11678395,07/26/2012 21:36:49,453261,09/20/2010 22:08:36,723,41,Using Sublime 2 for Haskell Development?,"What is the current status of Sublime 2 integration for Haskell? I see two possible packages so far. A plugin for code highlighting and a REPL plugin. 

Is there an intelli-sense plugin for Haskell? 
Maybe integration with Hackage as well?

Thanks.",haskell,ghc,sublimetext,sublimetext2,,,open,0,40,6,"Using Sublime 2 for Haskell Development? What is the current status of Sublime 2 integration for Haskell? I see two possible packages so far. A plugin for code highlighting and a REPL plugin. 

Is there an intelli-sense plugin for Haskell? 
Maybe integration with Hackage as well?

Thanks.",4
775726,04/22/2009 04:45:47,60628,01/30/2009 14:28:28,2248,99,What's the fuss about Haskell?,"I know a few programmers who keep talking about Haskell when they are among themselves, and here on SO everyone seems to love that language. Being good at Haskell seems somewhat like the hallmark of a genius programmer.

Can someone give a few Haskell examples that show why it is so elegant / superior?


",haskell,elegant,functional-programming,,,02/19/2012 14:20:01,not constructive,1,53,5,"What's the fuss about Haskell? I know a few programmers who keep talking about Haskell when they are among themselves, and here on SO everyone seems to love that language. Being good at Haskell seems somewhat like the hallmark of a genius programmer.

Can someone give a few Haskell examples that show why it is so elegant / superior?


",3
11285231,07/01/2012 20:01:41,1417244,05/25/2012 11:15:03,355,2,Can I have a haskell code which causes stakoverflow?,"I am an absolute beginner in haskell and programming as well. I have reached up to 8 th chapter of ' learn you a haskell for good' and have read other material. I am bit curious to know what happens when the code causes stack overflow? Want to run code in GHCi. For last 5 days I was using Windows 7 and I tried to gauge the memory usage  through performance monitor for each code I ran. Now , I am with my regular system which has Ubuntu 12.04 LTS and standard haskell libraries installed.",haskell,,,,,07/01/2012 20:05:49,not a real question,1,96,9,"Can I have a haskell code which causes stakoverflow? I am an absolute beginner in haskell and programming as well. I have reached up to 8 th chapter of ' learn you a haskell for good' and have read other material. I am bit curious to know what happens when the code causes stack overflow? Want to run code in GHCi. For last 5 days I was using Windows 7 and I tried to gauge the memory usage  through performance monitor for each code I ran. Now , I am with my regular system which has Ubuntu 12.04 LTS and standard haskell libraries installed.",1
6224327,06/03/2011 07:42:49,348716,05/24/2010 06:34:22,622,16,Error while installing Haskell DJinn - base-3.0.3.1 was excluded because of the top level dependency base -any,"I tried installing [Djinn][1] by using cabal but got the following error -

    $ cabal install djinn --verbose
    Reading available packages...
    Resolving dependencies...
    cabal: cannot configure djinn-2009.9.3. It requires base ==3.*
    For the dependency on base ==3.* there are these packages: base-3.0.3.1 and
    base-3.0.3.2. However none of them are available.
    base-3.0.3.1 was excluded because of the top level dependency base -any
    base-3.0.3.2 was excluded because of the top level dependency base -any


The error message is mysterious, shouldn't `base -any` allow base version 3.0.3.1?

  [1]: http://hackage.haskell.org/package/djinn
",haskell,installation,install,cabal,,,open,0,110,17,"Error while installing Haskell DJinn - base-3.0.3.1 was excluded because of the top level dependency base -any I tried installing [Djinn][1] by using cabal but got the following error -

    $ cabal install djinn --verbose
    Reading available packages...
    Resolving dependencies...
    cabal: cannot configure djinn-2009.9.3. It requires base ==3.*
    For the dependency on base ==3.* there are these packages: base-3.0.3.1 and
    base-3.0.3.2. However none of them are available.
    base-3.0.3.1 was excluded because of the top level dependency base -any
    base-3.0.3.2 was excluded because of the top level dependency base -any


The error message is mysterious, shouldn't `base -any` allow base version 3.0.3.1?

  [1]: http://hackage.haskell.org/package/djinn
",4
11511610,07/16/2012 19:55:45,250560,01/14/2010 08:42:59,1504,57,Setting up emacs for haskell,"It's sad but emacs is currently the best available IDE for Haskell. Which extensions and how do you configure to work productively in this editor?

P.S. I use haskell mode with additions of ghc-mod. I like it, but it doesn't support navigation to a symbol and completion doesn't look IDE-like but it's stil usable.",haskell,emacs,,,,07/17/2012 01:44:27,not constructive,1,53,5,"Setting up emacs for haskell It's sad but emacs is currently the best available IDE for Haskell. Which extensions and how do you configure to work productively in this editor?

P.S. I use haskell mode with additions of ghc-mod. I like it, but it doesn't support navigation to a symbol and completion doesn't look IDE-like but it's stil usable.",2
7740924,10/12/2011 13:35:49,321763,04/20/2010 22:01:49,366,1,Modular Power Haskell Homework,"My homework was to provide a function that computes 'x^y mod n' -for any n < (sqrt maxint32)

So I started by writing doing this:

    modPow :: Int -> Int -> Int -> Int 
    modPow x y n = (x `mod` n) ^ (y `mod` n) `mod` n

Which seemed to work fine, for any number of n, although my next homework question involved using x^n mod n = x (Carmichael numbers) and I could never get modPow to work.

So I made another modPow using pseudocode for mod exponentiation, -from wikipedia:

    modPow2 :: Int -> Int -> Int -> Int 
    modPow2 x y n 
     = loopmod 1 1
      where
       loopmod count total = if count > y
                              then total
                               else loopmod (count+1) ((total*x) `mod` n)

Which now correctly produces the right answer for my next question, (x^n mod n = x) -for checking for Carmichael numbers.

ALTHOUGH, modPow2 does not work for big numbers of 'y' (STACK-OVERFLOW!!)


How could I adjust modPow2 so it no longer gets a stackoverflow in the cases where y > 10,000 (but still less than sqrt of maxint 32 -which is around 46,000)

Or is there a fix on my original modPow so it works with x^n mod n = x? (I always do 560 561 561 as inputs and it gives me back 1 not 560 (561 is a carmichael number so should give 560 back)

Thanks alot.",haskell,,,,,,open,0,316,4,"Modular Power Haskell Homework My homework was to provide a function that computes 'x^y mod n' -for any n < (sqrt maxint32)

So I started by writing doing this:

    modPow :: Int -> Int -> Int -> Int 
    modPow x y n = (x `mod` n) ^ (y `mod` n) `mod` n

Which seemed to work fine, for any number of n, although my next homework question involved using x^n mod n = x (Carmichael numbers) and I could never get modPow to work.

So I made another modPow using pseudocode for mod exponentiation, -from wikipedia:

    modPow2 :: Int -> Int -> Int -> Int 
    modPow2 x y n 
     = loopmod 1 1
      where
       loopmod count total = if count > y
                              then total
                               else loopmod (count+1) ((total*x) `mod` n)

Which now correctly produces the right answer for my next question, (x^n mod n = x) -for checking for Carmichael numbers.

ALTHOUGH, modPow2 does not work for big numbers of 'y' (STACK-OVERFLOW!!)


How could I adjust modPow2 so it no longer gets a stackoverflow in the cases where y > 10,000 (but still less than sqrt of maxint 32 -which is around 46,000)

Or is there a fix on my original modPow so it works with x^n mod n = x? (I always do 560 561 561 as inputs and it gives me back 1 not 560 (561 is a carmichael number so should give 560 back)

Thanks alot.",1
10823974,05/30/2012 20:44:30,575084,01/14/2011 00:45:39,71,3,Why Does Asynchronous UDP Datagram Haskell Server Have Packet Loss?,"I am sending simple UDP packets to this Haskell server. For a source of packets I use a plain text file generated by ""aspell -l en dump master"". However, any list of over 120,000 messages should work. If I start the consumer and producer at the same time, I do not loose packets. However, I want to be able to simulate a very busy consumer. If I introduce a threadDelay for 20 seconds before starting the consumer, I get packet loss. This to me is counter intuitive because I am doing less with standard out and disk IO when I delay consuming. Can anyone explain why I am getting loss with the delayed version? How can I manage the socket and TChan work better to not get any loss (just higher memory usage) while my consumer is very busy?

    import Control.Monad (forever)
    import Control.Concurrent (forkIO, threadDelay)
    import Control.Concurrent.STM (writeTChan, readTChan, atomically)
    import Control.Concurrent.STM.TChan
    import Network.Socket hiding (send, sendTo, recv, recvFrom)
    import Network.Socket.ByteString
    import Data.ByteString hiding(putStrLn, head)
    import qualified Data.ByteString.Char8 as Char8 (putStrLn, putStr)
    import System.IO
    
    main :: IO ()
    main = withSocketsDo $  do
        hSetBuffering stdout NoBuffering
        addrinfos <- getAddrInfo
                     (Just (defaultHints {addrFlags = [AI_PASSIVE]}))
                     Nothing (Just ""2000"")
        let serveraddr = head addrinfos
        sock <- socket (addrFamily serveraddr) Datagram defaultProtocol
        bindSocket sock (addrAddress serveraddr)
        chan <- newTChanIO
        forkIO(producer chan sock)
        -- Uncomment the threadDelay below to see lossy version
        -- threadDelay (1000000 * 20)
        forkIO(consumer chan)
        forever $ threadDelay (1000000 * 60)
    
    producer :: TChan ByteString -> Socket -> IO ()
    producer chan sock = forever $ do
        (msg) <- recv sock 256
        atomically $ writeTChan chan msg

    consumer :: TChan ByteString -> IO ()
    consumer chan = forever $ do
        msg <- atomically $ readTChan chan
        Char8.putStr msg
",haskell,,,,,,open,0,488,10,"Why Does Asynchronous UDP Datagram Haskell Server Have Packet Loss? I am sending simple UDP packets to this Haskell server. For a source of packets I use a plain text file generated by ""aspell -l en dump master"". However, any list of over 120,000 messages should work. If I start the consumer and producer at the same time, I do not loose packets. However, I want to be able to simulate a very busy consumer. If I introduce a threadDelay for 20 seconds before starting the consumer, I get packet loss. This to me is counter intuitive because I am doing less with standard out and disk IO when I delay consuming. Can anyone explain why I am getting loss with the delayed version? How can I manage the socket and TChan work better to not get any loss (just higher memory usage) while my consumer is very busy?

    import Control.Monad (forever)
    import Control.Concurrent (forkIO, threadDelay)
    import Control.Concurrent.STM (writeTChan, readTChan, atomically)
    import Control.Concurrent.STM.TChan
    import Network.Socket hiding (send, sendTo, recv, recvFrom)
    import Network.Socket.ByteString
    import Data.ByteString hiding(putStrLn, head)
    import qualified Data.ByteString.Char8 as Char8 (putStrLn, putStr)
    import System.IO
    
    main :: IO ()
    main = withSocketsDo $  do
        hSetBuffering stdout NoBuffering
        addrinfos <- getAddrInfo
                     (Just (defaultHints {addrFlags = [AI_PASSIVE]}))
                     Nothing (Just ""2000"")
        let serveraddr = head addrinfos
        sock <- socket (addrFamily serveraddr) Datagram defaultProtocol
        bindSocket sock (addrAddress serveraddr)
        chan <- newTChanIO
        forkIO(producer chan sock)
        -- Uncomment the threadDelay below to see lossy version
        -- threadDelay (1000000 * 20)
        forkIO(consumer chan)
        forever $ threadDelay (1000000 * 60)
    
    producer :: TChan ByteString -> Socket -> IO ()
    producer chan sock = forever $ do
        (msg) <- recv sock 256
        atomically $ writeTChan chan msg

    consumer :: TChan ByteString -> IO ()
    consumer chan = forever $ do
        msg <- atomically $ readTChan chan
        Char8.putStr msg
",1
11137443,06/21/2012 11:45:41,18515,09/19/2008 03:50:06,11238,141,Is it possible to embed Haskell in a C library opaquely?,"*i.e.* is it possible to embed Haskell code in a C library so that the user of the library doesn't have to know Haskell is being used? In particular, so that the user could use multiple libraries that embed Haskell, without any conflicts?

As far as I understand things, you embed between calls to hs_init and hs_exit, but these involve global state shenanigans and should conflict with other calls, no?",haskell,,,,,,open,0,69,11,"Is it possible to embed Haskell in a C library opaquely? *i.e.* is it possible to embed Haskell code in a C library so that the user of the library doesn't have to know Haskell is being used? In particular, so that the user could use multiple libraries that embed Haskell, without any conflicts?

As far as I understand things, you embed between calls to hs_init and hs_exit, but these involve global state shenanigans and should conflict with other calls, no?",1
9306871,02/16/2012 06:58:46,83435,03/27/2009 02:15:41,1308,6,"What functional dependencies does this size-safe ZipWith variant require, and why?","I'm trying to define operations on lists that have type-parameterized lengths. I end up having quite a number of constraints on these lists (`Map`, `Fold`, what have you) so I'd like to use the new GHC `ConstraintKinds` to simplify my life a little. However, I can't seem to figure them out.

Consider the following (drastically simplified) example:

    -- A list where length is implicit in the type.
    -- This allows us to have classes like
    -- Combineable a b c  u v w | ... where
    --    combine :: (a -> b -> c) -> u -> v -> w
    -- which is a version of ZipWith that only works on
    -- lists of the same length.
    data a :. b = !a :. !b

    -- A simple class that works on our length-implicit lists
    class Fold v a | v -> a where
      fold  :: (a -> a -> a) -> v -> a
    instance Fold (a:.()) a where
      fold  f   (a:._) = a
    instance Fold (a':.u) a => Fold (a:.a':.u) a where
      fold  f   (a:.v) = f a (fold f v)

    -- A type constraint to simplify the constraints on our functions,
    -- which in the real world also contain a bunch of things like
    -- Map a a v v, Combineable a (Maybe a) (Maybe a) v w w, etc.
    type NList v i = ( Fold (v i) i )
    
    -- A function that uses our type constraint
    foo :: (Num a, NList v a) -> v a -> a
    foo = fold (+) 1

Looks fairly sane to me. Right? Wrong.

    > foo ((1::Int) :. ())

    Couldn't match type `Int' with `()'
    When using functional dependencies to combine
      Fold (a :. ()) a,
        arising from the dependency `v -> a'
        in the instance declaration in `Data.Vec.Base'
      Fold (Int :. ()) (),
        arising from a use of `foo' at <interactive>:72:1-4
    In the expression: foo ((1 :: Int) :. ())
    In an equation for `it': it = foo ((1 :: Int) :. ())

To me, this error message roughly translates to ""why are you trying to program at the type level?""

Obviously, I don't quite understand the implications of Constraint Kinds, but I'm not sure where I went wrong here. Can anyone spot the error?",haskell,types,type-kinds,,,,open,0,504,11,"What functional dependencies does this size-safe ZipWith variant require, and why? I'm trying to define operations on lists that have type-parameterized lengths. I end up having quite a number of constraints on these lists (`Map`, `Fold`, what have you) so I'd like to use the new GHC `ConstraintKinds` to simplify my life a little. However, I can't seem to figure them out.

Consider the following (drastically simplified) example:

    -- A list where length is implicit in the type.
    -- This allows us to have classes like
    -- Combineable a b c  u v w | ... where
    --    combine :: (a -> b -> c) -> u -> v -> w
    -- which is a version of ZipWith that only works on
    -- lists of the same length.
    data a :. b = !a :. !b

    -- A simple class that works on our length-implicit lists
    class Fold v a | v -> a where
      fold  :: (a -> a -> a) -> v -> a
    instance Fold (a:.()) a where
      fold  f   (a:._) = a
    instance Fold (a':.u) a => Fold (a:.a':.u) a where
      fold  f   (a:.v) = f a (fold f v)

    -- A type constraint to simplify the constraints on our functions,
    -- which in the real world also contain a bunch of things like
    -- Map a a v v, Combineable a (Maybe a) (Maybe a) v w w, etc.
    type NList v i = ( Fold (v i) i )
    
    -- A function that uses our type constraint
    foo :: (Num a, NList v a) -> v a -> a
    foo = fold (+) 1

Looks fairly sane to me. Right? Wrong.

    > foo ((1::Int) :. ())

    Couldn't match type `Int' with `()'
    When using functional dependencies to combine
      Fold (a :. ()) a,
        arising from the dependency `v -> a'
        in the instance declaration in `Data.Vec.Base'
      Fold (Int :. ()) (),
        arising from a use of `foo' at <interactive>:72:1-4
    In the expression: foo ((1 :: Int) :. ())
    In an equation for `it': it = foo ((1 :: Int) :. ())

To me, this error message roughly translates to ""why are you trying to program at the type level?""

Obviously, I don't quite understand the implications of Constraint Kinds, but I'm not sure where I went wrong here. Can anyone spot the error?",3
5140100,02/28/2011 09:23:24,246776,01/08/2010 22:16:08,1952,55,Registering multiple versions of packages with `ghc-pkg`?,"I'm trying to install `GHC` and `Cabal` on FreeBSD 8.1.
I've installed GHC 7.0.1 (because it's current stable release) and now trying to install `Cabal` (to install `cabal-install`), but it fails with this error message.


    %./Setup configure
    Configuring Cabal-1.8.0.4...
    Setup: At least the following dependencies are missing:
    base >=4 && <3 && >=1 && <5, filepath >=1 && <1.2
    %

Definitely I'm having too higher version of library.


    %ghc-pkg list
    /usr/local/lib/ghc-7.0.1/package.conf.d
       Cabal-1.10.0.0
       array-0.3.0.2
       base-4.3.0.0
       bin-package-db-0.0.0.0
       bytestring-0.9.1.8
       containers-0.4.0.0
       directory-1.1.0.0
       extensible-exceptions-0.1.1.2
       ffi-1.0
       filepath-1.2.0.0
       ghc-7.0.1
       ghc-binary-0.5.0.2
       ghc-prim-0.2.0.0
       haskell2010-1.0.0.0
       haskell98-1.1.0.0
       hpc-0.5.0.6
       integer-gmp-0.2.0.2
       old-locale-1.0.0.2
       old-time-1.0.0.6
       pretty-1.0.1.2
       process-1.0.1.4
       random-1.0.0.3
       rts-1.0
       template-haskell-2.5.0.0
       time-1.2.0.3
       unix-2.4.1.0
    /home/eonil/.ghc/x86_64-freebsd-7.0.1/package.conf.d
       network-2.2.1.5
       parsec-2.1.0.1
    %

Should I downgrade to GHC 6.x? Or can I install lower version of the packages? (or side-by-side install)
",haskell,version,ghc,cabal,cabal-install,,open,0,311,7,"Registering multiple versions of packages with `ghc-pkg`? I'm trying to install `GHC` and `Cabal` on FreeBSD 8.1.
I've installed GHC 7.0.1 (because it's current stable release) and now trying to install `Cabal` (to install `cabal-install`), but it fails with this error message.


    %./Setup configure
    Configuring Cabal-1.8.0.4...
    Setup: At least the following dependencies are missing:
    base >=4 && <3 && >=1 && <5, filepath >=1 && <1.2
    %

Definitely I'm having too higher version of library.


    %ghc-pkg list
    /usr/local/lib/ghc-7.0.1/package.conf.d
       Cabal-1.10.0.0
       array-0.3.0.2
       base-4.3.0.0
       bin-package-db-0.0.0.0
       bytestring-0.9.1.8
       containers-0.4.0.0
       directory-1.1.0.0
       extensible-exceptions-0.1.1.2
       ffi-1.0
       filepath-1.2.0.0
       ghc-7.0.1
       ghc-binary-0.5.0.2
       ghc-prim-0.2.0.0
       haskell2010-1.0.0.0
       haskell98-1.1.0.0
       hpc-0.5.0.6
       integer-gmp-0.2.0.2
       old-locale-1.0.0.2
       old-time-1.0.0.6
       pretty-1.0.1.2
       process-1.0.1.4
       random-1.0.0.3
       rts-1.0
       template-haskell-2.5.0.0
       time-1.2.0.3
       unix-2.4.1.0
    /home/eonil/.ghc/x86_64-freebsd-7.0.1/package.conf.d
       network-2.2.1.5
       parsec-2.1.0.1
    %

Should I downgrade to GHC 6.x? Or can I install lower version of the packages? (or side-by-side install)
",5
8060456,11/09/2011 04:47:55,1024089,11/26/2010 23:20:27,364,0,Using foldl to cascade functions,"So here I have singleton list  
     
    [([(""*"" ""1""),(""/"" ""5""),(""*"" ""10"")],"""")]

I have to take the `fst $ head` of it which is  

    [(""*"" ""1""),(""/"" ""5""),(""*"" ""10"")]

Combine it with a simple string `""5""`, and transform it into 

    ((""*"" ""10"") ((""/"" ""5"") ((""* ""1"") ""5"")))

I know this would involve either `foldl` or `foldr`, but I just cant get it right...

This is for a parser project, I could post all the background information, but that would be too much.

Thanks in advance.


",haskell,lambda,,,,11/09/2011 15:20:41,too localized,1,96,5,"Using foldl to cascade functions So here I have singleton list  
     
    [([(""*"" ""1""),(""/"" ""5""),(""*"" ""10"")],"""")]

I have to take the `fst $ head` of it which is  

    [(""*"" ""1""),(""/"" ""5""),(""*"" ""10"")]

Combine it with a simple string `""5""`, and transform it into 

    ((""*"" ""10"") ((""/"" ""5"") ((""* ""1"") ""5"")))

I know this would involve either `foldl` or `foldr`, but I just cant get it right...

This is for a parser project, I could post all the background information, but that would be too much.

Thanks in advance.


",2
2891160,05/23/2010 09:07:31,24044,10/01/2008 08:08:51,517,11,"Which is your favorite ""hidden gem"" package on Hackage?","There are a lot of packages on Hackage, some well known (such as HUnit) and some less known (such as AspectAG). I'm wondering which package _you_ think is a hidden gem that deserves more users. Maybe a useful data structure, helpers for monads, networking, test, ...?

Which is your favorite ""hidden gem"" package on Hackage?",haskell,packages,whats-your-favourite,,,10/04/2011 18:14:34,not constructive,1,54,9,"Which is your favorite ""hidden gem"" package on Hackage? There are a lot of packages on Hackage, some well known (such as HUnit) and some less known (such as AspectAG). I'm wondering which package _you_ think is a hidden gem that deserves more users. Maybe a useful data structure, helpers for monads, networking, test, ...?

Which is your favorite ""hidden gem"" package on Hackage?",3
9394116,02/22/2012 11:43:33,486578,10/25/2010 15:03:02,2051,5,Can anyone suggest me good book for Clean language?,I want to learn Clean programming laguage. I know Haskell but can anyone suggest me good book for Clean language ?,haskell,functional-programming,clean,,,02/22/2012 12:58:19,not constructive,1,21,9,Can anyone suggest me good book for Clean language? I want to learn Clean programming laguage. I know Haskell but can anyone suggest me good book for Clean language ?,3
7070923,08/15/2011 21:14:44,740235,05/05/2011 15:23:48,167,7,Installing Text Livecoding Library,"What's the proper way to install Alex Mclean's livecoding environment Text?  
  
The required components are described in http://yaxu.org/text-update-and-source/
",haskell,livecoding,,,,08/16/2011 14:01:45,not a real question,1,21,4,"Installing Text Livecoding Library What's the proper way to install Alex Mclean's livecoding environment Text?  
  
The required components are described in http://yaxu.org/text-update-and-source/
",2
211216,10/17/2008 06:23:08,15055,09/17/2008 05:31:28,675,35,Hidden features of Haskell,"What are the lesser-known but useful features of the Haskell programming language. (I understand the language itself is lesser-known, but work with me. Even explanations of the simple things in Haskell, like defining the Fibonacci sequence with one line of code, will get upvoted by me). 

  - Try to limit answers to the Haskell core
  - One feature per answer
  - Give an example and short description of the feature, not just a link to documentation
  - Label the feature using bold title as the first line

This follows after the following excellent questions:

See also:

  - [Hidden features of C][1]
  - [Hidden features of C#][2]
  - [Hidden features of C++][3]
  - [Hidden features of Python][10]
  - [Hidden features of Java][4]
  - [Hidden features of JavaScript][5]
  - [Hidden features of Ruby][6]
  - [Hidden features of PHP][7]
  - [Hidden features of Perl][8]
  - [Hidden features of VB.Net][9]


  [1]: http://stackoverflow.com/questions/132241/hidden-features-of-c
  [2]: http://stackoverflow.com/questions/9033/hidden-features-of-c
  [3]: http://stackoverflow.com/questions/75538/hidden-features-of-c
  [4]: http://stackoverflow.com/questions/15496/hidden-features-of-java
  [5]: http://stackoverflow.com/questions/61088/hidden-features-of-javascript
  [6]: http://stackoverflow.com/questions/63998/hidden-features-of-ruby
  [7]: http://stackoverflow.com/questions/61401/hidden-features-of-php
  [8]: http://stackoverflow.com/questions/161872/hidden-features-of-perl
  [9]: http://stackoverflow.com/questions/102084/hidden-features-of-vbnet 
  [10]: http://stackoverflow.com/questions/101268/hidden-features-of-python
",haskell,hidden-features,,,,02/29/2012 16:53:55,not constructive,1,190,4,"Hidden features of Haskell What are the lesser-known but useful features of the Haskell programming language. (I understand the language itself is lesser-known, but work with me. Even explanations of the simple things in Haskell, like defining the Fibonacci sequence with one line of code, will get upvoted by me). 

  - Try to limit answers to the Haskell core
  - One feature per answer
  - Give an example and short description of the feature, not just a link to documentation
  - Label the feature using bold title as the first line

This follows after the following excellent questions:

See also:

  - [Hidden features of C][1]
  - [Hidden features of C#][2]
  - [Hidden features of C++][3]
  - [Hidden features of Python][10]
  - [Hidden features of Java][4]
  - [Hidden features of JavaScript][5]
  - [Hidden features of Ruby][6]
  - [Hidden features of PHP][7]
  - [Hidden features of Perl][8]
  - [Hidden features of VB.Net][9]


  [1]: http://stackoverflow.com/questions/132241/hidden-features-of-c
  [2]: http://stackoverflow.com/questions/9033/hidden-features-of-c
  [3]: http://stackoverflow.com/questions/75538/hidden-features-of-c
  [4]: http://stackoverflow.com/questions/15496/hidden-features-of-java
  [5]: http://stackoverflow.com/questions/61088/hidden-features-of-javascript
  [6]: http://stackoverflow.com/questions/63998/hidden-features-of-ruby
  [7]: http://stackoverflow.com/questions/61401/hidden-features-of-php
  [8]: http://stackoverflow.com/questions/161872/hidden-features-of-perl
  [9]: http://stackoverflow.com/questions/102084/hidden-features-of-vbnet 
  [10]: http://stackoverflow.com/questions/101268/hidden-features-of-python
",2
7473472,09/19/2011 15:37:32,9859,09/15/2008 20:13:55,17060,372,"Haskell: Getting a value of type `Integral a => [a]` from a value of `Integral a => ([a],[a],[a])`","So I'm playing around with this:

    factors :: Integral a => a -> [a] 
    factors n = filter (\d -> n `rem` d == 0) . takeWhile (\d -> d*d <= n) $ [ 1 .. ]

    abundants_perfects_deficients :: Integral a => ([a],[a],[a])
    abundants_perfects_deficients = foldr switch ([],[],[]) [1..]
      where switch :: Integral a => a -> ([a],[a],[a]) -> ([a],[a],[a])
            switch n (as,ps,ds) = 
              let t = sum (factors n) in
                    if t < n  then  (as,ps,n:ds) 
              else  if t == n then  (as,n:ps,ds) 
              else                  (n:as,ps,ds)

And while I've got `abundants_perfects_deficients`, I'd rather have three values: `abundants`, `perfects`, and `deficients` all of type `Integral a -> [a]`.

One thing that doesn't work is:

    abundants,perfects,deficients :: Integral a => [a] 
    (abundants,perfects,deficients) = abundants_perfects_deficients

Because this constrains the three to all be over the same `a`.

I tried something to do them one-by-one, so they wouldn't mutually constrain, but that didn't work either:

    perfects :: Integral a => [a] 
    (_,perfects,_) = abundants_perfects_deficients

Because the compiler couldn't figure out how to convert a value of type `forall a. Integral a => ([a],[a],[a])` to type `(t1, forall a. Integral a => [a], t2)`.

Which seems cromulent enough.  

Now I know I could implement them separately (just `perfects = filter isPerfect [1..]`), or constrain them to all be of the same type (`(abundants,perfects,deficients) = abundants_perfects_deficients` works fine if `abundants,perfects,deficients :: [Integer]`), but 

* I like using the shared information to build all three
* I want to not just be constrained to `Integer`s

ideas?
",haskell,,,,,,open,0,367,18,"Haskell: Getting a value of type `Integral a => [a]` from a value of `Integral a => ([a],[a],[a])` So I'm playing around with this:

    factors :: Integral a => a -> [a] 
    factors n = filter (\d -> n `rem` d == 0) . takeWhile (\d -> d*d <= n) $ [ 1 .. ]

    abundants_perfects_deficients :: Integral a => ([a],[a],[a])
    abundants_perfects_deficients = foldr switch ([],[],[]) [1..]
      where switch :: Integral a => a -> ([a],[a],[a]) -> ([a],[a],[a])
            switch n (as,ps,ds) = 
              let t = sum (factors n) in
                    if t < n  then  (as,ps,n:ds) 
              else  if t == n then  (as,n:ps,ds) 
              else                  (n:as,ps,ds)

And while I've got `abundants_perfects_deficients`, I'd rather have three values: `abundants`, `perfects`, and `deficients` all of type `Integral a -> [a]`.

One thing that doesn't work is:

    abundants,perfects,deficients :: Integral a => [a] 
    (abundants,perfects,deficients) = abundants_perfects_deficients

Because this constrains the three to all be over the same `a`.

I tried something to do them one-by-one, so they wouldn't mutually constrain, but that didn't work either:

    perfects :: Integral a => [a] 
    (_,perfects,_) = abundants_perfects_deficients

Because the compiler couldn't figure out how to convert a value of type `forall a. Integral a => ([a],[a],[a])` to type `(t1, forall a. Integral a => [a], t2)`.

Which seems cromulent enough.  

Now I know I could implement them separately (just `perfects = filter isPerfect [1..]`), or constrain them to all be of the same type (`(abundants,perfects,deficients) = abundants_perfects_deficients` works fine if `abundants,perfects,deficients :: [Integer]`), but 

* I like using the shared information to build all three
* I want to not just be constrained to `Integer`s

ideas?
",1
4768453,01/22/2011 14:45:56,585671,01/22/2011 14:45:56,1,0,Question about type-signature vs. function equation in Haskell,"I'm new to Haskell and to functional programming.  I'm reading through Real World Haskell, and I've realized I'm confused by few examples.
I've boiled it down to this:

Why does this code compile?

f :: Int -> (Int -> Int)
f x y = x+y
 
main = do
  let q = f 4 5
  putStr  (show (q))

According to the type signature, f is clearly accepting 1 parameter and returning a function.
However, it seems I can write the function equation so it will accept two parameters and return an int.
Why is this possible?  Does this mean the type signature is ignored?

Is this currying?  Is this some kind of closure?
If I understand this http://www.haskell.org/haskellwiki/Currying correctly, then it seems to be somewhat in reverse to currying as defined there - my f function is taking multiple arguments instead of a single one!

Also, can anyone answering please provide a link to some sort of Haskell documentation where this ability is stated (if possible at all).  ",haskell,types,signature,,,,open,0,165,8,"Question about type-signature vs. function equation in Haskell I'm new to Haskell and to functional programming.  I'm reading through Real World Haskell, and I've realized I'm confused by few examples.
I've boiled it down to this:

Why does this code compile?

f :: Int -> (Int -> Int)
f x y = x+y
 
main = do
  let q = f 4 5
  putStr  (show (q))

According to the type signature, f is clearly accepting 1 parameter and returning a function.
However, it seems I can write the function equation so it will accept two parameters and return an int.
Why is this possible?  Does this mean the type signature is ignored?

Is this currying?  Is this some kind of closure?
If I understand this http://www.haskell.org/haskellwiki/Currying correctly, then it seems to be somewhat in reverse to currying as defined there - my f function is taking multiple arguments instead of a single one!

Also, can anyone answering please provide a link to some sort of Haskell documentation where this ability is stated (if possible at all).  ",3
10945429,06/08/2012 08:28:38,525980,12/01/2010 02:10:33,2736,52,"Haskell: List fusion, where is it needed?","Lets say we have the following:

    l = map f (map g [1..100])

And we want to do:

    head l

So we get:

    head (map f (map g [1..100]))

Now, we have to get the first element of this. `map` is defined something like so:

    map f l = f (head l) : (map f (tail l))

So then we get:

    f (head (map g [1..100]))

And then applied again:

    f (g (head [1..100]))

Which results in

    f (g 1)

No intermediate lists are formed, simply due to laziness.

Is this analysis correct? And with simple structures like this:

    foldl' ... $ map f1 $ map f2 $ createlist

are intermediate lists ever created, even without ""list fusion""? (I think laziness should eliminate them trivially).
",haskell,lazy-evaluation,,,,,open,0,140,7,"Haskell: List fusion, where is it needed? Lets say we have the following:

    l = map f (map g [1..100])

And we want to do:

    head l

So we get:

    head (map f (map g [1..100]))

Now, we have to get the first element of this. `map` is defined something like so:

    map f l = f (head l) : (map f (tail l))

So then we get:

    f (head (map g [1..100]))

And then applied again:

    f (g (head [1..100]))

Which results in

    f (g 1)

No intermediate lists are formed, simply due to laziness.

Is this analysis correct? And with simple structures like this:

    foldl' ... $ map f1 $ map f2 $ createlist

are intermediate lists ever created, even without ""list fusion""? (I think laziness should eliminate them trivially).
",2
10260974,04/21/2012 16:43:11,1127609,01/03/2012 10:19:25,400,17,mapping a function to a list in Haskell 2 elements a time,"I am trying a few problems (at [Spoj](http://www.spoj.pl/)) in Haskell and I have stumbled on quite a few which have input of the form:

    testcase_1
    testcase_1_continued
    testcase_2 
    testcase_2_continued

or

    testcase_1 testcase_1_continued
    ...

As you can see, one cannot solve this by just using `words` or `lines` on the input and then mapping the solver function to get something like 

    [solver test1, solver test2, ...]

One should use a function with **two** arguements, which are two list elements, one after the other, and get:

    [solver test1 test1continued, solver test2 test2continued, ...]

So I would be pleased to find an analogous function to `map` which applies a function 2 arguments at a time.I have not been able to find anything on Hoogle, and however easy it would be to write such a function, I am looking for a more general approach to the problem.Or, if my approach(of insisting on `map`) is definitely wrong, one could also point me to the right direction.",haskell,spoj,,,,,open,0,182,12,"mapping a function to a list in Haskell 2 elements a time I am trying a few problems (at [Spoj](http://www.spoj.pl/)) in Haskell and I have stumbled on quite a few which have input of the form:

    testcase_1
    testcase_1_continued
    testcase_2 
    testcase_2_continued

or

    testcase_1 testcase_1_continued
    ...

As you can see, one cannot solve this by just using `words` or `lines` on the input and then mapping the solver function to get something like 

    [solver test1, solver test2, ...]

One should use a function with **two** arguements, which are two list elements, one after the other, and get:

    [solver test1 test1continued, solver test2 test2continued, ...]

So I would be pleased to find an analogous function to `map` which applies a function 2 arguments at a time.I have not been able to find anything on Hoogle, and however easy it would be to write such a function, I am looking for a more general approach to the problem.Or, if my approach(of insisting on `map`) is definitely wrong, one could also point me to the right direction.",2
7131954,08/20/2011 13:15:28,9859,09/15/2008 20:13:55,16458,366,Haskell/GHC: Matching multiple unary constructors with the same pattern,"So I was playing around with defining a TrieSet datatype (even though I know [I don't need to](http://hackage.haskell.org/package/TrieMap)): 

    module Temp where

    import Data.Map

    data TrieSet a = Nonterminal (Data.Map a (TrieSet a)) | Terminal (Data.Map a (TrieSet a))

    insert :: Ord a => [a] -> TrieSet a -> TrieSet a
    insert [] (_ m) = Terminal m
    insert (a:as) (c m) = c $ insertWith (insert as . flip const) a (insert as $ Nonterminal empty) m

When I got an error I've never seen before:

    % ghc -c Temp.hs
    Temp.hs:8:11: Parse error in pattern

So it seemed like GHC doesn't like matching multiple unary constructors with the same pattern.
I did another test to make sure that was the problem:

    module Temp2 where

    extract :: Either String String -> String
    extract (_ s) = s

Which seemed to confirm my suspicion:

    % ghc -c Temp2.hs
    Temp2.hs:4:9: Parse error in pattern

So my question is (in multiple parts):

1. Am I right about why GHC doesn't like these functions?
2. Any reason why this wouldn't be a part of the Haskell standard?  After all, we can match multiple nullary constructors with the same pattern.
3. Is there a LANGUAGE pragma I can give GHC to make it accept these?
",haskell,constructor,pattern-matching,ghc,,,open,0,242,9,"Haskell/GHC: Matching multiple unary constructors with the same pattern So I was playing around with defining a TrieSet datatype (even though I know [I don't need to](http://hackage.haskell.org/package/TrieMap)): 

    module Temp where

    import Data.Map

    data TrieSet a = Nonterminal (Data.Map a (TrieSet a)) | Terminal (Data.Map a (TrieSet a))

    insert :: Ord a => [a] -> TrieSet a -> TrieSet a
    insert [] (_ m) = Terminal m
    insert (a:as) (c m) = c $ insertWith (insert as . flip const) a (insert as $ Nonterminal empty) m

When I got an error I've never seen before:

    % ghc -c Temp.hs
    Temp.hs:8:11: Parse error in pattern

So it seemed like GHC doesn't like matching multiple unary constructors with the same pattern.
I did another test to make sure that was the problem:

    module Temp2 where

    extract :: Either String String -> String
    extract (_ s) = s

Which seemed to confirm my suspicion:

    % ghc -c Temp2.hs
    Temp2.hs:4:9: Parse error in pattern

So my question is (in multiple parts):

1. Am I right about why GHC doesn't like these functions?
2. Any reason why this wouldn't be a part of the Haskell standard?  After all, we can match multiple nullary constructors with the same pattern.
3. Is there a LANGUAGE pragma I can give GHC to make it accept these?
",4
9935107,03/29/2012 23:33:38,354259,05/31/2010 02:37:08,50,0,Haskell Trading engine,"so we're doing this assignment at Uni and i have a serious craving to do the assignment in haskell. Its a simulation of a stock trading engine. Situation is that we have data coming in from a csv and we wish to parse each record and process it in a certain way dependent on which market phase its allocated to. Justification for using haskell, is that i view the trading engine as heavy functional system.

I have had haskell experience before but only minor experience, never anything this big.

We were wanting to run a thread which would import the csvs into a queue of unprocessed orders and then have the main program access this queue for processing each order. However how could i achieve this? I know in C# i would just set up the class so it could access the CSVParser class that would hold the unprocessed queue. This also means that the import thread would be continuously running through all the market phases or until it finished importing the csv file.

Any guidance on how to achieve this would be great! (not looking for a fully typed script, just what things in haskell i would need to look at)",haskell,,,,,03/30/2012 01:45:43,not a real question,1,199,3,"Haskell Trading engine so we're doing this assignment at Uni and i have a serious craving to do the assignment in haskell. Its a simulation of a stock trading engine. Situation is that we have data coming in from a csv and we wish to parse each record and process it in a certain way dependent on which market phase its allocated to. Justification for using haskell, is that i view the trading engine as heavy functional system.

I have had haskell experience before but only minor experience, never anything this big.

We were wanting to run a thread which would import the csvs into a queue of unprocessed orders and then have the main program access this queue for processing each order. However how could i achieve this? I know in C# i would just set up the class so it could access the CSVParser class that would hold the unprocessed queue. This also means that the import thread would be continuously running through all the market phases or until it finished importing the csv file.

Any guidance on how to achieve this would be great! (not looking for a fully typed script, just what things in haskell i would need to look at)",1
9850690,03/24/2012 09:44:39,211885,11/16/2009 08:30:49,254,4,Haskell: reading Pico,"Here is a small program showing a problem:

    import Data.Fixed
    
    main = do
        print x
      where
        x :: Pico
        x = read ""12"" -- error: no instance for 'Read Pico'

I see library GHC source code in Fixed.hs - there is instance for Read (copying some code):

    type Pico = Fixed E12
    
    data E12 = E12

    instance HasResolution E12 where
        resolution _ = 1000000000000

    instance (HasResolution a) => Read (Fixed a) where
        readsPrec _ = readsFixed

What's wrong with my reasoning and why compiler doesn't see that Pico is instance of Read?
",haskell,,,,,,open,0,156,3,"Haskell: reading Pico Here is a small program showing a problem:

    import Data.Fixed
    
    main = do
        print x
      where
        x :: Pico
        x = read ""12"" -- error: no instance for 'Read Pico'

I see library GHC source code in Fixed.hs - there is instance for Read (copying some code):

    type Pico = Fixed E12
    
    data E12 = E12

    instance HasResolution E12 where
        resolution _ = 1000000000000

    instance (HasResolution a) => Read (Fixed a) where
        readsPrec _ = readsFixed

What's wrong with my reasoning and why compiler doesn't see that Pico is instance of Read?
",1
7438587,09/15/2011 23:26:09,670428,03/22/2011 01:55:29,36,4,"Implementing Read typeclass where parsing strings includes ""$""","I've been playing with Haskell for about a month. For my first ""real"" Haskell project I'm writing a parts-of-speech tagger. As part of this project I have a type called `Tag` that represents a parts-of-speech tag, implemented as follows:

    data Tag = CC | CD | DT | EX | FW | IN | JJ | JJR | JJS ...

The above is a long list of standardized parts-of-speech tags which I've intentionally truncated. However, in this standard set of tags there are two that end in a dollar sign ($): PRP$ and NNP$. Because I can't have type constructors with $ in their name, I've elected to rename them PRPS and NNPS.

This is all well and good, but I'd like to read tags from strings in a lexicon and convert them to my `Tag` type. Trying this fails:

    instance Read Tag where
        readsPrec _ input =
            (\inp -> [((NNPS), rest) | (""NNP$"", rest) <- lex inp]) input

The Haskell lexer chokes on the $. Any ideas how to pull this off?

Implementing Show was fairly straightforward. It would be great if there were some similar strategy for Read.

    instance Show Tag where
        showsPrec _ NNPS = showString ""NNP$""
        showsPrec _ PRPS = showString ""PRP$""
        showsPrec _ tag  = shows tag



",haskell,linguistics,,,,,open,0,257,8,"Implementing Read typeclass where parsing strings includes ""$"" I've been playing with Haskell for about a month. For my first ""real"" Haskell project I'm writing a parts-of-speech tagger. As part of this project I have a type called `Tag` that represents a parts-of-speech tag, implemented as follows:

    data Tag = CC | CD | DT | EX | FW | IN | JJ | JJR | JJS ...

The above is a long list of standardized parts-of-speech tags which I've intentionally truncated. However, in this standard set of tags there are two that end in a dollar sign ($): PRP$ and NNP$. Because I can't have type constructors with $ in their name, I've elected to rename them PRPS and NNPS.

This is all well and good, but I'd like to read tags from strings in a lexicon and convert them to my `Tag` type. Trying this fails:

    instance Read Tag where
        readsPrec _ input =
            (\inp -> [((NNPS), rest) | (""NNP$"", rest) <- lex inp]) input

The Haskell lexer chokes on the $. Any ideas how to pull this off?

Implementing Show was fairly straightforward. It would be great if there were some similar strategy for Read.

    instance Show Tag where
        showsPrec _ NNPS = showString ""NNP$""
        showsPrec _ PRPS = showString ""PRP$""
        showsPrec _ tag  = shows tag



",2
